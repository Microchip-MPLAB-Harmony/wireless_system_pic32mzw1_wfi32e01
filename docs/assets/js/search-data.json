{"0": {
    "doc": "App Debug System Service Configuration",
    "title": "App Debug System Service Configuration",
    "content": "The enabling/ disabling of App Debug System Service library should be done through the MHC. More on how any component can integrate this library into his own component can be found by going through some of the system services like the MQTT, NET, and Wifi System Service. Note that App Debug System Service component does not have any conifgurations to be done separately. All the configurations needs to come via the other components using it. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/appdebug/docs/configuration.html",
    "relUrl": "/system/appdebug/docs/configuration.html"
  },"1": {
    "doc": "Wi-Fi System Service Configuration",
    "title": "Wi-Fi System Service Configuration",
    "content": "The Wi-Fi System Service library should be configured through MHC(MPLAB Harmony Configurator). The following figure shows the MHC configuration window for configuring the Wi-Fi System Service and a brief description of various configuration options. When user select the Wi-Fi System Service library, all the required dependencies are added automatically into the MHC configuration. In the Wi-Fi System Service library, user can select the operating device mode as station(STA) or access point(AP) and make a required changes in the selected mode. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifi/docs/configuration.html",
    "relUrl": "/system/wifi/docs/configuration.html"
  },"2": {
    "doc": "Wi-Fi System Service Configuration",
    "title": "Configuration Options:",
    "content": " Using MHC menu,user can select required device mode as a station(STA) or access point(AP) . Device Mode: . Indicates the device operation mode(STA/AP). STA Mode: . SSID: Access Point (AP/Router) SSID to connect. Security type : Indicates the security being used by the AP with which device should connect – OPEN / WPA2 / WPAWPA2 (Mixed)/ WPA3. Password: Password to be used while connecting to the AP. This is mandatory if security mode is set to anything other than OPEN. It will be ignored if security mode is set to OPEN. Auto Connect: Indicate whether to auto connect to AP (enable) or wait for user input (disable). AP Mode: . SSID: Indicate AP mode SSID. Security: Indicate AP mode security: - OPEN - WPA2 - WPAWPA2(Mixed) - WPA3 Password: Indicate AP mode password(passphrase). SSID Visibility: Indicate AP mode SSID visibility. Channel: Indicate operating channel of AP mode. Advanced configuration: . Country code: Regulatory domain country code configuration: - GEN - General - USA - North America - EMEA - Europe - JPN - Japan Number of Clients: Indicates the maximum number of clients user can register. Enable Wi-Fi Provisioning service: Enables/Disables Wi-Fi Provisioning System Service functionality along with Wi-Fi System Service. Enable Wi-Fi Scanning: Enables/Disables Wi-Fi Scan functionality of Wi-Fi System Service. Channel Number: Values of Scan Channel Number: 0 - scan all the channels 1 to 13 - - scan on specified channel Scan Mode: ACTIVE : Requst Active Scan PASSIVE : Request Passive Scan SSID List(Active Scan Only): User preferred SSIDs list for scanning. Maximum 4 SSIDs of maximum 32 characters allowed. e.g. DEMO_AP1,DEMO_AP2,DEMO_AP3,DEMO_AP4). This field is only applicable for Active Scan. SSID List Delimiter character: Delimiter used for separating names in the \"SSID List(Active Scan Only)\" field. Bitwise Channel Scan Mask: - 0x3fff : All 2.4GHZ channels - 0x07ff : 2.4GHz channels 1 through 11 (USA) - 0x1fff : 2.4GHz channels 1 through 13 (Europe) - 0x3fff : 2.4GHz channels 1 through 14(Asia) - 0x0001 : 2.4GHz (2412 MHz) channel 1 - 0x0002 : 2.4GHz (2412 MHz) channel 2 - User can find more details of mask value in the WDRV_PIC32MZW_CHANNEL24_MASK Number Of Slots: The number of scan slots per channel. Active Slot Time: Time(in milliseconds) spent on each active channel to send the probe requests to find near by BSS's. Passive Slot Time: Time(in milliseconds) spent on each passive channel listening for beacons. Number Of Probes: Number of probe requests to be sent for each scan slot when \"SSID List\" field is empty. Number of probe requests to be sent for each ssid to scan in each scan slot when preferred \"SSID List\" is configured. This field is only applicable for Active Scan. Scan Match Mode: FIND_ALL: Scan for all matches STOP_ON_FIRST : Stop scan on first match Enable Debug Logs: Enables/Disables Wi-Fi and Wi-Fi Provisioning System Service flows and levels. Note: In case the user enables debug logs, user needs to manually add the 'App Debug Service' component from Wireless-&gt; System Service-&gt; App Debug Service. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifi/docs/configuration.html#configuration-options",
    "relUrl": "/system/wifi/docs/configuration.html#configuration-options"
  },"3": {
    "doc": "Wi-Fi System Service Configuration",
    "title": "Enabling Wi-Fi System Service",
    "content": "All of the required files are automatically added into the MPLAB X IDE project by the MHC when the library is selected for use. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifi/docs/configuration.html#enabling-wi-fi-system-service",
    "relUrl": "/system/wifi/docs/configuration.html#enabling-wi-fi-system-service"
  },"4": {
    "doc": "OTA System Service Configuration",
    "title": "OTA System Service Configuration",
    "content": "The OTA System Service library should be configured through the MHC ( MHC configuration is initial configuration, some of parameters can be changed runtime using respective APIs - follow Library interface ). When user selects the OTA System Service library, all the required dependencies components are added automatically in the MHC configuration. The following figure shows the MHC configuration window for configuring the OTA System Service and a brief description of various configuration options. | Open the MHC 3 | Drag the OTA Service Module into the Active components from the Available components. | Configure the various parameters . | configure Auto reset: . By default this option will be enabled . System will reset automatically after successful download of OTA image to load new image into the system and run, without any notifications to the current application. If it is disabled by user , system will not go for reset automatically. Instead, it will be waiting for user trigger for system reset. | configure server URL: . User need to provide the server url where the manifest file in json format is available. OTA service will use this url to connect to server and download json file to check for updates. | configure Auto OTA update: . By default this option will be enabled. If it is enabled , OTA service will not wait for user trigger to initiate OTA process. It will automatically start OTA process if new update is available in the server. If it is disabled , OTA service will wait for user trigger to initiate OTA process. User will be notified about new update availability via user defined callbacks. | configure Periodic OTA check: . By default this option will be configured to 60 seconds. When enabled, OTA service will periodically download the manifest file to check for update availability at the user defined interval. If it is disabled, OTA service will be checking for update availability on user trigger via the control message API. | configure Application version: . User must ensure to provide correct integer version while generating OTA image. This version number should be also be mentioned in the manifest file in OTA server. OTA upgrade will be triggered when a version with numerically higher version number is identified in the manifest file. | configure Advances Configuration: . | Number of images: This configuration controlled the number of OTA images to be stored in the filesystem. If number of images downloaded via OTA process exceeds this number, user will be notified with a console message and the oldest image in the database will be replaced with newly downloaded image automatically. This count excludes the factory reset image that will be backed-up to the filesystem by the bootloader at first boot. | Set JSON file size in bytes: Maximum size (in bytes) of the json file present in the server. | Enforce TLS: By default this option will be disabled. If it is enabled by user, service will enforce TLS connection irrespective of the server URL prefix (http:// / https://)mentioned by user. Server certificate verification will not be done fo TLS connection, if required user needs to explicitly add lines of code for same. | . NOTE : If disabled service will automatically detect and go for http or https connection, by looking into server URL mentioned by user . | Disk space check: By default this option will be disabled. If enable, free sector check will be done, in ext flash before download starts. | Enable/Disable Patch Functionality: By default this option will be disabled. If enabled by user ,OTA service will enable code to support patch functionality. | . | . All of the required files are automatically added into the MPLAB X IDE project by the MHC when the OTA Service is selected for use. | Generate code using “Generate” button in MHC : . | In case you are creating a factory image, include the bootloader project from the apps folder of this repo as a loadable project into the application : . NOTE: Please open bootloader project in MPLABx IDE and compile separately, before loading . | Build the project to get the unified hex and load the same on device. | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/configuration.html",
    "relUrl": "/system/ota/docs/configuration.html"
  },"5": {
    "doc": "OTA System Service Configuration",
    "title": "Building custom logic",
    "content": "User can build custom logic required for own design, using configrable parameters as mentioned above. Additionally , users can also build and apply required application level logic which can be included in app.c file. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/configuration.html#building-custom-logic",
    "relUrl": "/system/ota/docs/configuration.html#building-custom-logic"
  },"6": {
    "doc": "OTA System Service Configuration",
    "title": "Easily registering user callbacks",
    "content": "For making it more flexible and easy for users to register OTA service callbacks, OTA service will generate the app_ota.c file, which contains a skeleton of the callback function definition that can be used to implement business-logic. The file also provides an easy to use initialization function that can be invoked from the user application to register these callbacks in case you decide to use them. For more details please follow the instructions in Library interface . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/configuration.html#easily-registering-user-callbacks",
    "relUrl": "/system/ota/docs/configuration.html#easily-registering-user-callbacks"
  },"7": {
    "doc": "MQTT System Service Configuration",
    "title": "MQTT System Service Configuration",
    "content": "The MQTT System Service library should be configured through the MHC. When user selects the MQTT System Service library, all the required dependencies components are added automatically in the MHC configuration. The following figure shows the MHC configuration window for configuring the MQTT System Service and a brief description of various configuration options. | Open the MHC 3 | Drag the MQTT Service Module into the Active components from the Available components | . ![](/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/images/Mqtt_service_MHC.png) . | Configure the various parameters of Basic Configuration | . | Parameter Name | Default Value | Description | . | Broker Name |   | Name of the MQTT BrokerNote: User should ensure that the Broker is UP and running. In case the connection timesout often, the User can modify the value of SYS_MQTT_PERIOIDC_TIMEOUT as per his requirement. | . | Server Port |   | Port number of the MQTT Broker at which the MQTT Client should connect | . | Enable TLS | FALSE | If TRUE, the MQTT connection should use TLS while connecting to the broker. If FALSE, the MQTT connection should not use TLS.Note: In case the TLS is enabled, the User needs to update the component ‘Presentation Layer’ with the CA Certificate format, location, name, and size. Other parameters can be updated as per the User’s requirements. | . | Enable SNI | FALSE | Server Name Indication ff TRUE, enables a client device to specify the domain name it is trying to reach in the first step of the TLS handshake.Note: In case the SNI is enabled, the Broker Name is taken as the Domain Name. | . | Enable ALPN | FALSE | Application-Layer Protocol Negotiation (ALPN) is a TLS extension that allows the application layer to negotiate which protocol should be performed over a secure connection in a manner that avoids additional round trips and which is independent of the application-layer protocols | . | Client Id |   | MQTT Client Id should be unique for the Broker. If left empty, the Id will be generated randomly | . | Network Interface |   | Network Interface - Wifi or Ethernet on which the MQTT Client should run. On choosing Ethernet, the MHC will add EthMAC, MIIM, and LAM8740 Components. The User needs to attach the EthMAC to the NetConfig (in System Component Window) via the MAC parameter in Instance 1 | . | Configure the various parameters of Presentation Layer if TLS enabled | . | Configure the various parameters of ‘Advanced Configuration’ of the MQTT Service | . | Parameter Name | Default Value | Description | . | Enable Auto Reconnect | TRUE | If TRUE, the MQTT Service will auto reconnect to the Broker if connection is broken. If FALSE, the customer application needs to take care of triggering the connection process again. | . | Enable Clean Session | TRUE | If TRUE, the MQTT Client shall tell the Broker that the session is clean; else, it will let the Broker know that the session is a continuation of the previous session. Also, if “clean session” is disabled, it is valid only within a single boot session in the Client (i.e. reconnecting before the next power-on reset) and not across boots | . | KeepAlive Interval | 60 sec | If no data flows over an open connection for a certain KeepAliveInterval then the client will generate a PINGREQ and expect to receive a PINGRESP from the broker. This message exchange confirms that the connection is open and working | . | Username/ Password | Disabled | In case the connection to Broker needs a Username and Password | . | Last Will and testament | Disabled | LWT Configuration has the following parameters – 1. Topic, 2. QoS, 3. Retain, and 4. Message This ‘Message’ will be sent on the ‘Topic’ whenever the Broker finds that there is an ungraceful disconnection with the Client. | . | Configure the remaining parameters | . | Parameter Name | Default Value | Description | . | Subscription Topic | Disabled | Subscription configuration has 2 Parameters – 1. Topic and 2. Qos. (0 (Atmost Once), 1 (Atleast Once), 2 (Exactly Once)) The User can configure these parameters to subscribe to a Topic to receive messages. | . | Publish to Topic | Disabled | Publishing a message to Topic has 3 Parameters – 1. Topic and 2. Qos ( 0 (Atmost Once), 1 (Atleast Once), 2 (Exactly Once)) 3. Retain: If the Broker should retain the message The User can configure these parameters to and use them along with the message to send it on a particular Topic. | . | Enable CLI Commands | Enabled | Enabling this flag compiles in the CLI commands related to Mqtt Service. The user can use these CLI commands to connect/ disconnect, subscribe/ unsusbscribe, publish messages onto a topic. | . | Enable Debug Logs | Disabled | Enabling this flag compiles in debug logs and user can enable them at runtime. The user can use the following CLI commands to enable/ disable levels and flows for the MQTT service: 1. sysmqtt debug level 2. sysmqtt debug flow Note: In case the user enables debug logs, user needs to manually add the 'App Debug Service' component from Wireless-&gt; System Service-&gt; App Debug Service. | . To use the device certificates stored in ATECC608A-TNGTLS, enable the “Trust&amp;Go client certificate” option under the net service configurations. Make sure that you enable TLS in the MQTT configuration to use the client certificate during the TLS handshake. All of the required files are automatically added into the MPLAB X IDE project by the MHC when the MQTT Service is selected for use. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/configuration.html",
    "relUrl": "/system/mqtt/docs/configuration.html"
  },"8": {
    "doc": "Web Socket Server System Service Configuration",
    "title": "Web Socket Server (WSS) System Service Configuration",
    "content": "The WSS System Service library should be configured through MHC. When user adds the WSS System Service into a project, all the required dependencies and components are added automatically into the the projects MHC configuration. The user can make changes according to the application requirement in the WSS System Service configuration menu. The following figure shows the MHC configuration window for configuring the WSS System Service and a brief description of various configuration options. | Open the MHC 3 | Drag the WSS Service Module into from the Available components into the Project Graph. This will trigger the auto activation of the dependent modules.Click on ‘Yes’ in the confirmation window popped up for component auto activation. | Configure the various parameters . | . | Parameter | Description | . | Port | port used by the WSS service. Default is 8000 | . | Debug | Control debug prints. Disabled by default | . | Secure Socket | Enable/Disable secure web socket. Make sure that you configure the required server certificate and keys in the underlying layers. | . | Application template Generation | Control the generation of an application template with all the available callbacks. | . | Advanced Configuration with RX buffer size, maximum number of supported clients, client timeout and start at boot features. | . | Parameter | Description | . | Max Rx buffer length | Max length of the buffer used to receive and process messages. Default is 1400 | . | Max number of clients | Max number of clients allowed to connect to teh WSS. Default is 2 | . | Client timeout in ms | Timeout after which the client is disconnected in case of no data transfer or ping after connection. Default is 30000 | . | Start at boot | Control when the WSS is enabled. Enabled at boot by default. | . | FreeRTOS configuration enabled by default | . | Parameter | Description | . | RTOS Task Delay(ms) | WSS RTOS task delay. Default is 1 ms | . | RTOS Task Stack Size | WSS RTOS task stack size. Default is 4096 | . | RTOS Task priority | WSS RTOS task priority. Default is 1 | . All of the required files are automatically genarted and added into the MPLAB X IDE project by the MHC when the code generation completes successfully. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wss/docs/configuration.html#web-socket-server-wss-system-service-configuration",
    "relUrl": "/system/wss/docs/configuration.html#web-socket-server-wss-system-service-configuration"
  },"9": {
    "doc": "Web Socket Server System Service Configuration",
    "title": "Web Socket Server System Service Configuration",
    "content": " ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wss/docs/configuration.html",
    "relUrl": "/system/wss/docs/configuration.html"
  },"10": {
    "doc": "Net System Service Configuration",
    "title": "Net System Service Configuration",
    "content": "The NET System Service library should be configured through the MHC. When user selects the NET System Service library, all the required dependencies components are added automatically in the MHC configuration. In the NET System Service library, user can select the mode as Client or Server and make required changes for the selected mode. The following figure shows the MHC configuration window for configuring the NET System Service and a brief description of various configuration options. | Open the MHC 3 | Drag the Net Service Module into the Active components from the Available components . | Configure the various parameters . | Configure the Supported Interface - ‘WIFI_ONLY’ (Wifi Only), or ‘WIFI_ETHERNET’ (Wifi and Ethernet Both) or ‘ETHERNET_ONLY (Ethernet Only)’. On choosing WIFI_ETHERNET or ETHERNET_ONLY, the MHC will add EthMAC, MIIM, and LAM8740 Components. The User needs to attach the EthMAC to the NetConfig (in System Component Window) via the MAC parameter in Instance 1 like below: . | Configure the Number of Sockets Supported - 2 to 8, default sockets being 2. | Debug - Enabled by default - has ‘CLI Commands’ and ‘Debug Logs’ as sub parameters . | Enable CLI Commands - This is enabled by default. This can be used by the user to give commands on the CLI to open/ close/ send message on a socket. | Enable Debug Logs in case more prints are required for debugging. By Default, the parameter value is ‘False’.Note: In case the user enables debug logs, user needs to manually add the ‘App Debug Service’ component from Wireless-&gt; System Service-&gt; App Debug Service. | . | User can configure 2 instances of a Net Socket. By default, only the first one is enabled. | Instance 0: . | Configure the Network Interface as Wifi or Ethernet. Note that Ethernet as an interface can only be chosen if the ‘Supported Intefaces’ parameter is WIFI_ETHERNET. | Configure the IP Protocol as either TCP or UDP . | Configure the Mode as either Client or Server . | Enable/ Disable “Auto Connect” as per your requirement. This parameter when enabled ensures that if the NET Connection disconnects, the service internally tries to reconnect. By Default, the parameter value is ‘True’. | Enable/ Disable “Enable TLS” in case the connection needs to be secured. This parameter is valid only in case of ‘Client’ mode. Please note that in case this parameter is Enabled, users need to configure the WolfSSL related configuration on their own. Also, this parameter is valid only for TCP Connections. By Default, the parameter value is ‘False’.Note: In case the TLS is enabled, the User needs to update the component ‘Presentation Layer’ with the CA Certificate format, location, name, and size. Other parameters can be updated as per the User’s requirements. | Configure the various parameters of Presentation Layer if TLS enabled . | . | Server Port - 1-65535. This is a mandatory parameter. In case Mode is selected as Client, Server port should be set to the port number of the server with which the device will connect. In case mode is selected as Server, Server port should be set to the port number at which the server will start . | Host Name/ IP Address: Can be a Host Name or an IP Address. By Default, the parameter value is ‘192.168.1.1’. | . | Instance 1 - User can enable this to give a configuration for another socket. Also, once the user gives this config, SYS_NET_Open() API will return error if it is passed NULL as config since now more than one instance is defined in the MHC. | To use the device certificates stored in ATECC608A-TNGTLS, enable the “Trust&amp;Go client certificate” option under the net configurations. | . All of the required files are automatically added into the MPLAB X IDE project by the MHC when the Net Service is selected for use. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/net/docs/configuration.html",
    "relUrl": "/system/net/docs/configuration.html"
  },"11": {
    "doc": "Wi-Fi provisioning System Service Configuration",
    "title": "Wi-Fi provisioning System Service Configuration",
    "content": "The Wi-Fi Provisioning System Service library should be configured through MHC(MPLAB Harmony Configurator). The following figure shows the MHC configuration window for configuring the Wi-Fi Provisioning System Service and a brief description of various configuration options. The Wi-Fi Provisioning System Service library MHC menu provide option to enable required Wi-Fi Provisioning methods base on user application requirements. User can select Command line , Socket mode and HTTP as shown in below diagram. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/configuration.html",
    "relUrl": "/system/wifiprov/docs/configuration.html"
  },"12": {
    "doc": "Wi-Fi provisioning System Service Configuration",
    "title": "Configuration Options:",
    "content": ". | WiFi Configuration Stored At ? . | The Wi-Fi Provisioning System Service provide the two option to user to store the WiFi Configuration. | NVM : . | The Wi-Fi Provisioning System Service store the WiFi Configuration into NVM using it’s internal framework. | WiFi Configuration Stored at NVM Address(Program Flash memory): . | NVM Address for storing Wi-Fi Configuration. | User can change this configuration value with program flash memory page aligned address. | The Wi-Fi Provisioning System Service by defult reserve 4KB from user provide NVM address for storing Wi-Fi Configuration. | User has to make sure the NVM address(Program Flash memory) page is not overwritten by application code. | . | Save Configuration in the NVM(Program flash memory): . | Indicates the Wi-Fi configuration storing in the NVM. | This configuration is only valid when “Enable Wi-Fi Provisioning service” is enabled. | . | . | User : . | The Wi-Fi Provisioning System Service don’t store the WiFi Configuration into any memory. | The Wi-Fi Provisioning System generate the application callback using WiFi service with message type SYS_WIFI_PROVCONFIG for user to store and manage the WiFi Configuration as per their choice. | . | . | . Wi-Fi Provisioning Methods . | Command Line(CLI): . | Enable/Disable Wi-Fi Provision using command line. | . | HTTP pages: . | Enable/Disable Wi-Fi Provision using HTTP pages(webpage). | HTTP Socket Number: . | User configuration for HTTP Server Socket. | Defult port number is 80. | . | . | TCP socket: . | Enable/Disable Wi-Fi Provision using TCP Socket. | TCP Socket Number: . | User configuration for TCP Server Socket. | Defult port number is 6666. TCP Socket port number is used by Mobile Applicaiton and JSON. | . | . | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/configuration.html#configuration-options",
    "relUrl": "/system/wifiprov/docs/configuration.html#configuration-options"
  },"13": {
    "doc": "Web Socket System Service Developer's Guide",
    "title": "Web Socket Server System Service Developer’s Guide",
    "content": ". | Overview | Detailed Design . | State Machine | Number of Clients Supported | Client time out | API Implementation . | SYS_WSS_register_callback() | SYS_WSS_CloseConnection() | SYS_WSS_PingClient() | SYS_WSS_sendMessage() | SYS_WSS_Initialize() / SYS_WSS_Deinitialize() | . | Code location | . | Reference | . The purpose of this document is to explain the Web Socket Server system service design to enable the developer to make changes in the service code as per his/ her requirements if the need be. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wss/docs/developer.html#web-socket-server-system-service-developers-guide",
    "relUrl": "/system/wss/docs/developer.html#web-socket-server-system-service-developers-guide"
  },"14": {
    "doc": "Web Socket System Service Developer's Guide",
    "title": "Overview",
    "content": "The WSS system service provides an application programming interface (API) to manage the Web Socket Server functionalities over TCP/IP Networking. The WSS system service uses the MPLAB Harmony NET system service to achieve the TCPIP functionalities. Key Features: . | Implements the WSS protocol as a service | Supports multiple client connections simultaneously | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wss/docs/developer.html#overview",
    "relUrl": "/system/wss/docs/developer.html#overview"
  },"15": {
    "doc": "Web Socket System Service Developer's Guide",
    "title": "Detailed Design",
    "content": "WSS system service is a background service with which the application can interact using the APIs provided. The idea of the WSS system service is to reduce the code size for the application and simplifying the state machine that the application may need to maintain by abstracting out the complexity of the Web Socket Server in the system service. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wss/docs/developer.html#detailed-design",
    "relUrl": "/system/wss/docs/developer.html#detailed-design"
  },"16": {
    "doc": "Web Socket System Service Developer's Guide",
    "title": "State Machine",
    "content": "The various states of the WSS system service are of the enum type SYS_WSS_STATE. The WSS system service runs a finite state machine with the following states: . | SYS_WSS_STATE_CLOSED : Initial State of the WSS system service, at the initialization. | SYS_WSS_STATE_CLOSING : An intermediate state which handles the processing of the client closing handshake . | SYS_WSS_STATE_CONNECTING : An intermediate state which handles the processing of the client opening handshake. | SYS_WSS_STATE_CONNECTED : The state which handles all the data transmissions. | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wss/docs/developer.html#state-machine",
    "relUrl": "/system/wss/docs/developer.html#state-machine"
  },"17": {
    "doc": "Web Socket System Service Developer's Guide",
    "title": "Number of Clients Supported",
    "content": "The maximum number of Clients supported by WSS system service currently is 8. The user can change the value via the MHC. Default the value is set to 2. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wss/docs/developer.html#number-of-clients-supported",
    "relUrl": "/system/wss/docs/developer.html#number-of-clients-supported"
  },"18": {
    "doc": "Web Socket System Service Developer's Guide",
    "title": "Client time out",
    "content": "The user can configure a timeout value which will be considered as a maximum idle time for a client connection. The default timeout value is 30s. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wss/docs/developer.html#client-time-out",
    "relUrl": "/system/wss/docs/developer.html#client-time-out"
  },"19": {
    "doc": "Web Socket System Service Developer's Guide",
    "title": "API Implementation",
    "content": "This section describes the high level implementation details of the WSS APIs. SYS_WSS_register_callback() . The API is used for registering the application callback function with the WSS service. SYS_WSS_CloseConnection() . This API is used to close the Web Socket connection to the client indicated by the parameter clientIndex. This will initiate the closing handshake from the server. SYS_WSS_PingClient() . This API is used to send a ping message to the client indicated by the parameter clientIndex. SYS_WSS_sendMessage() . This API is used to send a message to the client indicated by the parameter clientIndex. SYS_WSS_Initialize() / SYS_WSS_Deinitialize() . These functions are used for initializing/ deinitializing the data structures of the WSS system service. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wss/docs/developer.html#api-implementation",
    "relUrl": "/system/wss/docs/developer.html#api-implementation"
  },"20": {
    "doc": "Web Socket System Service Developer's Guide",
    "title": "Code location",
    "content": "The base code for the WSS system service can be found in the wireless_system_pic32mzw1_wfi32e01\\system\\wss . The same shall be copied to the following location after the code for the application is generated – my_application\\firmware\\src\\config\\pic32mz_w1_curiosity\\system\\wss . The core includes two files: . | Header file: sys_wss.h . | Source file: src/sys_wss.c . | . The WSS component can also optinoally generate two application template files. The template file includes a callback that can be modified as required by the end user application. | Header file: app_wss.h . | Source file: src/app_wss.c . | . Since the above files could see modifications across releases, the users should take care of merging the changes they did in these files with the ones which were done in the new release by Microchip Team. For this the user needs to take care of this while generating the code via the MHC: . While generating the code the user should use the Merge Strategy as USER_ALL, and click Generate. In case there are changes done by user in any of the files, the MHC shall prompt the user about it: . The user can merge his changes with the the latest changes done in the services using the above window. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wss/docs/developer.html#code-location",
    "relUrl": "/system/wss/docs/developer.html#code-location"
  },"21": {
    "doc": "Web Socket System Service Developer's Guide",
    "title": "Reference",
    "content": "| S. No | Name | Link | . | 1 | WSS system service Usage | https://microchip-mplab-harmony.github.io/wireless_system_pic32mzw1_wfi32e01/docs/system/wss/docs/usage.html | . | 2 | WSS system service Interface | https://microchip-mplab-harmony.github.io/wireless_system_pic32mzw1_wfi32e01/docs/system/wss/docs/interface.html | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wss/docs/developer.html#reference",
    "relUrl": "/system/wss/docs/developer.html#reference"
  },"22": {
    "doc": "Web Socket System Service Developer's Guide",
    "title": "Web Socket System Service Developer's Guide",
    "content": " ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wss/docs/developer.html",
    "relUrl": "/system/wss/docs/developer.html"
  },"23": {
    "doc": "Net System Service Developer's Guide",
    "title": "Net System Service Developer’s Guide",
    "content": ". | Overview | Detailed Design . | State Machine . | Client State Machine | Server State Machine | . | Number of Sockets Supported | External APIs . | SYS_NET_Open () | SYS_NET_Close () | SYS_NET_SendMsg () | SYS_NET_RecvMsg () | Self-Healing | SYS_NET_Task () | SYS_NET_CtrlMsg () | SYS_NET_Initialize()/ SYS_NET_Deinitialize() | SYS_NET_SetConfigParam() | . | CLI Commands | Code location | . | Reference | . The purpose of this document is to explain the NET system service design to enable the developer to make changes in the service code as per his/ her requirements if the need be. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/net/docs/developer.html#net-system-service-developers-guide",
    "relUrl": "/system/net/docs/developer.html#net-system-service-developers-guide"
  },"24": {
    "doc": "Net System Service Developer's Guide",
    "title": "Overview",
    "content": "NET system service Library provides an application programming interface (API) to manage TCP/IP Networking functionalities. The NET system service uses the MPLAB Harmony NetPres APIs for achieving these functionalities. It supports key features like Client/ Server Mode for IP Network Connectivity, TLS for TCP Connection, Self-Healing, etc. Though the application developer is free to use the Harmony NetPres or TCP/ IP Stack APIs directly to manage the TCP/ IP Networking functionalities, the use of NET system service eases the work of the developer by reducing the state machine that the application needs to maintain while also reducing the amount of bookkeeping that otherwise is needed. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/net/docs/developer.html#overview",
    "relUrl": "/system/net/docs/developer.html#overview"
  },"25": {
    "doc": "Net System Service Developer's Guide",
    "title": "Detailed Design",
    "content": "NET system service is a background service that runs in the context of the application task. The idea of the NET system service is to reduce the code size for the application and simplifying the state machine that the application may need to maintain by abstracting out the complexity in the system service. The system service achieves this by maintaining a state machine of its own and any bookkeeping that may be needed. The NET system service supports two modes – CLIENT, and SERVER for both the transport protocols – TCP and UDP. Also, the service supports secured connections for TCP. The NET system service also supports Self-Healing, or ‘Auto-Reconnect’. In case there is an interruption in the connection due to the underlying lower layer or when the peer disconnects, the service tries to reconnect again without making the application to bother about retriggering the connection. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/net/docs/developer.html#detailed-design",
    "relUrl": "/system/net/docs/developer.html#detailed-design"
  },"26": {
    "doc": "Net System Service Developer's Guide",
    "title": "State Machine",
    "content": "The various states of the NET system service are of the enum type SYS_NET_STATUS. The Client and Server have a separate state machine. The application is expected to call SYS_NET_Task() periodically from its own task context. This function ensures that the NET system service state machine receives sufficient execution cycles to process pending packets in the network stack. Client State Machine . The NET system service runs a finite state machine with the following states in the ‘CLIENT’ mode: . | SYS_NET_STATUS_IDLE: Initial State of the NET system service, at the initialization. | SYS_NET_STATUS_LOWER_LAYER_DOWN: . | State the NET system service enters after initialization. | In this state, the NET system service checks for the operational status of the lower layer – Wi-Fi or Ethernet. If the link is down, the service remains in this state. | Since this state monitors the link state, it offloads the application’s burden to poll the link before communicating over the network. | . | SYS_NET_STATUS_RESOLVING_DNS: In this state, the service tries to resolve the server DNS to connect to it. | SYS_NET_STATUS_DNS_RESOLVED: In this state, the service has resolved the DNS and opens a socket to connect to the server. | SYS_NET_STATUS_CLIENT_CONNECTING: In this state, the service has resolved the DNS and opens a socket to connect to the server. | SYS_NET_STATUS_WAIT_FOR_SNTP: . | Valid for Secured TCP Connection only. | Service waits for the system to connect to the NTP server and get the time snapshot. This is required to validate the peer certificate. | . | SYS_NET_STATUS_TLS_NEGOTIATING: . | Valid for secured TCP connection only. | TLS negotiation is in progress. | . | SYS_NET_STATUS_TLS_NEGOTIATION_FAILED: . | Valid for secured TCP connection only. | TLS Negotiation failed. Failure conveyed to the application via the callback registered with the service. | . | SYS_NET_STATUS_CONNECTED: Client connected to the server; Connection status is conveyed to the application via the callback registered with the service. In this state, the service is waiting to receive data from the peer. | SYS_NET_STATUS_SOCK_OPEN_FAILED: Opening the Socket failed. Failure is conveyed to the application via the registered callback. | SYS_NET_STATUS_DNS_RESOLVE_FAILED: DNS for the server is not resolved because the DNS server is unavailable or due to misconfiguration w.r.t. server name. Failure is conveyed to the application via the registered callback. | SYS_NET_STATUS_DISCONNECTED: Client disconnected from the server. ‘Disconnection’ is conveyed to the application via the registered callback. If the application has enabled ‘Auto-Reconnect,’ the service shall switch to SYS_NET_STATUS_LOWER_LAYER_DOWN state and re-try to connect to the server. | SYS_NET_STATUS_PEER_SENT_FIN: . | Valid for TCP Connection only . | The client received SYN FIN from the peer, which is conveyed to the application via the registered callback. | . | SYS_NET_STATUS_CONNECTED_LL_DOWN: Lower layer went down while the client is connected to the server. This is conveyed to the application, but the service shall not take any action on this. The service expects the TCP/ IP Stack to take action as per the protocol standards. Since the application will be informed about this state, it is free to call NET system server API to disconnect the connection with the peer. | . The above state machine has been implemented in the function SYS_NET_Client_Task() . Server State Machine . The NET system service runs a finite state machine with the following states valid in ‘SERVER’ mode: . | SYS_NET_STATUS_IDLE: Initial State of the NET system service, at the initialization. | SYS_NET_STATUS_LOWER_LAYER_DOWN: . | State the NET system service enters after initialization. | In this state, the NET system service checks for the operational status of the lower layer – Wi-Fi or Ethernet. If the link is down, the service remains in this state. | The service shall open the socket if the lower layer link is Up. | . | SYS_NET_STATUS_SERVER_AWAITING_CONNECTION: Service waits for a connection from a client . | SYS_NET_STATUS_WAIT_FOR_SNTP: . | Valid for Secured TCP Connection only. | Service waits for the system to connect to the NTP server and get the time snapshot required to validate the peer certificate. | . | SYS_NET_STATUS_TLS_NEGOTIATING: . | Valid for Secured TCP Connection only. | TLS negotiation is in progress. | . | SYS_NET_STATUS_TLS_NEGOTIATION_FAILED: . | Valid for secured TCP connection only. | TLS negotiation failed. Failure is conveyed to the application via the callback registered with the service. | . | SYS_NET_STATUS_CONNECTED: Client connected to the server; Connection Status is conveyed to the application via the callback registered with the service. In this state, the service is waiting for data from the peer. | SYS_NET_STATUS_SOCK_OPEN_FAILED: Opening the Socket failed. Failure conveyed to the application via the registered callback. | SYS_NET_STATUS_DISCONNECTED: Client disconnected from the server. ‘Disconnection’ is conveyed to the application via the registered callback. If the application has enabled ‘Auto-Reconnect’, the service shall open the socket again and switch to SYS_NET_STATUS_SERVER_AWAITING_CONNECTION, waiting for the client to reconnect. | SYS_NET_STATUS_PEER_SENT_FIN: . | Valid for TCP connection only . | The client received SYN FIN from the peer, which is conveyed to the application via the registered callback. | . | SYS_NET_STATUS_CONNECTED_LL_DOWN: Lower Layer went down while the server is connected to the client. This is conveyed to the application, but the service shall not take any action on this. The service expects the TCP/ IP Stack to take action as per the protocol standards. Since the application will be informed about this state, it is free to call NET system server API to disconnect the connection with the peer. | . The above state machine has been implemented in the function SYS_NET_Server_Task() . In case the user wants to add or remove a state or modify the action to be done in an existing state (for instance, adding a timer for a time-bound result), one would need to modify the function SYS_NET_Server_Task() or and SYS_NET_Client_Task() along with the enum SYS_NET_STATUS. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/net/docs/developer.html#state-machine",
    "relUrl": "/system/net/docs/developer.html#state-machine"
  },"27": {
    "doc": "Net System Service Developer's Guide",
    "title": "Number of Sockets Supported",
    "content": "The number of sockets supported by NET system service currently is 2. The same can be increased by changing the value of the macro SYS_NET_MAX_NUM_OF_SOCKETS. One can also configure the number of sockets via the MHC. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/net/docs/developer.html#number-of-sockets-supported",
    "relUrl": "/system/net/docs/developer.html#number-of-sockets-supported"
  },"28": {
    "doc": "Net System Service Developer's Guide",
    "title": "External APIs",
    "content": "SYS_NET_Open () . Description: The API is used for opening the socket for either TCP or UDP in Client or Server Mode. The user needs to register a callback function via this API. The registered callback lets the user know the operational status change or when data is received on the socket. One of the advantages of this API is that the user can open a socket without bothering about the operational state of the underlying layers, and the service shall take care of all the complexity in such cases. SYS_NET_Close () . Description: This API is used for closing the socket connection with the peer. SYS_NET_SendMsg () . Description: This API is used for transmitting the data to the peer on this socket connection. SYS_NET_RecvMsg () . Description: This API is used for receiving data sent in by the peer on the socket connection. Self-Healing . Description: Self-Healing, or ‘Auto-Reconnect’ is a feature supported by NET system service where in case there is an interruption in the connection due to the underlying lower layer or when the peer disconnects, the service tries to reconnect again without making the application to bother about retriggering the connection . SYS_NET_Task () . Description: This API is used for smooth functioning of the state machine of the NET system service. The application needs to call this API periodically. Also, this API takes as parameter the handle returned when we open the socket via the SYS_NET_Open() call. So in case the user opens two sockets, he/ she will need to call SYS_NET_Task() perdiocially for each of the socket connections. SYS_NET_CtrlMsg () . Description: This API is used for Reconnecting or Disconnecting an existing connection. The user can scale this API for triggering other actions if the need be. One of the parameters this API takes is the enum SYS_NET_CTRL_MSG which the user can expand to add on new message type and add a new case in the switch condition of this API to trigger the new action. SYS_NET_Initialize()/ SYS_NET_Deinitialize() . Description: These functions are used for initializing/ deinitializing the data structures of the NET system service. The SYS_NET_Initialize() function is called from within the System Task. Users can modify these functions in case they want to take some additional actions during the initialization of the service. SYS_NET_SetConfigParam() . Description: The API is currently used for configuring the parameter – ‘auto_reconnect’ after the user has called SYS_NET_Open(). The user can modify this API to add other configuration parameters which he/ she may want to change. Please note that some of the configuration parameters will come into effect only after the socket reconnects. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/net/docs/developer.html#external-apis",
    "relUrl": "/system/net/docs/developer.html#external-apis"
  },"29": {
    "doc": "Net System Service Developer's Guide",
    "title": "CLI Commands",
    "content": "The details of the cli commands supported by NET system service can be found here. The CLI commands are implemented using the function SysNet_Command_Process(). The users can modify any of the commands – configuration or get as per their needs by modifying the above function. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/net/docs/developer.html#cli-commands",
    "relUrl": "/system/net/docs/developer.html#cli-commands"
  },"30": {
    "doc": "Net System Service Developer's Guide",
    "title": "Code location",
    "content": "The base code for the NET system service can be found in the wireless_system_pic32mzw1_wfi32e01\\system\\net . The same shall be copied to the following location after the code for the application is generated – my_application\\firmware\\src\\config\\pic32mz_w1_curiosity\\system\\net . The code has 2 files: . | Header file: sys_net.h . | Source file: src/sys_net.c . | . Since the above files could see modifications across releases, hence the users would need to take care of merging the changes they did in these files with the ones which were done in the new release by Microchip Team. For this the user needs to take care of this while generating the code via the MHC: . While generating the code the user should use the Merge Strategy as “USER_ALL”, and press “Generate”. In case there are changes done by user in any of the files, the MHC shall prompt the user about it: . The user can merge his changes with the the latest changes done in the services using the above window. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/net/docs/developer.html#code-location",
    "relUrl": "/system/net/docs/developer.html#code-location"
  },"31": {
    "doc": "Net System Service Developer's Guide",
    "title": "Reference",
    "content": "| S. No | Name | Link | . | 1 | NET system service Usage | https://microchip-mplab-harmony.github.io/wireless_system_pic32mzw1_wfi32e01/docs/system/net/docs/usage.html | . | 2 | NET system service Interface | https://microchip-mplab-harmony.github.io/wireless_system_pic32mzw1_wfi32e01/docs/system/net/docs/interface.html | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/net/docs/developer.html#reference",
    "relUrl": "/system/net/docs/developer.html#reference"
  },"32": {
    "doc": "Net System Service Developer's Guide",
    "title": "Net System Service Developer's Guide",
    "content": " ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/net/docs/developer.html",
    "relUrl": "/system/net/docs/developer.html"
  },"33": {
    "doc": "MQTT System Service Developer's Guide",
    "title": "MQTT System Service Developer’s Guide",
    "content": ". | Overview | Detailed Design . | State Machine . | MQTT Client State Machine | . | Number of Subscription Topics Supported | Timeperiod for ACK | External APIs . | SYS_MQTT_Connect () | SYS_MQTT_Disconnect () | SYS_MQTT_Publish () | SYS_MQTT_Subscribe () | SYS_MQTT_Unsubscribe () | Handling of the messages received for a Topic | Handling of KeepAlive messages after the MQTT connection is UP | SYS_MQTT_Task () | SYS_MQTT_Initialize ()/ SYS_MQTT_Deinitialize () | . | CLI Commands | Code location | . | Reference | . The purpose of this document is to explain the MQTT system service design to enable the developer to make changes in the service code as per his/ her requirements if the need be. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/developer.html#mqtt-system-service-developers-guide",
    "relUrl": "/system/mqtt/docs/developer.html#mqtt-system-service-developers-guide"
  },"34": {
    "doc": "MQTT System Service Developer's Guide",
    "title": "Overview",
    "content": "MQTT system service Library provides an application programming interface (API) to manage MQTT Protocol functionalities. The MQTT system service uses the third party software Paho APIs for achieving these functionalities. It supports key features like client mode for MQTT connectivity, TLS for MQTT connection, Self-Healing, etc. Though the application developer is free to use the third party software directly to manage the MQTT functionalities, the use of MQTT system service eases the work of the developer by reducing the state machine that the application needs to maintain while also reducing the amount of bookkeeping that otherwise is needed. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/developer.html#overview",
    "relUrl": "/system/mqtt/docs/developer.html#overview"
  },"35": {
    "doc": "MQTT System Service Developer's Guide",
    "title": "Detailed Design",
    "content": "MQTT system service is a background service that runs in the context of the application task. The idea of the MQTT system service is to reduce the code size for the application and simplifying the state machine that the application may need to maintain by abstracting out the complexity in the system service. The system service achieves this by maintaining a state machine of its own and any bookkeeping that may be needed. The MQTT system service supports only client mode. Also, the service supports secured connections for its MQTT connection with the server. The MQTT system service also supports Self-Healing, or ‘Auto-Reconnect’. In case there is an interruption in the connection due to the underlying lower layer or when the peer disconnects, the service tries to reconnect again without making the application to bother about retriggering the connection. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/developer.html#detailed-design",
    "relUrl": "/system/mqtt/docs/developer.html#detailed-design"
  },"36": {
    "doc": "MQTT System Service Developer's Guide",
    "title": "State Machine",
    "content": "The various states of the MQTT system service are of the enum type SYS_MQTT_STATUS. The application is expected to call SYS_MQTT_Task()periodically from its own task context. This function ensures that the MQTT system service state machine receives sufficient execution cycles to process pending packets in the network stack. MQTT Client State Machine . The MQTT system service runs a finite state machine with the following states: . | SYS_MQTT_STATUS_IDLE: Initial State of the MQTT system service, at the initialization. | SYS_MQTT_STATUS_LOWER_LAYER_DOWN: . | State the MQTT system service enters after initialization. | In this state, the MQTT system service opens the TCP socket using NET system service without bothering if the lower layer is UP or DOWN. This offloads the application’s burden to poll the link before communicating over the network. | . | SYS_MQTT_STATUS_SOCK_CLIENT_CONNECTING: In this state, the service opens a socket to connect to the MQTT server using NET system service, and waits for the connection to get established. | SYS_MQTT_STATUS_SOCK_CONNECTED: TCP connection between the client the MQTT server established; client triggers MQTT ‘Connect’ to the server via the Paho APIs. | SYS_MQTT_STATUS_SOCK_OPEN_FAILED: Opening the Socket failed. Failure is conveyed to the application via the callback registered with the service. | SYS_MQTT_STATUS_MQTT_CONNECTED: Client connected to the MQTT server; Connection status is conveyed to the application via the registered callback. In this state, the service is waiting to receive data on topic(s). | SYS_MQTT_STATUS_MQTT_DISCONNECTING: Client comes into this state whenever there is either of the following: . | A failure to connect to the server (tcp or mqtt connection), or . | Timeout occurs on not receiving expected response, or . | Failure in case of publishing a message or subscribing to a topic. In this state, the client reinitializes the data w.r.t subscriptions topics. | Paho API to connect to MQTT server failed. | . | SYS_MQTT_STATUS_MQTT_DISCONNECTED: Client disconnected from the server. ‘Disconnection’ is conveyed to the application via the registered callback. | SYS_MQTT_STATUS_WAIT_FOR_MQTT_CONACK: Client waits for the reply ‘CONACK’ from the MQTT server in response to his ‘CONNECT’ message, for SYS_MQTT_PERIOIDC_TIMEOUT seconds. | SYS_MQTT_STATUS_WAIT_FOR_MQTT_SUBACK: Client waits for the reply ‘SUBACK’ from the MQTT server in response to his ‘SUBSCRIBE’ message, for SYS_MQTT_PERIOIDC_TIMEOUT seconds. | SYS_MQTT_STATUS_WAIT_FOR_MQTT_PUBACK: Client waits for the reply ‘PUBACK’ from the MQTT server in response to his ‘PUBLISH’ message in case it was sent with Qos as 1 or 2, for SYS_MQTT_PERIOIDC_TIMEOUT seconds. | SYS_MQTT_STATUS_WAIT_FOR_MQTT_UNSUBACK: Client waits for the reply ‘UNSUBACK’ from the MQTT server in response to his ‘UNSUBSCRIBE’ message, for SYS_MQTT_PERIOIDC_TIMEOUT seconds. | . The above state machine has been implemented in the function SYS_MQTT_Paho_Task(). The statme machine figure has been broken into two, so as to make it simpler to understand, and hence both the above state machine figures should be seen in conjection. In case the user wants to add or remove a state or modify the action to be done in an existing state (for instance, adding a timer for a time-bound result), one would need to modify the function SYS_MQTT_Paho_Task() along with the enum SYS_MQTT_STATUS. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/developer.html#state-machine",
    "relUrl": "/system/mqtt/docs/developer.html#state-machine"
  },"37": {
    "doc": "MQTT System Service Developer's Guide",
    "title": "Number of Subscription Topics Supported",
    "content": "The number of subscription topics supported by MQTT system service currently is 2. *The same can be increased by changing the value of the macro *SYS_MQTT_SUB_MAX_TOPICS. **Also note, that the underlying third party software Paho supports 5 subscription topics, so if the developer needs to use more than 5 topics, he/ she will need to make changes in the Paho code (MAX_MESSAGE_HANDLERS) too. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/developer.html#number-of-subscription-topics-supported",
    "relUrl": "/system/mqtt/docs/developer.html#number-of-subscription-topics-supported"
  },"38": {
    "doc": "MQTT System Service Developer's Guide",
    "title": "Timeperiod for ACK",
    "content": "The number of seconds the MQTT system service will wait for the ACK to come – CONACK, or SUBACK, or PUBACK, or UNSUBACK is currently 5 seconds. The developer can increase or decrease this time by modifying the value of SYS_MQTT_PERIOIDC_TIMEOUT. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/developer.html#timeperiod-for-ack",
    "relUrl": "/system/mqtt/docs/developer.html#timeperiod-for-ack"
  },"39": {
    "doc": "MQTT System Service Developer's Guide",
    "title": "External APIs",
    "content": "SYS_MQTT_Connect () . Description: The API is used for connecting an MQTT client to the server. The user needs to register a callback function via this API. The registered callback lets the user know the operational status change or when data is received on the topic subscribed to. One of the advantages of this API is that the user can call this API without bothering about the operational state of the underlying layers, and the service shall take care of all the complexity in such cases. SYS_MQTT_Disconnect () . Description: The API is used for disconnecting the MQTT client from the server. SYS_MQTT_Publish () . Description: The API is used for publishing a message onto a topic. SYS_MQTT_Subscribe () . Description: The API is used for subscribing to a topic. SYS_MQTT_Unsubscribe () . Description: The API is used for unsubscribing from a topic. Handling of the messages received for a Topic . Handling of KeepAlive messages after the MQTT connection is UP . SYS_MQTT_Task () . Description: This API is used for smooth functioning of the state machine of the MQTT system service. The application needs to call this API periodically. Also, this API takes as parameter the handle returned when we connect to server via the SYS_MQTT_Connect() call. SYS_MQTT_Initialize ()/ SYS_MQTT_Deinitialize () . Description: These functions are used for initializing/ deinitializing the data structures of the MQTT system service. The SYS_MQTT_Initialize() function is called from within the System Task. Users can modify these functions in case they want to take some additional actions during the initialization of the service. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/developer.html#external-apis",
    "relUrl": "/system/mqtt/docs/developer.html#external-apis"
  },"40": {
    "doc": "MQTT System Service Developer's Guide",
    "title": "CLI Commands",
    "content": "The details of the cli commands supported by MQTT system service can be found here. The CLI commands are implemented using the function SysMqtt_Command_Process(). The users can modify any of the commands – configuration or get as per their needs by modifying the above function. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/developer.html#cli-commands",
    "relUrl": "/system/mqtt/docs/developer.html#cli-commands"
  },"41": {
    "doc": "MQTT System Service Developer's Guide",
    "title": "Code location",
    "content": "The base code for the MQTT system service can be found in the wireless_system_pic32mzw1_wfi32e01\\system\\mqtt . The same shall be copied to the following location after the code for the application is generated – my_application\\firmware\\src\\config\\pic32mz_w1_curiosity\\system\\mqtt . The code has 4 files: . | Header file: sys_mqtt.h and sys_paho_mqtt.h . | Source file: src/sys_mqtt.c and src/sys_paho_mqtt.c . | . Since the above files could see modifications across releases, hence the users would need to take care of merging the changes they did in these files with the ones which were done in the new release by Microchip Team. For this the user needs to take care of this while generating the code via the MHC: . While generating the code the user should use the Merge Strategy as “USER_ALL”, and press “Generate”. In case there are changes done by user in any of the files, the MHC shall prompt the user about it: . The user can merge his changes with the the latest changes done in the services using the above window. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/developer.html#code-location",
    "relUrl": "/system/mqtt/docs/developer.html#code-location"
  },"42": {
    "doc": "MQTT System Service Developer's Guide",
    "title": "Reference",
    "content": "| S. No | Name | Link | . | 1 | MQTT system service Usage | https://microchip-mplab-harmony.github.io/wireless_system_pic32mzw1_wfi32e01/docs/system/mqtt/docs/usage.html | . | 2 | MQTT system service Interface | https://microchip-mplab-harmony.github.io/wireless_system_pic32mzw1_wfi32e01/docs/system/mqtt/docs/interface.html | . | 3 | NET system service Interface | https://microchip-mplab-harmony.github.io/wireless_system_pic32mzw1_wfi32e01/docs/system/net/docs/interface.html | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/developer.html#reference",
    "relUrl": "/system/mqtt/docs/developer.html#reference"
  },"43": {
    "doc": "MQTT System Service Developer's Guide",
    "title": "MQTT System Service Developer's Guide",
    "content": " ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/developer.html",
    "relUrl": "/system/mqtt/docs/developer.html"
  },"44": {
    "doc": "Wi-Fi provisioning System Service developer guide",
    "title": "Wi-Fi provisioning System Service Developer’s Guide",
    "content": " ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/developer_guide.html#wi-fi-provisioning-system-service-developers-guide",
    "relUrl": "/system/wifiprov/docs/developer_guide.html#wi-fi-provisioning-system-service-developers-guide"
  },"45": {
    "doc": "Wi-Fi provisioning System Service developer guide",
    "title": "Code modification/implementation guide for common use cases",
    "content": "**Adding New provisioning Method ** . When User want to add new provisioning method, user needs to parse the incoming provisioning data and update the information in SYS_WIFI_CONFIG as shown in below code snippet. The Wi-Fi provisioning Service stores and maintains the Wi-Fi configuration data if NVM is enabled by user in the MHC. SYS_WIFI_CONFIG wifiSrvcConfig; // Set mode as STA wifiSrvcConfig.mode = SYS_WIFI_STA; // Enable saving wifi configuration wifiSrvcConfig.saveConfig = true; // Set the auth type to SYS_WIFI_WPA2 wifiSrvcConfig.staConfig.authType = SYS_WIFI_WPA2; // Enable all the channels(0) wifiSrvcConfig.staConfig.channel = 0; // Device doesn't wait for user request wifiSrvcConfig.staConfig.autoConnect = 1; // Set SSID memcpy(wifiSrvcConfig.staConfig.ssid, WIFI_DEV_SSID, sizeof(WIFI_DEV_SSID)); // Set PSK memcpy(wifiSrvcConfig.staConfig.psk, WIFI_DEV_PSK, sizeof(WIFI_DEV_PSK)); if (SYS_WIFI_SUCCESS == SYS_WIFI_CtrlMsg (sysObj.syswifi, SYS_WIFI_CONNECT, &amp;wifiSrvcConfig, sizeof(SYS_WIFI_CONFIG))) { } . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/developer_guide.html#code-modificationimplementation-guide-for-common-use-cases",
    "relUrl": "/system/wifiprov/docs/developer_guide.html#code-modificationimplementation-guide-for-common-use-cases"
  },"46": {
    "doc": "Wi-Fi provisioning System Service developer guide",
    "title": "Wi-Fi provisioning System Service developer guide",
    "content": " ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/developer_guide.html",
    "relUrl": "/system/wifiprov/docs/developer_guide.html"
  },"47": {
    "doc": "OTA System Developer's guide",
    "title": "OTA System Service Developer’s Guide",
    "content": " ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/developer_guide.html#ota-system-service-developers-guide",
    "relUrl": "/system/ota/docs/developer_guide.html#ota-system-service-developers-guide"
  },"48": {
    "doc": "OTA System Developer's guide",
    "title": "OTA Service Architecture Overview",
    "content": "Over the Air (OTA) firmware upgrade feature is designed with a two step process, Image Downloading and Image Programming process. | Image Downloading is processed by the OTA service that is integrated with your application code. | Image Programming is processed by the OTA bootloader. | . For detailed information about OTA service architecture, please refer to the Architecture Overview section in Using the library of the OTA documentation. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/developer_guide.html#ota-service-architecture-overview",
    "relUrl": "/system/ota/docs/developer_guide.html#ota-service-architecture-overview"
  },"49": {
    "doc": "OTA System Developer's guide",
    "title": "Code modification/implementation guide for common use cases",
    "content": "Registering a user defined callback for OTA system service . Developer may register a callback function to receive callback from the OTA system service for pre-defined scenarios. For registering callback developer may follow any one of below mentioned methods. a. Using the built-in function ota_app_reg_cb() wrapper, defined in app_ota.c . Please see the code snippet below for reference: . /* Check the application's current state. */ switch ( appData.state ) { /* Application's initial state. */ case APP_STATE_INIT: { if(true == ota_app_reg_cb()) appData.state = APP_STATE_SERVICE_TASKS; appData.state = APP_STATE_SERVICE_TASKS; break; } case APP_STATE_SERVICE_TASKS: { break; } /* TODO: implement your application state machine.*/ default: { /* TODO: Handle error in application's state machine. */ break; } } . The template of a callback handler function, sys_ota_cb() is implemented in app_ota.c with all the potential events from the OTA system service. Developer can modify this template to build their own custom logic as per system/application requirements. void sys_ota_cb(uint32_t event, void * data, void *cookie) { switch (event) { case SYS_OTA_UPDATE_CHECK_START: { /*OTA update check start . Customer can build their own custom logic */ SYS_CONSOLE_PRINT(\"SYS_OTA_UPDATE_CHECK_START\\r\\n\"); break; } case SYS_OTA_UPDATE_CHECK_FAILED: { /*OTA update check failed . Customer can build their own custom logic */ SYS_CONSOLE_PRINT(\"SYS_OTA_UPDATE_CHECK_FAILED\\r\\n\"); break; } case SYS_OTA_UPDATE_AVAILABLE: { /*OTA update available . Customer can build their own custom logic */ SYS_CONSOLE_PRINT(\"SYS_OTA_UPDATE_AVAILABLE\\r\\n\"); break; } case SYS_OTA_UPDATE_NOTAVAILABLE: { /*OTA update not available. Customer can build their own custom logic*/ SYS_CONSOLE_PRINT(\"SYS_OTA_UPDATE_NOTAVAILABLE\\r\\n\"); break; } case SYS_OTA_TRIGGER_OTA_FAILED: { /*OTA trigger failed . Customer can build their own custom logic*/ SYS_CONSOLE_PRINT(\"SYS_OTA_TRIGGER_OTA_FAILED\\r\\n\"); break; } case SYS_OTA_FACTORY_RESET_SUCCESS: { /*OTA Factory reset success . Customer can build their own custom logic*/ SYS_CONSOLE_PRINT(\"SYS_OTA_FACTORY_RESET_SUCCESS\\r\\n\"); break; } case SYS_OTA_FACTORY_RESET_FAILED: { /*OTA Factory reset failed . Customer can build their own custom logic*/ SYS_CONSOLE_PRINT(\"SYS_OTA_FACTORY_RESET_FAILED\\r\\n\"); break; } case SYS_OTA_ROLLBACK_SUCCESS: { /*OTA rollback success . Customer can build their own custom logic*/ SYS_CONSOLE_PRINT(\"SYS_OTA_ROLLBACK_SUCCESS\\r\\n\"); break; } case SYS_OTA_ROLLBACK_FAILED: { /*OTA rollback failed . Customer can build their own custom logic*/ SYS_CONSOLE_PRINT(\"SYS_OTA_ROLLBACK_FAILED\\r\\n\"); break; } case SYS_OTA_DOWNLOAD_START: { /*OTA image download start . Customer can build their own custom logic*/ SYS_CONSOLE_PRINT(\"SYS_OTA_DOWNLOAD_START\\r\\n\"); break; } case SYS_OTA_DOWNLOAD_SUCCESS: { /*OTA image download success . Customer can build their own custom logic*/ SYS_CONSOLE_PRINT(\"SYS_OTA_DOWNLOAD_SUCCESS\\r\\n\"); break; } case SYS_OTA_DOWNLOAD_FAILED: { /*OTA image download failed . Customer can build their own custom logic*/ SYS_CONSOLE_PRINT(\"SYS_OTA_DOWNLOAD_FAILED\\r\\n\"); break; } case SYS_OTA_IMAGE_DIGEST_VERIFY_START: { /*OTA image digest verify start . Customer can build their own custom logic*/ SYS_CONSOLE_PRINT(\"SYS_OTA_IMAGE_DIGEST_VERIFY_START\\r\\n\"); break; } case SYS_OTA_IMAGE_DIGEST_VERIFY_SUCCESS: { /*OTA image digest verify success . Customer can build their own custom logic*/ SYS_CONSOLE_PRINT(\"SYS_OTA_IMAGE_DIGEST_VERIFY_SUCCESS\\r\\n\"); break; } case SYS_OTA_IMAGE_DIGEST_VERIFY_FAILED: { /*OTA image digest verify failed . Customer can build their own custom logic*/ SYS_CONSOLE_PRINT(\"SYS_OTA_IMAGE_VERIFICATION_FAILED\\r\\n\"); break; } case SYS_OTA_DB_ENTRY_SUCCESS: { /*OTA database entry successful . Customer can build their own custom logic*/ /*For Manual reset, user must trigger system reset, after system reach this state only*/ /*Do not use API call from here. Use variables to get the status*/ SYS_CONSOLE_PRINT(\"SYS_OTA_DB_ENTRY_SUCCESS\\r\\n\"); ota_complete = true; break; } case SYS_OTA_IMAGE_ERASE_FAILED: { /*OTA image erase failed . Customer can build their own custom logic*/ SYS_CONSOLE_PRINT(\"SYS_OTA_IMAGE_ERASE_FAILED\\r\\n\"); break; } case SYS_OTA_IMAGE_ERASED: { /*OTA image erase success . Customer can build their own custom logic*/ SYS_CONSOLE_PRINT(\"SYS_OTA_IMAGE_ERASED\\r\\n\"); break; } case SYS_OTA_IMAGE_DATABASE_FULL: { /*OTA image database full . Customer can build their own custom logic*/ SYS_CONSOLE_PRINT(\"SYS_OTA_IMAGE_DATABASE_FULL\\r\\n\"); break; } default: { /*unknown state*/ break; } } . b. Alternately developers may use SYS_OTA_CtrlMsg() API to register their own callback function. Please follow below code snippet for reference : . if (SYS_OTA_SUCCESS == SYS_OTA_CtrlMsg(SYS_OTA_REGCALLBACK, sys_ota_cb, sizeof (uint8_t *))) { /*Callback register request success*/ } else { /*Callback register request fail*/ } . Check for updates on a custom trigger trigger : . Your system design may have requirements to check, update image availability, in OTA server only during specific particular conditions (e.g : Switch pressed or when a MQTT message received on a specific topic). System should then initiate an OTA check in the image server. Under such condition to initiate update check on user trigger , user may follow below steps: . | Disable Periodic OTA check option, in MHC configuration. | Generate code. | Modify application code to initiate update check using control API SYS_OTA_CtrlMsg(uint32_t event, void *buffer, uint32_t length) , when trigger condition is fulfilled (e.g. when a switch is pressed ). if(SWITCH1_Get() == SWITCH1_STATE_PRESSED ) { SYS_OTA_CtrlMsg(SYS_OTA_UPDATECHCK,NULL,NULL); } . | . Initiate OTA on user trigger : . System design may have requirements to trigger an OTA update only once a condition only is met. (e.g : Switch pressed or when a MQTT message received from MQTT server). Under such condition to trigger OTA manually, user may follow below steps: . | Disable Auto OTA update and Periodic OTA check options, in MHC configuration. | Generate code. | Developer should provide server URL, OTA image version number present in OTA server and digest of OTA image using API SYS_OTA_SET_PARAMETERS(char *url, uint8_t version, char *digest) . | The parameters should be sent to the device out of band. E.g: The payload of an MQTT message. | It would be user responsibility to provide correct image version number, as OTA service will not be doing any verion check of ota image. It will simply download the image from user defined server and store the parameter details as provided into OTA database. | . | Modify application code to trigger OTA using control API SYS_OTA_CtrlMsg(uint32_t event, void *buffer, uint32_t length) , when trigger condition is fulfilled (e.g. when a switch is pressed ). /* Check the application's current state. */ switch ( appData.state ) { /* Application's initial state. */ case APP_STATE_INIT: { if(ota_app_reg_cb() == true) { uint8_t version = 2; char *digest = \"ef90bf8bf7fd96205c3240c31e1a378430e7a8f053a300e5c91ebe64fefea197\"; SYS_OTA_SET_PARAMETERS(\"http://192.168.43.173:8000/wifi_ota_demo.bin\", version , digest); appData.state = APP_STATE_SERVICE_TASKS; } break; } case APP_STATE_SERVICE_TASKS: { if((SWITCH1_Get() == SWITCH1_STATE_PRESSED) &amp;&amp; (ota_initiated == false)) { ota_initiated = true; if(SYS_OTA_SUCCESS == SYS_OTA_CtrlMsg(SYS_OTA_INITIATE_OTA,NULL,NULL)) appData.state = APP_STATE_OTA_INITIATE_SUCCESS; else ota_initiated = false; } break; } case APP_STATE_OTA_INITIATE_SUCCESS: { break; } /* TODO: implement your application state machine.*/ default: { /* TODO: Handle error in application's state machine. */ break; } } . | . Initiate Factory Reset on user trigger : . Factory Reset is a functionality using which user may get the system back to its original state, meaning, the Factory image will be programmed to internal flash (Program memory) and all other OTA images will be erased from external flash storage along with OTA database if it exist. User may initiate Factory reset using the SYS_OTA_TRIGGER_FACTORY_RESET control message as shown in the code snippet below. if(SWITCH1_Get() == SWITCH1_STATE_PRESSED ) { SYS_OTA_CtrlMsg(SYS_OTA_TRIGGER_FACTORY_RESET,NULL,NULL); } . How to trigger system reset (from application) on successful OTA completion, with Autoreset option disabled in MHC : . Developer may choose to disable Autoreset option in MHC and may have requirement to build custom logic for application, deciding when to go for system reset after successful OTA download. This will enable the system/application to complete important tasks before triggering a system reset. Developer may easily develop such custom logic using SYS_OTA_CtrlMsg() API for system reset. Please follow below code snippet for reference : . if (SYS_OTA_SUCCESS == SYS_OTA_CtrlMsg(SYS_OTA_TRIGGER_SYSTEM_RESET, NULL, NULL)) { /*System reset request success.*/ } else { /*System reset request fail*/ } . Please note that SYS_OTA_CtrlMsg() will return SYS_OTA_SUCCESS, if the request is successful. System will reset only if OTA download has completed successfully. User can check for SYS_OTA_DB_ENTRY_SUCCESS system callback state, to trigger manual reset. How to limit periodic OTA check for a definite number of times : . Developer may have requirement to limit periodic OTA check to a definite number of times. For example, OTA service should go to idle state until next reset after checking update availability for 3 times consecutively. For this, developer may add below lines of code in sys_ota.c file: . if(update_check_counter++ &gt;= 3) // `update_check_counter` is an extern variable, defined by developer { SYS_CONSOLE_PRINT(\"Update availability check completed for 3 times, no update found\\n\\r\"); sys_otaData.state = SYS_OTA_IDLE; break; } . What will happen if an image is downloaded successfully but image digest verify fails : . With default logic, the downloaded image will be erased if digest verify fails. OTA system service will disable auto update check, provide user callback and go to IDLE mode. How developer can trigger periodic update check , when a user defined condition is satisfied (e.g. : switch pressed) : . Developer may have the requirement to trigger periodic update check, only when a user defined condition is satisfied . Let us assume a scenario , in which application should trigger periodic update check, when user press a switch. To develop this particular requirement user may follow below steps : . | Disable Periodic OTA Check option in MHC. | Generate code using MHC. | Add below lines of code at the beginning of case SYS_OTA_SERVER_UPDATE_CHECK in sys_ota.c file. g_SysOtaConfig.ota_periodic_check = true; sys_otaData.state = SYS_OTA_AUTO_CONFIGURATION_CHECK; break; . | Write custom logic in application file “app.c”. if((SWITCH1_Get() == SWITCH1_STATE_PRESSED) &amp;&amp; (ota_initiated == false)) { ota_initiated = true; if(SYS_OTA_SUCCESS == SYS_OTA_CtrlMsg(SYS_OTA_UPDATECHCK,NULL,0)) appData.state = APP_STATE_OTA_INITIATE_SUCCESS; else ota_initiated = false; } . | . ### How to get download status during OTA update : . Application Developer may want to get the download status during OTA update, for certain application logic development. They may easily extract download status using below lines of code : . { OTA_GetDownloadStatus(&amp;ota_params);//ota_params should be defined as : OTA_PARAMS ota_params; SYS_CONSOLE_PRINT(\"*******************************************\\n\\r\"); SYS_CONSOLE_PRINT(\"Total data to download : %d bytes\\n\\r\", ota_params.server_image_length); SYS_CONSOLE_PRINT(\"Data downloaded : %d bytes \\r\\n\", ota_params.total_data_downloaded); SYS_CONSOLE_PRINT(\"*******************************************\\n\\r\"); } . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/developer_guide.html#code-modificationimplementation-guide-for-common-use-cases",
    "relUrl": "/system/ota/docs/developer_guide.html#code-modificationimplementation-guide-for-common-use-cases"
  },"50": {
    "doc": "OTA System Developer's guide",
    "title": "OTA System Developer's guide",
    "content": " ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/developer_guide.html",
    "relUrl": "/system/ota/docs/developer_guide.html"
  },"51": {
    "doc": "Wi-Fi System Service developer guide",
    "title": "Wi-Fi System Service Developer’s Guide",
    "content": " ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifi/docs/developer_guide.html#wi-fi-system-service-developers-guide",
    "relUrl": "/system/wifi/docs/developer_guide.html#wi-fi-system-service-developers-guide"
  },"52": {
    "doc": "Wi-Fi System Service developer guide",
    "title": "Code modification/implementation guide for common use cases",
    "content": "Wi-Fi System Service Auto Connect . When user enables the auto connect features using Wi-Fi service system MHC menu, the default auto connect retry count is configured to 5. User can modify the macro MAX_AUTO_CONNECT_RETRY in generated file sys_wifi.c as per their choice. PIC32MZW1 device stops the connection request to AP after retry count reaches to zero and successful connections with AP is not established. /* Wi-Fi STA Mode, maximum auto connect retry */ #define MAX_AUTO_CONNECT_RETRY 5 . Wi-Fi System Service Scan Example . Wi-Fi System Service support scan functinality both in STA and AP mode. In case, user want to overwrite MHC configuration of the scan parameter,please find the below snippet code that need to be added in the application. #include \"wdrv_pic32mzw_bssfind.h\" APP_DATA appData; SYS_WIFI_SCAN_CONFIG scanConfig; /* Wi-Fi driver triggers a callback to update each Scan result one-by-one*/ bool APP_ScanHandler (DRV_HANDLE handle, uint8_t index, uint8_t ofTotal, WDRV_PIC32MZW_BSS_INFO *pBSSInfo) { if (0 == ofTotal) { SYS_CONSOLE_MESSAGE(\"No AP Found... Rescan\\r\\n\"); } else { if (index == 1) { SYS_CONSOLE_PRINT(\"Scan Results: #%02d\\r\\n\", ofTotal); } SYS_CONSOLE_PRINT(\"[%02d] %s\\r\\n\", index, pBSSInfo-&gt;ctx.ssid.name); } // return true to receive further results; otherwise return false if desired return true; } void APP_Initialize(void) { appData.state = APP_STATE_INIT; } void APP_Tasks(void) { SYS_WIFI_RESULT res; SYS_WIFI_STATUS wifiStatus; switch (appData.state) { case APP_STATE_INIT: { appData.state = APP_STATE_TRIGGER_SCAN; break; } case APP_STATE_TRIGGER_SCAN: { wifiStatus = SYS_WIFI_GetStatus (sysObj.syswifi); if (wifiStatus &gt; SYS_WIFI_STATUS_WDRV_OPEN_REQ) { memset(&amp;scanConfig, 0, sizeof(scanConfig)); res = SYS_WIFI_CtrlMsg(sysObj.syswifi, SYS_WIFI_GETSCANCONFIG, &amp;scanConfig, sizeof(SYS_WIFI_SCAN_CONFIG)); if(SYS_WIFI_SUCCESS == res) { //Received the wifiSrvcScanConfig data char myAPlist[] = \"\"; // e.g. \"myAP*OPENAP*Hello World!\" char delimiter = '*'; scanConfig.channel = 0; scanConfig.mode = SYS_WIFI_SCAN_MODE_ACTIVE; scanConfig.pSsidList = myAPlist; scanConfig.delimChar = delimiter; scanConfig.pNotifyCallback = (void *)APP_ScanHandler; scanConfig.matchMode = WDRV_PIC32MZW_SCAN_MATCH_MODE_FIND_ALL; SYS_CONSOLE_PRINT(\"\\r\\nStarting Custom Scan ...\\r\\n\"); res = SYS_WIFI_CtrlMsg(sysObj.syswifi,SYS_WIFI_SCANREQ,&amp;scanConfig,sizeof(SYS_WIFI_SCAN_CONFIG)); if(SYS_WIFI_SUCCESS != res) { SYS_CONSOLE_PRINT(\"Error Starting scan: %d\\r\\n\", res); appData.state = APP_STATE_ERROR; break; } appData.state = APP_STATE_DONE; } else { SYS_CONSOLE_PRINT(\"Error retrieving scan config: %d\\r\\n\", res); appData.state = APP_STATE_ERROR; } } break; } case APP_STATE_DONE: { // wait for custom scan to complete and do nothing later break; } case APP_STATE_ERROR: { break; } default: { break; } } } . User can initiate the Scan request with default Wi-Fi System service MHC menu configuration with below code snippet. SYS_WIFI_CtrlMsg(sysObj.syswifi, SYS_WIFI_SCANREQ, NULL, 0); . How to Disconnect Connected STA in AP Mode Using Wi-Fi System Service . Please see the code snippet below for reference. #include \"app.h\" #include \"definitions.h\" APP_DATA appData; static SYS_WIFI_CONFIG wificonfig; void WiFiServCallback(uint32_t event, void * data, void *cookie) { IPV4_ADDR *IPAddr; switch (event) { case SYS_WIFI_CONNECT: { IPAddr = (IPV4_ADDR *) data; if (SYS_WIFI_STA == wificonfig.mode) { SYS_CONSOLE_PRINT(\"Connected to AP. Got IP address = %d.%d.%d.%d \\r\\n\", IPAddr-&gt;v[0], IPAddr-&gt;v[1], IPAddr-&gt;v[2], IPAddr-&gt;v[3]); } else { SYS_WIFI_STA_APP_INFO *psStaConnInfo = (SYS_WIFI_STA_APP_INFO *)data; SYS_CONSOLE_PRINT(\"STA Connected to AP. Got IP address = %d.%d.%d.%d \\r\\n\", psStaConnInfo-&gt;ipAddr.v[0], psStaConnInfo-&gt;ipAddr.v[1], psStaConnInfo-&gt;ipAddr.v[2], psStaConnInfo-&gt;ipAddr.v[3]); SYS_CONSOLE_PRINT(\"STA Connected to AP. Got MAC address = %x:%x:%x:%x:%x:%x \\r\\n\", psStaConnInfo-&gt;macAddr[0], psStaConnInfo-&gt;macAddr[1], psStaConnInfo-&gt;macAddr[2], psStaConnInfo-&gt;macAddr[3], psStaConnInfo-&gt;macAddr[4], psStaConnInfo-&gt;macAddr[5]); SYS_WIFI_CtrlMsg(sysObj.syswifi, SYS_WIFI_DISCONNECT, psStaConnInfo-&gt;macAddr, 6); } break; } case SYS_WIFI_DISCONNECT: { SYS_CONSOLE_PRINT(\"Device DISCONNECTED \\r\\n\"); break; } case SYS_WIFI_PROVCONFIG: { memcpy(&amp;wificonfig,data,sizeof(SYS_WIFI_CONFIG)); SYS_CONSOLE_PRINT(\"%s:%d Received Provisioning Data : \\r\\n Device mode=%s \\r\\n\", __func__, __LINE__, (wificonfig.mode == SYS_WIFI_STA) ? \"STA\" : \"AP\"); if (SYS_WIFI_STA == wificonfig.mode) { SYS_CONSOLE_PRINT(\" ssid=%s password=%s \\r\\n\",wificonfig.staConfig.ssid,wificonfig.staConfig.psk); } else if (SYS_WIFI_AP == wificonfig.mode) { SYS_CONSOLE_PRINT(\" ssid=%s password=%s \\r\\n\",wificonfig.apConfig.ssid,wificonfig.apConfig.psk); } break; } } } void APP_Initialize(void) { appData.state = APP_STATE_INIT; } void APP_Tasks(void) { switch (appData.state) { case APP_STATE_INIT: { SYS_CONSOLE_PRINT(\"Application: wifi_easy_config \\r\\n\"); SYS_WIFI_CtrlMsg(sysObj.syswifi, SYS_WIFI_REGCALLBACK, WiFiServCallback, sizeof (uint8_t *)); appData.state = APP_STATE_GETCONFIG; break; } case APP_STATE_GETCONFIG: { if(SYS_WIFI_SUCCESS == SYS_WIFI_CtrlMsg(sysObj.syswifi, SYS_WIFI_GETWIFICONFIG, &amp;wificonfig, sizeof(SYS_WIFI_CONFIG))) { SYS_CONSOLE_PRINT(\"%s:%d Device mode=%s \\r\\n\", __func__, __LINE__, (wificonfig.mode == SYS_WIFI_STA) ? \"STA\" : \"AP\"); appData.state = APP_STATE_SERVICE_TASKS; } break; } case APP_STATE_SERVICE_TASKS: { break; } default: { break; } } } . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifi/docs/developer_guide.html#code-modificationimplementation-guide-for-common-use-cases",
    "relUrl": "/system/wifi/docs/developer_guide.html#code-modificationimplementation-guide-for-common-use-cases"
  },"53": {
    "doc": "Wi-Fi System Service developer guide",
    "title": "Wi-Fi System Service developer guide",
    "content": " ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifi/docs/developer_guide.html",
    "relUrl": "/system/wifi/docs/developer_guide.html"
  },"54": {
    "doc": "MQTT System Service Interface",
    "title": "MQTT System Service Interface",
    "content": ". | Data Types and Constants Summary | Initialization functions Summary | Status functions Summary | Setup functions Summary | Data Exchange functions Summary | Data Types and Constants . | SYS_MQTT_INTF_WIFI | SYS_MQTT_INTF_ETHERNET | SYS_MQTT_STATUS | SYS_MQTT_RESULT | SYS_MQTT_BrokerConfig | SYS_MQTT_SubscribeConfig | SYS_MQTT_PublishConfig | SYS_MQTT_PublishTopicCfg | SYS_MQTT_EVENT_TYPE | SYS_MQTT_Config | . | Initialization functions . | SYS_MQTT_Initialize | SYS_MQTT_Deinitialize | . | Status functions . | SYS_MQTT_GetStatus | . | Setup functions . | SYS_MQTT_Connect | SYS_MQTT_Disconnect | SYS_MQTT_Task | SYS_MQTT_Subscribe | SYS_MQTT_Unsubscribe | . | Data Exchange functions . | SYS_MQTT_Publish | SYS_MQTT_CALLBACK | . | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/interface.html",
    "relUrl": "/system/mqtt/docs/interface.html"
  },"55": {
    "doc": "MQTT System Service Interface",
    "title": "Data Types and Constants Summary",
    "content": "| Name | Description | . | SYS_MQTT_INTF_WIFI | Mqtt Socket Intf - Wifi | . | SYS_MQTT_INTF_ETHERNET | Mqtt Socket Intf - Ethernet | . | SYS_MQTT_STATUS | Identifies the current status of the Sys Mqtt Instance. | . | SYS_MQTT_RESULT | Identifies the return values for the Sys Mqtt APIs. | . | SYS_MQTT_BrokerConfig | Used for passing on the configuration related to the MQTT Broker | . | SYS_MQTT_SubscribeConfig | Used for passing on the configuration related to the MQTT Subtopics the user | . | SYS_MQTT_PublishConfig | Used for Reading the message that has been received on a topic subscribed to. | . | SYS_MQTT_PublishTopicCfg | Used for publishing a message on a topic. It contains the config related to the Topic | . | SYS_MQTT_EVENT_TYPE | Event Message Type which comes with the Callback SYS_MQTT_CALLBACK() | . | SYS_MQTT_Config | Used for passing on the configuration related to the either MQTT Broker, | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/interface.html#data-types-and-constants-summary",
    "relUrl": "/system/mqtt/docs/interface.html#data-types-and-constants-summary"
  },"56": {
    "doc": "MQTT System Service Interface",
    "title": "Initialization functions Summary",
    "content": "| Name | Description | . | SYS_MQTT_Initialize | Returns success/ failure for initialization of data structures of the MQTT service | . | SYS_MQTT_Deinitialize | Deinitialization of data structures of the MQTT service | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/interface.html#initialization-functions-summary",
    "relUrl": "/system/mqtt/docs/interface.html#initialization-functions-summary"
  },"57": {
    "doc": "MQTT System Service Interface",
    "title": "Status functions Summary",
    "content": "| Name | Description | . | SYS_MQTT_GetStatus | Returns System MQTT instance status. | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/interface.html#status-functions-summary",
    "relUrl": "/system/mqtt/docs/interface.html#status-functions-summary"
  },"58": {
    "doc": "MQTT System Service Interface",
    "title": "Setup functions Summary",
    "content": "| Name | Description | . | SYS_MQTT_Connect | Connects to the configured MQTT Broker. | . | SYS_MQTT_Disconnect | Disconnects from the MQTT Server | . | SYS_MQTT_Task | Executes the MQTT Service State Machine | . | SYS_MQTT_Subscribe | Returns success/ failure for the subscribing to a Topic by the user. | . | SYS_MQTT_Unsubscribe | Returns success/ failure for the unsubscribing to a Topic by the user. | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/interface.html#setup-functions-summary",
    "relUrl": "/system/mqtt/docs/interface.html#setup-functions-summary"
  },"59": {
    "doc": "MQTT System Service Interface",
    "title": "Data Exchange functions Summary",
    "content": "| Name | Description | . | SYS_MQTT_Publish | Returns success/ failure for the publishing of message asked by the user. | . | SYS_MQTT_CALLBACK | Pointer to a MQTT system service callback function. | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/interface.html#data-exchange-functions-summary",
    "relUrl": "/system/mqtt/docs/interface.html#data-exchange-functions-summary"
  },"60": {
    "doc": "MQTT System Service Interface",
    "title": "Data Types and Constants",
    "content": "SYS_MQTT_INTF_WIFI . Summary . Mqtt Socket Intf - Wifi . Remarks . None. #define SYS_MQTT_INTF_WIFI SYS_NET_INTF_WIFI // Wifi Intf Value . SYS_MQTT_INTF_ETHERNET . Summary . Mqtt Socket Intf - Ethernet . Remarks . None. #define SYS_MQTT_INTF_ETHERNET SYS_NET_INTF_ETHERNET // Ethernet Intf Value . SYS_MQTT_STATUS . Summary . Identifies the current status of the Sys Mqtt Instance. Remarks . None. typedef enum { // Idle SYS_MQTT_STATUS_IDLE = 0, // Lower Layer is DOWN SYS_MQTT_STATUS_LOWER_LAYER_DOWN, // Net Client connecting to Net Server SYS_MQTT_STATUS_SOCK_CLIENT_CONNECTING, // Net Instance connected to the peer SYS_MQTT_STATUS_SOCK_CONNECTED, // Net Instance Failed to open socket SYS_MQTT_STATUS_SOCK_OPEN_FAILED, // Lower Layer is DOWN SYS_MQTT_STATUS_MQTT_CONNECTED, // Net Instance in disconnected state SYS_MQTT_STATUS_MQTT_DISCONNECTING, // Net Instance in disconnected state SYS_MQTT_STATUS_MQTT_DISCONNECTED, // Wait for Connect Ack from Broker SYS_MQTT_STATUS_WAIT_FOR_MQTT_CONACK, // Wait for Subscribe Ack from Broker SYS_MQTT_STATUS_WAIT_FOR_MQTT_SUBACK, // Wait for Publish Ack from Broker SYS_MQTT_STATUS_WAIT_FOR_MQTT_PUBACK, // Wait for Unsibscribe Ack from Broker SYS_MQTT_STATUS_WAIT_FOR_MQTT_UNSUBACK, } SYS_MQTT_STATUS; . SYS_MQTT_RESULT . Summary . Identifies the return values for the Sys Mqtt APIs. Remarks . None. typedef enum { // Success SYS_MQTT_SUCCESS = 0, // Failure SYS_MQTT_FAILURE = -1, // Sys NET Service Down SYS_MQTT_SERVICE_DOWN = -2, // Sys NET Available Put Buffer not enough for xmitting the Data SYS_MQTT_SEM_OPERATION_FAILURE = -5, // Sys NET Invalid Handle SYS_MQTT_INVALID_HANDLE = -6, } SYS_MQTT_RESULT; . SYS_MQTT_BrokerConfig . Summary . Used for passing on the configuration related to the MQTT Broker . Remarks . None. typedef struct { //to know which of the Configurations are valid SYS_MQTT_Vendor_Type eVendorType; // MQTT Broker/ Server Name char brokerName[SYS_MQTT_MAX_BROKER_NAME_LEN]; // MQTT Server Port uint16_t serverPort; // Keep Alive Interval for the Mqtt Session uint16_t keepAliveInterval; // MQTT Client ID char clientId[SYS_MQTT_CLIENT_ID_MAX_LEN]; // MQTT Username char username[SYS_MQTT_USER_NAME_MAX_LEN]; // MQTT password char password[SYS_MQTT_PASSWORD_MAX_LEN]; // TLS is Enabled bool tlsEnabled; // AutoConnect is Enabled bool autoConnect; // Clean Session is Enabled bool cleanSession; } SYS_MQTT_BrokerConfig; . SYS_MQTT_SubscribeConfig . Summary . Used for passing on the configuration related to the MQTT Subtopics the user wants to subscribe to. Remarks . This Configuration is passed via the SYS_MQTT_Connect() function or the SYS_MQTT_CtrlMsg() function . typedef struct { uint8_t entryValid; //Qos (0/ 1/ 2) uint8_t qos; //Name of the Topic Subscribing to char topicName[SYS_MQTT_TOPIC_NAME_MAX_LEN]; } SYS_MQTT_SubscribeConfig; . SYS_MQTT_PublishConfig . Summary . Used for Reading the message that has been received on a topic subscribed to. The structure is also used for passing on the LWT config when connecting to MQTT Broker. Remarks . This Message is passed to the Application via the SYS_MQTT_CALLBACK() function . typedef struct { //Qos (0/ 1/ 2) uint8_t qos; //Retain (0/1) - Message needs to be retained by the Broker till every subscriber receives it uint8_t retain; //Message to be Published uint8_t message[SYS_MQTT_MSG_MAX_LEN]; //Message Length uint16_t messageLength; //Topic on which to Publish the message char *topicName; //Topic Length uint16_t topicLength; } SYS_MQTT_PublishConfig; . SYS_MQTT_PublishTopicCfg . Summary . Used for publishing a message on a topic. It contains the config related to the Topic . Remarks . This Message is passed from the Application to the MQTT servuce via the SYS_MQTT_Publish() function . typedef struct { //Qos (0/ 1/ 2) uint8_t qos; //Retain (0/1) - Message needs to be retained by the Broker till every subscriber receives it uint8_t retain; //Topic on which to Publish the message char topicName[SYS_MQTT_TOPIC_NAME_MAX_LEN]; //Topic Length uint16_t topicLength; } SYS_MQTT_PublishTopicCfg; . SYS_MQTT_EVENT_TYPE . Summary . Event Message Type which comes with the Callback SYS_MQTT_CALLBACK() informing the user of the event that has occured. Remarks . None. typedef enum { //Message received on a topic subscribed to SYS_MQTT_EVENT_MSG_RCVD = 0, //MQTT Client for Disconnected SYS_MQTT_EVENT_MSG_DISCONNECTED, //MQTT Client Connected SYS_MQTT_EVENT_MSG_CONNECTED, //MQTT Client Subscribed to a Grp SYS_MQTT_EVENT_MSG_SUBSCRIBED, //MQTT Client UnSubscribed from a Grp SYS_MQTT_EVENT_MSG_UNSUBSCRIBED, //MQTT Client Published to a Grp SYS_MQTT_EVENT_MSG_PUBLISHED, //MQTT Client ConnAck TimeOut SYS_MQTT_EVENT_MSG_CONNACK_TO, //MQTT Client SubAck TimeOut SYS_MQTT_EVENT_MSG_SUBACK_TO, //MQTT Client PubAck TimeOut SYS_MQTT_EVENT_MSG_PUBACK_TO, //MQTT Client PubAck TimeOut SYS_MQTT_EVENT_MSG_UNSUBACK_TO, } SYS_MQTT_EVENT_TYPE; . SYS_MQTT_Config . Summary . Used for passing on the configuration related to the either MQTT Broker, or the Cloud Vendors AWS/ Azure, etc. Remarks . None. typedef struct { //MQTT Broker Configuration SYS_MQTT_BrokerConfig sBrokerConfig; //Number of Topis Subscribed to (0-SYS_MQTT_MAX_TOPICS) uint8_t subscribeCount; //Config for all the Topics Subscribed to SYS_MQTT_SubscribeConfig sSubscribeConfig[SYS_MQTT_SUB_MAX_TOPICS]; //If last will and testament(LWT) is enabled or not bool bLwtEnabled; // LWT Configuration SYS_MQTT_PublishConfig sLwtConfig; //Network Interface - Wifi or Ethernet uint8_t intf; } SYS_MQTT_Config; . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/interface.html#data-types-and-constants",
    "relUrl": "/system/mqtt/docs/interface.html#data-types-and-constants"
  },"61": {
    "doc": "MQTT System Service Interface",
    "title": "Initialization functions",
    "content": "SYS_MQTT_Initialize . Function . int32_t SYS_MQTT_Initialize() . Summary . Returns success/ failure for initialization of data structures of the MQTT service . Description . This function is used for initializing the data structures of the MQTT service and is called from within the System Task. Returns . SYS_NET_SUCCESS - Indicates the data structures were initialized successfully . SYS_NET_FAILURE - Indicates that it failed to initialize the data structures. Example . if( SYS_MQTT_Initialize() == SYS_MQTT_SUCCESS) { } . Remarks . If the MQTT system service is enabled using MHC, then auto generated code will take care of its initialization. SYS_MQTT_Deinitialize . Function . void SYS_MQTT_Deinitialize() . Summary . Deinitialization of data structures of the MQTT service . Description . This function is used for freeing the allocated data structures for the MQTT service. Example . SYS_MQTT_Deinitialize() . Remarks . None . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/interface.html#initialization-functions",
    "relUrl": "/system/mqtt/docs/interface.html#initialization-functions"
  },"62": {
    "doc": "MQTT System Service Interface",
    "title": "Status functions",
    "content": "SYS_MQTT_GetStatus . Function . SYS_MQTT_STATUS SYS_MQTT_GetStatus ( SYS_MODULE_OBJ object ) . Summary . Returns System MQTT instance status. Description . This function returns the current status of the System MQTT instance. Precondition . SYS_MQTT_Connect should have been called before calling this function . Parameters . object - SYS MQTT object handle, returned from SYS_MQTT_Connect . Returns . SYS_MQTT_STATUS . Example . // Handle \"objSysMqtt\" value must have been returned from SYS_MQTT_Connect. if (SYS_MQTT_GetStatus (objSysMqtt) == SYS_MQTT_STATUS_WAIT_FOR_MQTT_CONACK) { // MQTT system service is initialized, and Waiting for the Connect Ack // from the Broker for the Connect Packet sent by DUT to it. } . Remarks . None. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/interface.html#status-functions",
    "relUrl": "/system/mqtt/docs/interface.html#status-functions"
  },"63": {
    "doc": "MQTT System Service Interface",
    "title": "Setup functions",
    "content": "SYS_MQTT_Connect . Function . SYS_MODULE_OBJSYS_MODULE_OBJ* SYS_MQTT_Connect(SYS_MQTT_Config *cfg, SYS_MQTT_CALLBACK fn MqttFn, void *cookie); . Summary . Connects to the configured MQTT Broker. Description . This function opens a new instance and connects to the configured MQTT Broker. Parameters . cfg - Configuration based on which the Cloud Service needs to Open MqttFn - Function pointer to the Callback to be called in case of an event cookie - Cookie passed as one of the params in the Callback for the user to identify the service instance . Returns . If successful, returns a valid handle to an object. Otherwise, it returns SYS_MODULE_OBJ_INVALID. Example . SYS_MQTT_Config g_sMqttSrvcCfg; SYS_MODULE_OBJ g_MqttSrvcHandle; memset(&amp;g_sMqttSrvcCfg, 0, sizeof(g_sMqttSrvcCfg)); g_sMattSrvcCfg.configBitmask |= SYS_MQTT_CONFIG_MASK_MQTT; strcpy(g_sMqttSrvcCfg.mqttConfig.brokerConfig.brokerName, \"test.mosquitto.org\", strlen(\"test.mosquitto.org\")); g_sMqttSrvcCfg.mqttConfig.brokerConfig.serverPort = 1883; strcpy(g_sMqttSrvcCfg.mqttConfig.brokerConfig.clientId, \"pic32mzw1\", strlen(\"pic32maw1\")); g_sMqttSrvcCfg.mqttConfig.brokerConfig.autoConnect = 1; g_sMqttSrvcCfg.mqttConfig.brokerConfig.tlsEnabled = 0; g_sMqttSrvcCfg.mqttConfig.subscribeCount = 1; strcpy(g_sMqttSrvcCfg.mqttConfig.subscribeConfig[0].topicName, \"house/temperature/first_floor/kitchen\", strlen(\"house/temperature/first_floor/kitchen\")); g_sMqttSrvcCfg.mqttConfig.subscribeConfig[0].qos = 1; g_MqttSrvcHandle = SYS_MQTT_Connect(&amp;g_sMqttSrvcCfg, MqttSrvcCallback, 0); if (g_MqttSrvcHandle == SYS_MODULE_OBJ_INVALID) { // Handle error } . Remarks . This routine should be called only once when the user is configuring the Mqtt service . SYS_MQTT_Disconnect . Function . void SYS_MQTT_Disconnect(SYS_MODULE_OBJ obj) . Summary . Disconnects from the MQTT Server . Description . This function is used for disconnecting from the MQTT Server. Precondition . SYS_MQTT_Connect should have been called. Parameters . obj - SYS_MQTT object handle, returned from SYS_MQTT_Connect . Returns . None . Example . // Handle \"objSysMqtt\" value must have been returned from SYS_MQTT_Connect. SYS_MQTT_Disconnect(objSysMqtt); . Remarks . None. SYS_MQTT_Task . Function . void SYS_MQTT_Task(SYS_MODULE_OBJ obj) . Summary . Executes the MQTT Service State Machine . Description . This function ensures that the MQTT service is able to execute its state machine to process any messages and invoke the user callback for any events. Precondition . SYS_MQTT_Connect should have been called before calling this function . Parameters . obj - SYS MQTT object handle, returned from SYS_MQTT_Connect . Returns . None . Example . // Handle \"objSysMqtt\" value must have been returned from SYS_MQTT_Connect. while(1) { ... SYS_MQTT_Task(objSysMqtt); ... } . SYS_MQTT_Subscribe . Function . int32_t SYS_MQTT_Subscribe(SYS_MODULE_OBJ obj, SYS_MQTT_SubscribeConfig *subConfig); . Summary . Returns success/ failure for the subscribing to a Topic by the user. Description . This function is used for subscribing to a Topic. Precondition . SYS_MQTT_Connect should have been called before calling this function . Parameters . obj - SYS MQTT object handle, returned from SYS_MQTT_Connect subConfig - valid pointer to the Topic details on which to Subscribe . Returns . SYS_MQTT_SUCCESS - Indicates that the Request was catered to successfully . SYS_MQTT_FAILURE - Indicates that the Request failed . Example . SYS_MQTT_SubscribeConfig sSubscribeCfg; memset(&amp;sSubscribeCfg, 0, sizeof(sSubscribeCfg)); sSubscribeCfg.qos = 1; strcpy(sSubscribeCfg.topicName, \"house/temperature/first_floor/kitchen\"); // Handle \"objSysMqtt\" value must have been returned from SYS_MQTT_Connect. if( SYS_MQTT_Subscribe(objSysMqtt, &amp;sSubscribeCfg) == SYS_MQTT_SUCCESS) { } . SYS_MQTT_Unsubscribe . Function . int32_t SYS_MQTT_Unsubscribe(SYS_MODULE_OBJ obj, char *subTopic); . Summary . Returns success/ failure for the unsubscribing to a Topic by the user. Description . This function is used for Unsubscribing from a Topic. Precondition . SYS_MQTT_Connect should have been called before calling this function . Parameters . obj - SYS MQTT object handle, returned from SYS_MQTT_Connect subtopic - Topic from which to unsubscribe . Returns . SYS_MQTT_SUCCESS - Indicates that the Request was catered to successfully . SYS_MQTT_FAILURE - Indicates that the Request failed . Example . // Handle \"objSysMqtt\" value must have been returned from SYS_MQTT_Connect. if( SYS_MQTT_Unsubscribe(objSysMqtt, \"house/temperature/first_floor/kitchen\") == SYS_MQTT_SUCCESS) { } . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/interface.html#setup-functions",
    "relUrl": "/system/mqtt/docs/interface.html#setup-functions"
  },"64": {
    "doc": "MQTT System Service Interface",
    "title": "Data Exchange functions",
    "content": "SYS_MQTT_Publish . Function . int32_t SYS_MQTT_Publish(SYS_MODULE_OBJ obj, SYS_MQTT_PublishTopicCfg *psPubCfg, char *message, uint16_t message_len); . Summary . Returns success/ failure for the publishing of message on a topic by the user. Description . This function is used for Publishing a message on a Topic. Precondition . SYS_MQTT_Connect should have been called before calling this function . Parameters . obj - SYS MQTT object handle, returned from SYS_MQTT_Connect psPubCfg - valid pointer to the Topic details on which to Publish message - Message to be published . message_len - Message length . Returns . SYS_MQTT_SUCCESS - Indicates that the Request was catered to successfully . SYS_MQTT_FAILURE - Indicates that the Request failed . Example . SYS_MQTT_PublishTopicCfg sTopicCfg; memset(&amp;sTopicCfg, 0, sizeof(sTopicCfg)); sTopicCfg.qos = 1; sTopicCfg.retain = 1; strcpy(sTopicCfg.topicName, \"house/temperature/first_floor/kitchen\"); sTopicCfg.topicLength = strlen(\"house/temperature/first_floor/kitchen\"); // Handle \"objSysMqtt\" value must have been returned from SYS_MQTT_Connect. if( SYS_MQTT_Publish(objSysMqtt, &amp;sPublishCfg, \"80.17\", strlen(\"80.17\")) == SYS_MQTT_SUCCESS) { } . SYS_MQTT_CALLBACK . Function . int32_t SYS_MQTT_CALLBACK(SYS_MQTT_EVENT_TYPE eEventType, void *data, uint16_t len, void* cookie); . Summary . Pointer to a MQTT system service callback function. Description . This data type defines a pointer to a Mqtt service callback function, thus defining the function signature. Callback functions may be registered by mqtt clients of the Mqtt service via the SYS_MQTT_Connect call. Precondition . Is a part of the Mqtt service Setup using the SYS_MQTT_Connect function . Parameters . eEventType - event (SYS_MQTT_EVENT_TYPE) - Message Received/ Got Disconnected data - Data (if any) related to the Event len - Length of the Data received cookie - A context value, returned untouched to the client when the callback occurs. It can be used to identify the instance of the client who registered the callback. Returns . None. Example . void MqttSrvcCallback(SYS_MQTT_EVENT_TYPE event, void *data, uint16_t len, void* cookie, ) { switch(event) { case SYS_MQTT_EVENT_MSG_RCVD: { SYS_MQTT_PublishConfig *psMsg = (SYS_MQTT_PublishConfig *)data; psMsg-&gt;message[psMsg-&gt;messageLength] = 0; psMsg-&gt;topicName[psMsg-&gt;topicLength] = 0; SYS_CONSOLE_PRINT(\"\\nMqttCallback(): Msg received on Topic: %s ; Msg: %s\\r\\n\", psMsg-&gt;topicName, psMsg-&gt;message); break; } case SYS_MQTT_EVENT_MSG_DISCONNECT: { SYS_CONSOLE_PRINT(\"CloudSrvcCallback(): MQTT DOWN\"); break; } } } . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/interface.html#data-exchange-functions",
    "relUrl": "/system/mqtt/docs/interface.html#data-exchange-functions"
  },"65": {
    "doc": "Wi-Fi provisioning System Service Interface",
    "title": "Wi-Fi Provisioning System Service Interface",
    "content": ". | Data Types and Constants Summary | Initialization functions Summary | Status functions Summary | Setup functions Summary | Data Types and Constants . | SYS_WIFIPROV_AUTH | SYS_WIFIPROV_CTRLMSG | SYS_WIFIPROV_MODE | SYS_WIFIPROV_STA_CONFIG | SYS_WIFIPROV_AP_CONFIG | SYS_WIFIPROV_CONFIG | SYS_WIFIPROV_STATUS | SYS_WIFIPROV_RESULT | SYS_WIFIPROV_CALLBACK | . | Initialization functions . | SYS_WIFIPROV_Initialize | SYS_WIFIPROV_Deinitialize | . | Status functions . | SYS_WIFIPROV_GetStatus | . | Setup functions . | SYS_WIFIPROV_Tasks | SYS_WIFIPROV_CtrlMsg | . | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/interface.html#wi-fi-provisioning-system-service-interface",
    "relUrl": "/system/wifiprov/docs/interface.html#wi-fi-provisioning-system-service-interface"
  },"66": {
    "doc": "Wi-Fi provisioning System Service Interface",
    "title": "Data Types and Constants Summary",
    "content": "| Name | Description | . | SYS_WIFIPROV_AUTH | Identifies the type of Authentication requested. | . | SYS_WIFIPROV_CTRLMSG | Identifies the control message for which the client has called | . | SYS_WIFIPROV_MODE | Identifies the Wi-Fi operating mode. | . | SYS_WIFIPROV_STA_CONFIG | Configuration of station parameters. | . | SYS_WIFIPROV_AP_CONFIG | Configuration of access point mode parameters. | . | SYS_WIFIPROV_CONFIG | Configuration of device configuration parameters. | . | SYS_WIFIPROV_STATUS | Result of a Wi-Fi Provisioning system service client interface get | . | SYS_WIFIPROV_RESULT | Result of a Wi-Fi Provisioning system service client interface operation. | . | SYS_WIFIPROV_CALLBACK | Pointer to a Wi-Fi Provisioning system service callback function. | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/interface.html#data-types-and-constants-summary",
    "relUrl": "/system/wifiprov/docs/interface.html#data-types-and-constants-summary"
  },"67": {
    "doc": "Wi-Fi provisioning System Service Interface",
    "title": "Initialization functions Summary",
    "content": "| Name | Description | . | SYS_WIFIPROV_Initialize | Initializes the System Wi-Fi Provisioning module. | . | SYS_WIFIPROV_Deinitialize | Deinitializes the module instance of the SYS WIFIPROV module | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/interface.html#initialization-functions-summary",
    "relUrl": "/system/wifiprov/docs/interface.html#initialization-functions-summary"
  },"68": {
    "doc": "Wi-Fi provisioning System Service Interface",
    "title": "Status functions Summary",
    "content": "| Name | Description | . | SYS_WIFIPROV_GetStatus | Returns System Wi-Fi Provisioning service status. | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/interface.html#status-functions-summary",
    "relUrl": "/system/wifiprov/docs/interface.html#status-functions-summary"
  },"69": {
    "doc": "Wi-Fi provisioning System Service Interface",
    "title": "Setup functions Summary",
    "content": "| Name | Description | . | SYS_WIFIPROV_Tasks | Maintains the Wi-Fi Provisioning System tasks and functionalities. | . | SYS_WIFIPROV_CtrlMsg | Request Wi-Fi Provisioning system service control request interface | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/interface.html#setup-functions-summary",
    "relUrl": "/system/wifiprov/docs/interface.html#setup-functions-summary"
  },"70": {
    "doc": "Wi-Fi provisioning System Service Interface",
    "title": "Data Types and Constants",
    "content": "SYS_WIFIPROV_AUTH . Summary . Identifies the type of Authentication requested. Description . Identifies the type of Authentication requested. Remarks . None. typedef enum { /* Requesting a Open Authentication types */ SYS_WIFIPROV_OPEN = 1, /* Requesting a WEP Authentication types */ SYS_WIFIPROV_WEP, /* Requesting a WPA/WPA2(Mixed) Authentication types */ SYS_WIFIPROV_WPAWPA2MIXED, /* Requesting a WPA2 Authentication types */ SYS_WIFIPROV_WPA2, /* Requesting a WPA2/WPA3(Mixed) Authentication types */ SYS_WIFIPROV_WPA2WPA3MIXED, /* Requesting a WPA3 Authentication types */ SYS_WIFIPROV_WPA3 } SYS_WIFIPROV_AUTH ; . SYS_WIFIPROV_CTRLMSG . Summary . Identifies the control message for which the client has called the SYS_WIFIPROV_CtrlMsg(). Description . Identifies the control message for which the client has called the SYS_WIFIPROV_CtrlMsg(). Remarks . The different control messages which can be invoked by the client. typedef enum { /* Requesting a Wi-Fi Configuration set(for connect) */ SYS_WIFIPROV_SETCONFIG = 0, /* Requesting a Wi-Fi configuration get */ SYS_WIFIPROV_GETCONFIG, /* Updating Wi-Fi Connect status for enabling Wi-Fi Provisioning service */ SYS_WIFIPROV_CONNECT, } SYS_WIFIPROV_CTRLMSG ; . SYS_WIFIPROV_MODE . Summary . Identifies the Wi-Fi operating mode. Description . Identifies the Wi-Fi operating mode. Remarks . Client need to manually reboot device after switching mode. For example changing operating mode from STA to AP or AP to STA. typedef enum { /* Requesting a operating mode as a station */ SYS_WIFIPROV_STA = 0, /* Requesting a operating mode as a access point. */ SYS_WIFIPROV_AP = 1 } SYS_WIFIPROV_MODE ; . SYS_WIFIPROV_STA_CONFIG . Summary . Configuration of station parameters. Description . Configuration of station parameters. Remarks . None. typedef struct { /* Wi-Fi station mode SSID */ uint8_t ssid[32]; /* Wi-Fi station mode passphrase */ uint8_t psk[64]; /* Wi-Fi station mode authentication type */ SYS_WIFIPROV_AUTH authType; /* Wi-Fi station mode channel number. values of channel: 0 - scan and connect to all the channels 1 to 13 - - scan and connect to specified channel */ uint8_t channel; /* Wi-Fi station mode auto connect flag. value 0- Don't connect to AP, wait for client request. value 1- Connect to AP */ bool autoConnect; } SYS_WIFIPROV_STA_CONFIG; . SYS_WIFIPROV_AP_CONFIG . Summary . Configuration of access point mode parameters. Description . Configuration of access point mode parameters. Remarks . None. typedef struct { /* Wi-Fi access point mode SSID */ uint8_t ssid[32]; /* Wi-Fi access point mode passphrase */ uint8_t psk[64]; /* Wi-Fi access point mode authentication type */ SYS_WIFIPROV_AUTH authType; /* Wi-Fi access point mode channel number values of channel: 1 to 13 - operating channel of access point */ uint8_t channel; /* Wi-Fi access point mode SSID visibility Value of ssidVisibility: 0 - Hidden SSID 1 - broadcast the SSID */ bool ssidVisibility; } SYS_WIFIPROV_AP_CONFIG; . SYS_WIFIPROV_CONFIG . Summary . Configuration of device configuration parameters. Description . Configuration of device configuration parameters. Remarks . None. typedef struct { /* Operating mode of device */ SYS_WIFIPROV_MODE mode; /* Flag to identify if configuration needs to be saved in NVM. 0 - Do not save configuration in NVM. 1 - Save configuration in NVM. */ uint8_t saveConfig; /* Country Code configuration */ uint8_t countryCode[6]; /* Wi-Fi station mode configuration */ SYS_WIFIPROV_STA_CONFIG staConfig; /* Wi-Fi access point mode configuration */ SYS_WIFIPROV_AP_CONFIG apConfig; }SYS_WIFIPROV_CONFIG; . SYS_WIFIPROV_STATUS . Summary . Result of a Wi-Fi Provisioning system service client interface get operation(SYS_WIFIPROV_GetStatus()). Description . Result of a Wi-Fi Provisioning system service client interface get operation(SYS_WIFIPROV_GetStatus()). Remarks . None. typedef enum { /* Wi-Fi Provisioning system service is in MPFS filesystem mount state */ SYS_WIFIPROV_STATUS_MPFS_MOUNT=1, /* Wi-Fi Provisioning system service is in NVM read state */ SYS_WIFIPROV_STATUS_NVM_READ, /* Wi-Fi Provisioning system service is in NVM read Wi-Fi Configuration checking state */ SYS_WIFIPROV_STATUS_CONFIG_CHECK, /* Wi-Fi Provisioning system service is in NVM erase state */ SYS_WIFIPROV_STATUS_NVM_ERASE, /* Wi-Fi Provisioning system service is in NVM write state */ SYS_WIFIPROV_STATUS_NVM_WRITE, /* Wi-Fi Provisioning system service is in wait for NVM write to complate state */ SYS_WIFIPROV_STATUS_WAITFORWRITE, /* Wi-Fi Provisioning system service is in client request state */ SYS_WIFIPROV_STATUS_WAITFORREQ, /*Wi-Fi Provisioning system service is in invalid state */ SYS_WIFIPROV_STATUS_NONE =255 } SYS_WIFIPROV_STATUS; . SYS_WIFIPROV_RESULT . Summary . Result of a Wi-Fi Provisioning system service client interface operation. Description . Identifies the result of Wi-Fi Provisioning service operations . Remarks . None. typedef enum{ /* Operation completed with success */ SYS_WIFIPROV_SUCCESS = 0, /* Operation failed. */ SYS_WIFIPROV_FAILURE, /* Operation request object is invalid */ SYS_WIFIPROV_OBJ_INVALID=255 }SYS_WIFIPROV_RESULT; . SYS_WIFIPROV_CALLBACK . Function . typedef void (*SYS_WIFIPROV_CALLBACK ) ( uint32_t event, void * data, void *cookie ) . Summary . Pointer to a Wi-Fi Provisioning system service callback function. Description . This data type defines a pointer to a Wi-Fi Provisioning service callback function. Callback functions can be registered by client at initializing. Precondition . None . Parameters . event - A event value, event can be any of SYS_WIFIPROV_CTRLMSG types. data - Wi-Fi Provisioning service Data. cookie - Client register cookie. Returns . None. Example . void WiFiProvServCallback (uint32_t event, void * data,void *cookie ) { switch(event) { case SYS_WIFIPROV_SETCONFIG: { SYS_WIFIPROV_CONFIG* wifiProvConfig = (SYS_WIFIPROV_CONFIG *) data; // Provisioning service updated data SYS_CONSOLE_PRINT(\"%s:%d Device mode=%d\\\\r\\\\n\",__func__,__LINE__,wifiProvConfig-&gt;mode); break; } case SYS_WIFIPROV_GETCONFIG: { SYS_WIFIPROV_CONFIG* wifiProvConfig = (SYS_WIFIPROV_CONFIG *) data; // client requested get Wi-Fi Configuration SYS_CONSOLE_PRINT(\"%s:%d Device mode=%d\\\\r\\\\n\",__func__,__LINE__,wifiProvConfig-&gt;mode); break; } } } . Remarks . None. typedef void (*SYS_WIFIPROV_CALLBACK )(uint32_t event, void * data,void *cookie ); . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/interface.html#data-types-and-constants",
    "relUrl": "/system/wifiprov/docs/interface.html#data-types-and-constants"
  },"71": {
    "doc": "Wi-Fi provisioning System Service Interface",
    "title": "Initialization functions",
    "content": "SYS_WIFIPROV_Initialize . Function . SYS_MODULE_OBJ SYS_WIFIPROV_Initialize ( SYS_WIFIPROV_CONFIG *config, SYS_WIFIPROV_CALLBACK callback, void *cookie ) . Summary . Initializes the System Wi-Fi Provisioning module. Description . Wi-Fi Provisioning service supports only single instance. Parameters . config - Wi-Fi Provisioning device configuration structure. callback - The client callback function pointer. cookie - The pointer which will be passed to the client application when the client callback function is invoked. Returns . If successful, returns a valid handle to an object. Otherwise, it returns SYS_MODULE_OBJ_INVALID. Example . #define WIFI_DEV_SSID \"DEMO_AP\" #define WIFI_DEV_PSK \"password\" SYS_WIFIPROV_CONFIG wifiProvConfig; SYS_MODULE_OBJ wifiProvServHandle; // Set mode as STA wifiProvConfig.mode = SYS_WIFI_STA; // Disable saving wifi configuration wifiProvConfig.saveConfig = false; //Set the auth type to SYS_WIFI_WPA2 wifiProvConfig.staConfig.authType = SYS_WIFI_WPA2; // Enable all the channels(0) wifiProvConfig.staConfig.channel = 0; // Device doesn't wait for user request. wifiProvConfig.staConfig.autoConnect = 1; // Set SSID memcpy(wifiProvConfig.staConfig.ssid,WIFI_DEV_SSID,sizeof(WIFI_DEV_SSID)); // Set PSK memcpy(wifiProvConfig.staConfig.psk,WIFI_DEV_PSK,sizeof(WIFI_DEV_PSK)); wifiProvServHandle = SYS_WIFIPROV_Initialize(&amp;wifiProvConfig, WiFiProvServCallback, 0); if (wifiProvServHandle == SYS_MODULE_OBJ_INVALID) { // Handle error } . Remarks . Client can auto enable the Provisioning service functionality by selecting MHC configuration option of Wi-Fi Service. SYS_WIFIPROV_Deinitialize . Function . SYS_WIFIPROV_RESULT SYS_WIFIPROV_Deinitialize (SYS_MODULE_OBJ object) . Summary . Deinitializes the module instance of the SYS WIFIPROV module . Description . This function deinitializes the module instance disabling its operation. Resets all of the internal data structures and fields to the default settings. Precondition . The SYS_WIFIPROV_Initialize function should have been called before calling this function. Parameters . object - SYS WIFIPROV object handle, returned from SYS_WIFIPROV_Initialize . Returns . return SYS_WIFIPROV_RESULT . Example . if (SYS_WIFI_SUCCESS == SYS_WIFIPROV_Deinitialize (wifiProvServHandle)) { // when the SYS WIFI is De-initialized. } . Remarks . Deinitialize should be called if the WiFi Provisioning service is no longer going to be used. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/interface.html#initialization-functions",
    "relUrl": "/system/wifiprov/docs/interface.html#initialization-functions"
  },"72": {
    "doc": "Wi-Fi provisioning System Service Interface",
    "title": "Status functions",
    "content": "SYS_WIFIPROV_GetStatus . Function . uint8_t SYS_WIFIPROV_GetStatus ( SYS_MODULE_OBJ object) . Summary . Returns System Wi-Fi Provisioning service status. Description . This function returns the current status of the System Wi-Fi Provisioning service. Precondition . The SYS_WIFIPROV_Initialize function should have been called before calling this function. Parameters . object - SYS WIFIPROV object handle, returned from SYS_WIFIPROV_Initialize . Returns . return SYS_WIFIPROV_STATUS if client provided object is valid, else return SYS_WIFIPROV_OBJ_INVALID. Example . if (SYS_WIFIPROV_STATE_WAITFORREQ == SYS_WIFIPROV_GetStatus (wifiProvServHandle)) { // when the SYS WIFI Provisioning module in wait for client request } . Remarks . None . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/interface.html#status-functions",
    "relUrl": "/system/wifiprov/docs/interface.html#status-functions"
  },"73": {
    "doc": "Wi-Fi provisioning System Service Interface",
    "title": "Setup functions",
    "content": "SYS_WIFIPROV_Tasks . Function . uint8_t SYS_WIFIPROV_Tasks ( SYS_MODULE_OBJ object) . Summary . Maintains the Wi-Fi Provisioning System tasks and functionalities. Description . This function is used to run the various tasks and functionalities of Wi-Fi Provisioning system service. Precondition . The SYS_WIFIPROV_Initialize function should have been called before calling this function. Parameters . object - SYS WIFI Provisioning object handle, returned from SYS_WIFIPROV_Initialize . Returns . return SYS_WIFIPROV_STATUS if client provided object is valid, else return SYS_WIFIPROV_OBJ_INVALID. Example . if (SYS_WIFIPROV_OBJ_INVALID != SYS_WIFIPROV_Tasks (wifiProvServHandle)) { } . Remarks . None . SYS_WIFIPROV_CtrlMsg . Function . SYS_WIFIPROV_RESULT SYS_WIFIPROV_CtrlMsg (SYS_MODULE_OBJ object,uint32_t event,void *buffer,uint32_t length ) . Summary . Request Wi-Fi Provisioning system service control request interface . Description . This function is used to make control request to Wi-Fi Provisioning system service. Precondition . The SYS_WIFIPROV_Initialize function should have been called before calling this function. Parameters . object - SYS WIFIPROV object handle, returned from SYS_WIFIPROV_Initialize . event - A event value, event can be any of SYS_WIFIPROV_CTRLMSG types . buffer - Control message data input. length - size of buffer data . Returns . return SYS_WIFIPROV_RESULT. Example . Details of SYS_WIFIPROV_SETCONFIG: SYS_WIFIPROV_CONFIG wifiProvConfig; SYS_MODULE_OBJ wifiProvServHandle; // Set mode as STA wifiProvConfig.mode = SYS_WIFI_STA; // Disable saving wifi configuration wifiProvConfig.saveConfig = false; // Set the auth type to SYS_WIFI_WPA2 wifiProvConfig.staConfig.authType = SYS_WIFI_WPA2; // Enable all the channels(0) wifiProvConfig.staConfig.channel = 0; // Device doesn't wait for user request wifiProvConfig.staConfig.autoConnect = 1; // Set SSID memcpy(wifiProvConfig.staConfig.ssid,WIFI_DEV_SSID,sizeof(WIFI_DEV_SSID)); // Set PSK memcpy(wifiProvConfig.staConfig.psk,WIFI_DEV_PSK,sizeof(WIFI_DEV_PSK)); if (SYS_WIFIPROV_OBJ_INVALID != SYS_WIFIPROV_CtrlMsg (wifiProvServHandle,SYS_WIFIPROV_SETCONFIG,&amp;wifiProvConfig,sizeof(SYS_WIFIPROV_CONFIG))) { // When Wi-Fi Provisioning Configuration need to be updated } Details of SYS_WIFIPROV_GETCONFIG: SYS_WIFIPROV_CtrlMsg (wifiProvServHandle,SYS_WIFIPROV_GETCONFIG,NULL,0); Details of SYS_WIFIPROV_CONNECT: // Updating Wi-Fi Connected state to Provisioning service bool wifiProvConnectState = true; SYS_WIFIPROV_CtrlMsg (wifiProvServHandle,SYS_WIFIPROV_CONNECT,&amp;wifiProvConnectState,sizeof(wifiProvConnectState)); // Updating Wi-Fi disconnected state to Provisioning service bool wifiProvConnectState = false; SYS_WIFIPROV_CtrlMsg (wifiProvServHandle,SYS_WIFIPROV_CONNECT,&amp;wifiProvConnectState,sizeof(wifiProvConnectState)); . Remarks . None . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/interface.html#setup-functions",
    "relUrl": "/system/wifiprov/docs/interface.html#setup-functions"
  },"74": {
    "doc": "Wi-Fi provisioning System Service Interface",
    "title": "Wi-Fi provisioning System Service Interface",
    "content": " ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/interface.html",
    "relUrl": "/system/wifiprov/docs/interface.html"
  },"75": {
    "doc": "App Debug System Service Interface",
    "title": "App Debug System Service Interface",
    "content": ". | Data Types and Constants Summary | Initialization functions Summary | Setup functions Summary | Data Types and Constants . | APP_LOG_LVL_DISABLE | APP_LOG_ERROR_LVL | APP_LOG_DBG_LVL | APP_LOG_INFO_LVL | APP_LOG_FN_EE_LVL | SYS_APPDEBUG_MAX_NUM_OF_USERS | SYS_APPDEBUG_CONFIG | SYS_APPDEBUG_CtrlMsgType | SYS_APPDEBUG_RESULT | . | Initialization functions . | SYS_APPDEBUG_Initialize | SYS_APPDEBUG_Deinitialize | . | Setup functions . | SYS_APPDEBUG_Open | SYS_APPDEBUG_Close | SYS_APPDEBUG_CtrlMsg | SYS_APPDEBUG_ERR_PRINT | SYS_APPDEBUG_DBG_PRINT | SYS_APPDEBUG_INFO_PRINT | SYS_APPDEBUG_FN_ENTER_PRINT | SYS_APPDEBUG_FN_EXIT_PRINT | . | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/appdebug/docs/interface.html",
    "relUrl": "/system/appdebug/docs/interface.html"
  },"76": {
    "doc": "App Debug System Service Interface",
    "title": "Data Types and Constants Summary",
    "content": "| Name | Description | . | APP_LOG_LVL_DISABLE | App Debug Service Logging Disabled | . | APP_LOG_ERROR_LVL | App Debug Service Error Log Level | . | APP_LOG_DBG_LVL | App Debug Service Debug Log Level | . | APP_LOG_INFO_LVL | App Debug Service Info Log Level | . | APP_LOG_FN_EE_LVL | App Debug Service Service Entry/ Exit Log Level | . | SYS_APPDEBUG_MAX_NUM_OF_USERS | Number of instances of App Debug Service supported | . | SYS_APPDEBUG_CONFIG | Defines the data required to initialize the app debug system service. | . | SYS_APPDEBUG_CtrlMsgType | Identifies the control message for which the User has called the SYS_APPDEBUG_CtrlMsg(). | . | SYS_APPDEBUG_RESULT | Identifies the return values for the Sys App Debug APIs. | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/appdebug/docs/interface.html#data-types-and-constants-summary",
    "relUrl": "/system/appdebug/docs/interface.html#data-types-and-constants-summary"
  },"77": {
    "doc": "App Debug System Service Interface",
    "title": "Initialization functions Summary",
    "content": "| Name | Description | . | SYS_APPDEBUG_Initialize | Returns success/ failure for initialization of data structures of the | . | SYS_APPDEBUG_Deinitialize | Returns success/ failure for deinitialization of data structures of the | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/appdebug/docs/interface.html#initialization-functions-summary",
    "relUrl": "/system/appdebug/docs/interface.html#initialization-functions-summary"
  },"78": {
    "doc": "App Debug System Service Interface",
    "title": "Setup functions Summary",
    "content": "| Name | Description | . | SYS_APPDEBUG_Open | Open an instance of the System App Debug service. | . | SYS_APPDEBUG_Close | Close the specific module instance of the SYS App Debug service | . | SYS_APPDEBUG_CtrlMsg | Returns success/ failure for the flow/ level set operation asked by the user. | . | SYS_APPDEBUG_ERR_PRINT | Used for logging Error Level Logs | . | SYS_APPDEBUG_DBG_PRINT | Used for logging Debug Level Logs | . | SYS_APPDEBUG_INFO_PRINT | Used for logging Info Level Logs | . | SYS_APPDEBUG_FN_ENTER_PRINT | Used for logging Function Entry Logs | . | SYS_APPDEBUG_FN_EXIT_PRINT | Used for logging Function Exit Logs | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/appdebug/docs/interface.html#setup-functions-summary",
    "relUrl": "/system/appdebug/docs/interface.html#setup-functions-summary"
  },"79": {
    "doc": "App Debug System Service Interface",
    "title": "Data Types and Constants",
    "content": "APP_LOG_LVL_DISABLE . Summary . App Debug Service Logging Disabled . Remarks . None. #define APP_LOG_LVL_DISABLE 0x0 . APP_LOG_ERROR_LVL . Summary . App Debug Service Error Log Level . Remarks . None. #define APP_LOG_ERROR_LVL 0x1 . APP_LOG_DBG_LVL . Summary . App Debug Service Debug Log Level . Remarks . None. #define APP_LOG_DBG_LVL 0x2 . APP_LOG_INFO_LVL . Summary . App Debug Service Info Log Level . Remarks . None. #define APP_LOG_INFO_LVL 0x4 . APP_LOG_FN_EE_LVL . Summary . App Debug Service Service Entry/ Exit Log Level . Remarks . None. #define APP_LOG_FN_EE_LVL 0x8 . SYS_APPDEBUG_MAX_NUM_OF_USERS . Summary . Number of instances of App Debug Service supported . Remarks . None. #define SYS_APPDEBUG_MAX_NUM_OF_USERS 8 . SYS_APPDEBUG_CONFIG . Summary . Defines the data required to initialize the app debug system service. Description . This structure defines the data required to initialize the app debug system service. Remarks . None. typedef struct { /* Initial system Log level setting. */ unsigned int logLevel; /* Initial system Log level setting. */ unsigned int logFlow; /* Initial system Log level setting. */ const char *prefixString; } SYS_APPDEBUG_CONFIG; . SYS_APPDEBUG_CtrlMsgType . Summary . Identifies the control message for which the User has called the SYS_APPDEBUG_CtrlMsg(). Remarks . None. typedef enum { SYS_APPDEBUG_CTRL_MSG_TYPE_SET_LEVEL, SYS_APPDEBUG_CTRL_MSG_TYPE_SET_FLOW, } SYS_APPDEBUG_CtrlMsgType; . SYS_APPDEBUG_RESULT . Summary . Identifies the return values for the Sys App Debug APIs. Remarks . None. typedef enum { SYS_APPDEBUG_SUCCESS = 0, // Success SYS_APPDEBUG_FAILURE = -1, // Failure } SYS_APPDEBUG_RESULT; . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/appdebug/docs/interface.html#data-types-and-constants",
    "relUrl": "/system/appdebug/docs/interface.html#data-types-and-constants"
  },"80": {
    "doc": "App Debug System Service Interface",
    "title": "Initialization functions",
    "content": "SYS_APPDEBUG_Initialize . Function . int32_t SYS_APPDEBUG_Initialize() . Summary . Returns success/ failure for initialization of data structures of the App Debug service . Description . This function is used for initializing the data structures of the App Debug service and is called from within the System Task. Parameters . index - NULL; reserved for future use init - NULL; reserved for future use . Returns . SYS_APPDEBUG_SUCCESS - Indicates the data structures were initialized successfully . SYS_APPDEBUG_FAILURE - Indicates that it failed to initialize the data structures . Example . if( SYS_APPDEBUG_Initialize(NULL, NULL) == SYS_APPDEBUG_SUCCESS) { } . Remarks . If the Net system service is enabled using MHC, then auto generated code will take care of system task execution. SYS_APPDEBUG_Deinitialize . Function . int32_t SYS_APPDEBUG_Deinitialize() . Summary . Returns success/ failure for deinitialization of data structures of the App Debug service . Description . This function is used for deinitializing the data structures of the App Debug service and is called from within the System Task. Parameters . None . Returns . SYS_APPDEBUG_SUCCESS - Indicates the data structures were deinitialized successfully . SYS_APPDEBUG_FAILURE - Indicates that it failed to deinitialize the data structures. Example . if( SYS_APPDEBUG_Deinitialize() == SYS_APPDEBUG_SUCCESS) { } . Remarks . If the Net system service is enabled using MHC, then auto generated code will take care of system task execution. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/appdebug/docs/interface.html#initialization-functions",
    "relUrl": "/system/appdebug/docs/interface.html#initialization-functions"
  },"81": {
    "doc": "App Debug System Service Interface",
    "title": "Setup functions",
    "content": "SYS_APPDEBUG_Open . Function . SYS_MODULE_OBJ SYS_APPDEBUG_Open (SYS_APPDEBUG_CONFIG *cfg) . Summary . Open an instance of the System App Debug service. Description . This function initializes the instance of the System App Debug Service. Parameters . cfg - Configuration with which the App Debug Service needs to be opened Returns . Returns:If successful, returns a valid handle to an object. Otherwise, it returns SYS_MODULE_OBJ_INVALID. Example . SYS_APPDEBUG_CONFIG g_AppDebugServCfg; SYS_MODULE_OBJ g_AppDebugServHandle; memset(&amp;g_AppDebugServCfg, 0, sizeof(g_AppDebugServCfg)); g_AppDebugServCfg.logLevel |= APP_LOG_ERROR_LVL; g_AppDebugServCfg.prefixString = \"MY_APP\"; g_AppDebugServCfg.logFlow |= 0x1; g_AppDebugServHandle = SYS_NET_Open(&amp;g_AppDebugServCfg); if (g_AppDebugServHandle == SYS_MODULE_OBJ_INVALID) { // Handle error } . Remarks . This routine should be called everytime a user wants to open a new NET socket . SYS_APPDEBUG_Close . Function . void SYS_APPDEBUG_Close ( SYS_MODULE_OBJ object ) . Summary . Close the specific module instance of the SYS App Debug service . Description . This function clsoes the specific module instance disabling its operation. Resets all of the internal data structures and fields for the specified instance to the default settings. Precondition . The SYS_APPDEBUG_Open function should have been called before calling this function. Parameters . object - SYS App Debug object handle, returned from SYS_APPDEBUG_Open . Returns . None. Example . // Handle \"objSysAppDebug\" value must have been returned from SYS_APPDEBUG_Open. SYS_APPDEBUG_Close (objSysAppDebug); . Remarks . Once the Open operation has been called, the Close operation must be called before the Open operation can be called again. SYS_APPDEBUG_CtrlMsg . Function . int32_t SYS_APPDEBUG_CtrlMsg(SYS_MODULE_OBJ obj, SYS_APPDEBUG_CtrlMsgType eCtrlMsgType, void *data, uint16_t len) . Summary . Returns success/ failure for the flow/ level set operation asked by the user. Description . This function is used for setting the value of floe/ level for the app debug logs. Precondition . SYS_APPDEBUG_Open should have been called. Parameters . obj - SYS App Debug object handle, returned from SYS_APPDEBUG_Open eCtrlMsgType - valid Msg Type data - valid data buffer pointer based on the Msg Type len - length of the data buffer the pointer is pointing to . Returns . SYS_APPDEBUG_SUCCESS - Indicates that the Request was catered to successfully . SYS_APPDEBUG_FAILURE - Indicates that the Request failed . Example . // Handle \"objSysAppDebug\" value must have been returned from SYS_APPDEBUG_Open. uint32_t logLevel = 0x3; if( SYS_APPDEBUG_CtrlMsg(objSysAppDebug, SYS_APPDEBUG_CTRL_MSG_TYPE_SET_LEVEL, &amp;logLevel, 4) == SYS_APPDEBUG_SUCCESS) { } . Remarks . None. uint32_t linenum, char *msg, ...); void SYS_APPDEBUG_PRINT_FN_ENTER(SYS_MODULE_OBJ obj, uint32_t flow, const char *function, uint32_t linenum); void SYS_APPDEBUG_PRINT_FN_EXIT(SYS_MODULE_OBJ obj, uint32_t flow, const char *function, uint32_t linenum); . SYS_APPDEBUG_ERR_PRINT . Summary . Used for logging Error Level Logs . Description . This macro function is used for logging error level logs. Precondition . SYS_APPDEBUG_Open should have been called. Parameters . obj - SYS App Debug object handle, returned from SYS_APPDEBUG_Open flow - valid flow defined by the User, log will come only if this flow is enabled data - valid string … - any variable arguments if present . Returns . None. Example . // Handle \"objSysAppDebug\" value must have been returned from SYS_APPDEBUG_Open. SYS_APPDEBUG_ERR_PRINT(objSysAppDebug, MY_APP_FLOW_DATA, \"Failed to allocate memory of size %d\", size); . Remarks . None. #define SYS_APPDEBUG_ERR_PRINT(obj, flow, fmt, …) SYS_APPDEBUG_PRINT(obj, flow, APP_LOG_ERROR_LVL, FUNCTION, LINE, fmt, ##VA_ARGS) . SYS_APPDEBUG_DBG_PRINT . Summary . Used for logging Debug Level Logs . Description . This macro function is used for logging debug level logs. Precondition . SYS_APPDEBUG_Open should have been called. Parameters . obj - SYS App Debug object handle, returned from SYS_APPDEBUG_Open flow - valid flow defined by the User, log will come only if this flow is enabled data - valid string … - any variable arguments if present . Returns . None. Example . // Handle \"objSysAppDebug\" value must have been returned from SYS_APPDEBUG_Open. SYS_APPDEBUG_DBG_PRINT(objSysAppDebug, MY_APP_FLOW_DATA, \"memory allocation reached Threshold\"); . Remarks . None. #define SYS_APPDEBUG_DBG_PRINT(obj, flow, fmt, …) SYS_APPDEBUG_PRINT(obj, flow, APP_LOG_DBG_LVL, FUNCTION, LINE, fmt, ##VA_ARGS) . SYS_APPDEBUG_INFO_PRINT . Summary . Used for logging Info Level Logs . Description . This macro function is used for logging info level logs. Precondition . SYS_APPDEBUG_Open should have been called. Parameters . obj - SYS App Debug object handle, returned from SYS_APPDEBUG_Open flow - valid flow defined by the User, log will come only if this flow is enabled data - valid string … - any variable arguments if present . Returns . None. Example . // Handle \"objSysAppDebug\" value must have been returned from SYS_APPDEBUG_Open. SYS_APPDEBUG_INFO_PRINT(objSysAppDebug, MY_APP_FLOW_DATA, \"Allocate memory of size %d\", size); . Remarks . None. #define SYS_APPDEBUG_INFO_PRINT(obj, flow, fmt, …) SYS_APPDEBUG_PRINT(obj, flow, APP_LOG_INFO_LVL, FUNCTION, LINE, fmt, ##VA_ARGS) . SYS_APPDEBUG_FN_ENTER_PRINT . Summary . Used for logging Function Entry Logs . Description . This macro function is used for logging function entry level logs. Precondition . SYS_APPDEBUG_Open should have been called. Parameters . obj - SYS App Debug object handle, returned from SYS_APPDEBUG_Open flow - valid flow defined by the User, log will come only if this flow is enabled data - valid string … - any variable arguments if present . Returns . None. Example . // Handle \"objSysAppDebug\" value must have been returned from SYS_APPDEBUG_Open. SYS_APPDEBUG_FN_ENTER_PRINT(objSysAppDebug, MY_APP_FLOW_DATA); . Remarks . None. #define SYS_APPDEBUG_FN_ENTER_PRINT(obj, flow) SYS_APPDEBUG_PRINT_FN_ENTER(obj, flow, FUNCTION, LINE) . SYS_APPDEBUG_FN_EXIT_PRINT . Summary . Used for logging Function Exit Logs . Description . This macro function is used for logging function exit level logs. Precondition . SYS_APPDEBUG_Open should have been called. Parameters . obj - SYS App Debug object handle, returned from SYS_APPDEBUG_Open flow - valid flow defined by the User, log will come only if this flow is enabled data - valid string … - any variable arguments if present . Returns . None. Example . // Handle \"objSysAppDebug\" value must have been returned from SYS_APPDEBUG_Open. SYS_APPDEBUG_FN_EXIT_PRINT(objSysAppDebug, MY_APP_FLOW_DATA); . Remarks . None. #define SYS_APPDEBUG_FN_EXIT_PRINT(obj, flow) SYS_APPDEBUG_PRINT_FN_EXIT(obj, flow, FUNCTION, LINE) . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/appdebug/docs/interface.html#setup-functions",
    "relUrl": "/system/appdebug/docs/interface.html#setup-functions"
  },"82": {
    "doc": "Web Socket Server System Service Interface",
    "title": "Web Socket Server System Service Interface",
    "content": ". | Data Types and Constants Summary | Initialization functions Summary | Data Exchange functions Summary | Data Types and Constants . | SYS_WSS_KA_TIMER_PERIOD | SYS_WSS_CLIENT_KEY_SIZE | SYS_WSS_CLIENT_KEY_SIZE_DECODED | SYS_WSS_SERVER_KEY_SIZE | SYS_WSS_SHA1_DIGEST_SIZE | SYS_WSS_HTTP_VERSION_0_9 | SYS_WSS_HTTP_VERSION_1_0 | SYS_WSS_HTTP_VERSION_1_1 | SYS_WSS_STATUS_CODE_LEN | SYS_WSS_GUID | SYS_WSS_CONFIG | SYS_WSS_HANDSHAKE_CTXT | SYS_WSS_FRAME_HEADER | SYS_WSS_RXDATA | SYS_WSS_RESULT | SYS_WSS_STATE | SYS_WSS_FRAME | SYS_WSS_EVENTS | SYS_WSS_STATUS_CODE | . | Initialization functions . | SYS_WSS_Initialize | SYS_WSS_Deinitialize | . | Data Exchange functions . | SYS_WSS_sendMessage | SYS_WSS_register_callback | SYS_WSS_CloseConnection | SYS_WSS_PingClient | . | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wss/docs/interface.html",
    "relUrl": "/system/wss/docs/interface.html"
  },"83": {
    "doc": "Web Socket Server System Service Interface",
    "title": "Data Types and Constants Summary",
    "content": "| Name | Description | . | SYS_WSS_KA_TIMER_PERIOD | Decides the accuracy of the client timeout | . | SYS_WSS_CLIENT_KEY_SIZE | Array size for holding the client key | . | SYS_WSS_CLIENT_KEY_SIZE_DECODED | Decoded client key size as per the RFC6455 | . | SYS_WSS_SERVER_KEY_SIZE | Array saze for holding the server key | . | SYS_WSS_SHA1_DIGEST_SIZE | SHA1 digest size -server key genartion | . | SYS_WSS_HTTP_VERSION_0_9 | HTTP vesrion 0.9 | . | SYS_WSS_HTTP_VERSION_1_0 | HTTP version 1.0 | . | SYS_WSS_HTTP_VERSION_1_1 | HTTP version 1.1 | . | SYS_WSS_STATUS_CODE_LEN | Closing Status code lenth as per RFC6455 | . | SYS_WSS_GUID | WebSocket GUID as per Section 1.3 of RFC 6455 | . | SYS_WSS_CONFIG | Used for passing on the configuration(port and TLS) for socket connection | . | SYS_WSS_HANDSHAKE_CTXT | Stores the handshake information of a client. | . | SYS_WSS_FRAME_HEADER | Identifies the frame format as defined by RFC6455. | . | SYS_WSS_RXDATA | Stores the data received from the client along with the datalength. | . | SYS_WSS_RESULT | Identifies the return values for the WSS system service APIs. | . | SYS_WSS_STATE | Identifies the state machine values of the WSS system service. | . | SYS_WSS_FRAME | Identifies the frame types as defined by the RFC6455. | . | SYS_WSS_EVENTS | Identifies the events reported to the application using the call back function. | . | SYS_WSS_STATUS_CODE | Identifies status code to be used in the closing handshake as defined by RF6455. | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wss/docs/interface.html#data-types-and-constants-summary",
    "relUrl": "/system/wss/docs/interface.html#data-types-and-constants-summary"
  },"84": {
    "doc": "Web Socket Server System Service Interface",
    "title": "Initialization functions Summary",
    "content": "| Name | Description | . | SYS_WSS_Initialize | Returns wss object handle after initialization of data structures and timers of the WSS system service | . | SYS_WSS_Deinitialize | Deinitialization of data structures of the WSS system service | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wss/docs/interface.html#initialization-functions-summary",
    "relUrl": "/system/wss/docs/interface.html#initialization-functions-summary"
  },"85": {
    "doc": "Web Socket Server System Service Interface",
    "title": "Data Exchange functions Summary",
    "content": "| Name | Description | . | SYS_WSS_sendMessage | Returns failure or success after sending the data to the client. | . | SYS_WSS_register_callback | Returns success after registration of the user call back function. | . | SYS_WSS_CloseConnection | Returns success after sending a close frame to the client. | . | SYS_WSS_PingClient | Returns success after sending a ping frame to the client. | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wss/docs/interface.html#data-exchange-functions-summary",
    "relUrl": "/system/wss/docs/interface.html#data-exchange-functions-summary"
  },"86": {
    "doc": "Web Socket Server System Service Interface",
    "title": "Data Types and Constants",
    "content": "SYS_WSS_KA_TIMER_PERIOD . Summary . WSS system timer period which the accuracy of the client timeout. Remarks . None. #define SYS_WSS_KA_TIMER_PERIOD 100 . SYS_WSS_CLIENT_KEY_SIZE . Summary . Array size for holding the client key. Remarks . None. #define SYS_WSS_CLIENT_KEY_SIZE 16 . SYS_WSS_CLIENT_KEY_SIZE_DECODED . Summary . Decoded client key size as per the RFC6455. Remarks . None. #define SYS_WSS_CLIENT_KEY_SIZE_DECODED 16 . SYS_WSS_SERVER_KEY_SIZE . Summary . Array saze for holding the server key. Remarks . None. #define SYS_WSS_SERVER_KEY_SIZE 50 . SYS_WSS_SHA1_DIGEST_SIZE . Summary . SHA1 digest size -server key genartion. Remarks . None. #define SYS_WSS_SHA1_DIGEST_SIZE 20 . SYS_WSS_HTTP_VERSION_0_9 . Summary . HTTP vesrion 0.9 . Remarks . None. #define SYS_WSS_HTTP_VERSION_0_9 0x0009 . SYS_WSS_HTTP_VERSION_1_0 . Summary . HTTP version 1.0 . Remarks . None. #define SYS_WSS_HTTP_VERSION_1_0 0x0100 . SYS_WSS_HTTP_VERSION_1_1 . Summary . HTTP version 1.1 . Remarks . None. #define SYS_WSS_HTTP_VERSION_1_1 0x0101 . SYS_WSS_STATUS_CODE_LEN . Summary . Closing Status code lenth as per RFC6455. Remarks . None. #define SYS_WSS_STATUS_CODE_LEN 2 . SYS_WSS_GUID . Summary . WebSocket GUID as per Section 1.3 of RFC 6455. Remarks . None. #define SYS_WSS_GUID \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\" . SYS_WSS_CONFIG . Summary . Used for passing on the configuration(port and TLS) for socket connection to be used for Web Socket Server connections. Remarks . None. typedef struct { unsigned int port; //port used by the WSS service. bool isTLSEnabled; //TLS enabled? } SYS_WSS_CONFIG; . SYS_WSS_HANDSHAKE_CTXT . Summary . Stores the client/server handshake information. Remarks . None. typedef struct { uint16_t http_version; //HTTP version specified in the client handshake uint8_t ws_version; //Web socket version specified in the client handshake bool upgradeWebSocket; //If upgrade websocket field specified in the client handshake bool origin; //If origin field specified in the client handshake bool connectionUpgrade; //If upgrade field present in the client handshake bool iskey; //If websocket key is present in the client handshake char clientKey[SYS_WSS_CLIENT_KEY_SIZE + 1]; //Client key char serverKey[SYS_WSS_SERVER_KEY_SIZE + 1]; // Server key } SYS_WSS_HANDSHAKE_CTXT; . SYS_WSS_FRAME_HEADER . Summary . Identifies the frame format as defined by RFC6455. Remarks . None. typedef __PACKED_STRUCT { uint8_t opcode : 4; //byte0, Opcode as defined by RFC6455 uint8_t resvd : 3; //Reserved bits as defined by RFC6455 uint8_t fin : 1; // fin bit as defined by RFC6455.Indicates that this is the final fragment in a message.0=first frame, 1= final frame uint8_t payloadLen : 7; //byte1, Payload length as defined by the RFC6455.It can be 7 bits, 7+16 bits, or 7+64 bits. uint8_t mask : 1; //Defines whether the \"Payload data\" is masked. 1=masked,0=not masked uint8_t extPayloadLen[]; //byte2,Extended payload length, I can be 16 or 64 bits based on the payloadLen } SYS_WSS_FRAME_HEADER; . SYS_WSS_RXDATA . Summary . Stores the data received from the client along with the datalength.. Remarks . None. typedef struct { uint8_t * data; //Pointer to the rx data buffer int64_t datalen; //length of the received data } SYS_WSS_RXDATA; . SYS_WSS_RESULT . Summary . Identifies the return values for the WSS system service APIs. Remarks . None. typedef enum { SYS_WSS_SUCCESS = 0, //successful execution SYS_WSS_FAILURE = 1, //Failure in execution SYS_WSS_ERROR_INVALID_REQUEST, //Failure in validation of the client handshake SYS_WSS_ERROR_INVALID_KEY, //Failure in validation of the client handshake SYS_WSS_ERROR_INVALID_FRAME, //Failure in validation of the client request } SYS_WSS_RESULT; . SYS_WSS_STATE . Summary . Identifies the state machine values of the WSS system service. Remarks . None. typedef enum { SYS_WSS_STATE_CONNECTING = 0, //Handles the processing of the client opening handshake SYS_WSS_STATE_CONNECTED, //State where the data exchanges happen SYS_WSS_STATE_CLOSING, //Handles the processing of the client closing handshake SYS_WSS_STATE_CLOSED, //Connection closed, the initial state of the service } SYS_WSS_STATE; . SYS_WSS_FRAME . Summary . Identifies the frame types as defined by the RFC6455. Remarks . None. typedef enum { SYS_WSS_FRAME_CONTINUATION = 0x00, //Continuation frame - Data frame with opcode 0 SYS_WSS_FRAME_TEXT = 0x01, //Text data frame - Data frame with opcode 1 SYS_WSS_FRAME_BINARY = 0x02, //Binary data frame - Data frame with opcode 2 SYS_WSS_FRAME_CLOSE = 0x08, //Connection close frame - Control frame with opcode 8 SYS_WSS_FRAME_PING = 0x09, //Ping frame - Ping frame with opcode 9 SYS_WSS_FRAME_PONG = 0x0A //Pong frame - Pong frame with opcode 10 } SYS_WSS_FRAME; . SYS_WSS_EVENTS . Summary . Identifies the events reported to the application using the call back function. Remarks . None. typedef enum { SYS_WSS_EVENT_ERR=0, //Reports any error condition SYS_WSS_EVENT_CLIENT_CONNECTING, //Reports the connection request from the client SYS_WSS_EVENT_CLIENT_CONNECTED, //Reports connection completed status SYS_WSS_EVENT_CLIENT_BIN_DATA_RX, //Reports the reception of a binary data SYS_WSS_EVENT_CLIENT_TXT_DATA_RX, //Reports the reception of a text data SYS_WSS_EVENT_CLIENT_PING_RX, //Report the reception of a ping message SYS_WSS_EVENT_CLIENT_PONG_RX, //Reports the reception of a pong message SYS_WSS_EVENT_CLIENT_CLOSE_FRAME_RX, //Reports the reception of a closing handshake SYS_WSS_EVENT_CLIENT_CLOSING, //Reports the connection closing SYS_WSS_EVENT_CLIENT_CLOSED, //Reports the connection closure completion SYS_WSS_EVENT_ERR_INVALID_FRAME, //Reports the reception of an invalid frame SYS_WSS_EVENT_CLIENT_TIMEOUT, //Reports the client connection timeout } SYS_WSS_EVENTS; . SYS_WSS_STATUS_CODE . Summary . Identifies status code to be used in the closing handshake as defined by RF6455. Remarks . None. typedef enum { SYS_WSS_STATUS_CODE_NORMAL_CLOSURE = 1000, SYS_WSS_STATUS_CODE_GOING_AWAY = 1001, SYS_WSS_STATUS_CODE_PROTOCOL_ERROR = 1002, SYS_WSS_STATUS_CODE_UNSUPPORTED_DATA = 1003, SYS_WSS_STATUS_CODE_NO_STATUS_RCVD = 1005, //reserved code, Not to be used in the close frames SYS_WSS_STATUS_CODE_ABNORMAL_CLOSURE = 1006, //reserved, Not to be used in the close frames SYS_WSS_STATUS_CODE_INVALID_PAYLOAD_DATA = 1007, SYS_WSS_STATUS_CODE_POLICY_VIOLATION = 1008, SYS_WSS_STATUS_CODE_MESSAGE_TOO_BIG = 1009, SYS_WSS_STATUS_CODE_MANDATORY_EXT = 1010, SYS_WSS_STATUS_CODE_INTERNAL_ERROR = 1011, SYS_WSS_STATUS_CODE_TLS_HANDSHAKE = 1015 // reserved code, Not to be used in the close frames } SYS_WSS_STATUS_CODE; . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wss/docs/interface.html#data-types-and-constants",
    "relUrl": "/system/wss/docs/interface.html#data-types-and-constants"
  },"87": {
    "doc": "Web Socket Server System Service Interface",
    "title": "Initialization functions",
    "content": "SYS_WSS_Initialize . Function . SYS_MODULE_OBJ SYS_WSS_Initialize(SYS_WSS_CONFIG *config, SYS_WSS_CALLBACK callback, void *cookie) . Summary . Returns SYS_MODULE_OBJ after the successful initialization of data structures of the WSS service. Description . This function is used for initializing the data structures of the WSS service and is called from within the System Task.This function can be called by the application with required arguments. Returns . Returns the address of an array of SYS_MODULE_OBJ which will have the initialization data for all clients. Example . sysWSS_obj = SYS_WSS_Initialize(NULL,NULL,NULL); //Default config, callback and cookie will be taken . Remarks . If the WSS system service is enabled using MHC, then auto generated code will take care of WSS System Service initialization. But the user need to register for the callback function independently. SYS_WSS_Deinitialize . Function . void SYS_WSS_Deinitialize() . Summary . Deinitialization of data structures of the WSS service . Description . This function is used for freeing the allocated data structures for the WSS service.This function can be called by the application with WSS service object handle. Example . SYS_WSS_Deinitialize(&amp;sysWSSObj); . Remarks . None . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wss/docs/interface.html#initialization-functions",
    "relUrl": "/system/wss/docs/interface.html#initialization-functions"
  },"88": {
    "doc": "Web Socket Server System Service Interface",
    "title": "Data Exchange functions",
    "content": "SYS_WSS_sendMessage . Function . SYS_WSS_RESULT SYS_WSS_sendMessage(bool fin, SYS_WSS_FRAME type, uint8_t *data, size_t dataLen, int32_t clientIndex) . Summary . Sends a message to the client indicated by the parameter clientIndex. Returns success/failure after sending the message. Description . This API sends the data provided in the web socket frame format to the client indicated by the parameter clientIndex. Precondition . The connection state of the client indicated by the clientIndex (g_wssSrvcObj[clientIndex].wssState) shall be SYS_WSS_STATE_CONNECTED. Parameters . fin - Fin value as defined by RFC6455 to indicate if the frame is final or continuation frame. 0 = Indicates more messages to follow, the current frame is a continuation frame 1 = Indicates the final frame of the message. type - The data type of the frame , TEXT or BINARY . *data - A pointer to buffer with the data to be sent . dataLen - Length of the data. clientIndex - The clientID, for identifying the client which caused the event to occur. Returns . SYS_WSS_RESULT. Example . SYS_WSS_RESULT res; res = SYS_WSS_sendMessage(1, SYS_WSS_FRAME_TEXT, ((SYS_WSS_RXDATA*) data)-&gt;data, ((SYS_WSS_RXDATA *) data)-&gt;datalen, clientIndex); . Remarks . None. SYS_WSS_register_callback . Function . SYS_WSS_RESULT SYS_WSS_register_callback(SYS_WSS_CALLBACK userCallback, void* cookie); . Summary . API for registering the application callback function with the WSS service. Returns success after successful registration of the callback function. Description . Callback functions may be registered by clients of the WSS service during the initialization using this API. Precondition . None. Parameters . userCallback - A function pointer to the application call back API. event - Data (if any) related to the Event . cookie - A context value, returned untouched to the client when the callback occurs. Returns . SYS_WSS_RESULT. Example . void wss_user_callback(SYS_WSS_EVENTS event, void *data, int32_t clientIndex, void *cookie) { int i = 0; switch (event) { case SYS_WSS_EVENT_CLIENT_CONNECTING: { SYS_CONSOLE_PRINT(\"wssSysServCallback(%d): SYS_WSS_EVENT_CLIENT_CONNECTING\\r\\n\",clientIndex); break; } case SYS_WSS_EVENT_CLIENT_CONNECTED: { SYS_CONSOLE_PRINT(\"wssSysServCallback(%d): SYS_WSS_EVENT_CLIENT_CONNECTED\\r\\n\",clientIndex); break; } case SYS_WSS_EVENT_CLIENT_BIN_DATA_RX: { SYS_CONSOLE_PRINT(\"wssSysServCallback(%d): SYS_WSS_EVENT_CLIENT_BIN_DATA_RX\\r\\n\",clientIndex); for (i = 0; i &lt; ((SYS_WSS_RXDATA*) data)-&gt;datalen; i++) { SYS_CONSOLE_PRINT(\"%X \", ((SYS_WSS_RXDATA*) data)-&gt;data[i]); } SYS_CONSOLE_PRINT(\"\\r\\n\"); //echo server. SYS_WSS_sendMessage(1, SYS_WSS_FRAME_TEXT, ((SYS_WSS_RXDATA*) data)-&gt;data, ((SYS_WSS_RXDATA *) data)-&gt;datalen, clientIndex); break; } case SYS_WSS_EVENT_CLIENT_TXT_DATA_RX: { SYS_CONSOLE_PRINT(\"wssSysServCallback(%d): SYS_WSS_EVENT_CLIENT_TXT_DATA_RX\\r\\n\",clientIndex); for (i = 0; i &lt; ((SYS_WSS_RXDATA *) data)-&gt;datalen; i++) { SYS_CONSOLE_PRINT(\"%c\", ((SYS_WSS_RXDATA*) data)-&gt;data[i]); } SYS_CONSOLE_PRINT(\"\\r\\n\"); // Enable the below statement for echo server //SYS_WSS_sendMessage(1, SYS_WSS_FRAME_TEXT, ((SYS_WSS_RXDATA*) data)-&gt;data, ((SYS_WSS_RXDATA *) data)-&gt;datalen, clientIndex); break; } case SYS_WSS_EVENT_CLIENT_CLOSING: { SYS_CONSOLE_PRINT(\"wssSysServCallback(%d): SYS_WSS_EVENT_CLIENT_CLOSING\\r\\n\",clientIndex); break; } case SYS_WSS_EVENT_CLIENT_CLOSED: { SYS_CONSOLE_PRINT(\"wssSysServCallback(%d): SYS_WSS_EVENT_CLIENT_CLOSED\\r\\n\",clientIndex); break; } case SYS_WSS_EVENT_ERR_INVALID_FRAME: { SYS_CONSOLE_PRINT(\"wssSysServCallback(%d): SYS_WSS_EVENT_ERR_INVALID_FRAME\\r\\n\",clientIndex); break; } case SYS_WSS_EVENT_CLIENT_PING_RX: { SYS_CONSOLE_PRINT(\"wssSysServCallback(%d): SYS_WSS_EVENT_CLIENT_PING_RX\\r\\n\",clientIndex); break; } case SYS_WSS_EVENT_CLIENT_PONG_RX: { SYS_CONSOLE_PRINT(\"wssSysServCallback(%d): SYS_WSS_EVENT_CLIENT_PONG_RX\\r\\n\",clientIndex); break; } case SYS_WSS_EVENT_CLIENT_CLOSE_FRAME_RX: { SYS_CONSOLE_PRINT(\"wssSysServCallback(%d): SYS_WSS_EVENT_CLIENT_CLOSE_FRAME_RX\\r\\n\",clientIndex); break; } case SYS_WSS_EVENT_ERR: { SYS_CONSOLE_PRINT(\"wssSysServCallback(%d): SYS_WSS_EVENT_ERR\\r\\n\",clientIndex); break; } case SYS_WSS_EVENT_CLIENT_TIMEOUT: { SYS_CONSOLE_PRINT(\"wssSysServCallback(%d): SYS_WSS_EVENT_CLIENT_TIMEOUT\\r\\n\",clientIndex); break; } } } . Remarks . None. SYS_WSS_CloseConnection . Function . SYS_WSS_RESULT SYS_WSS_CloseConnection(SYS_WSS_STATUS_CODE code, uint8_t *data, size_t dataLen, int32_t clientIndex); . Summary . Closes the Web Socket connection to the client indicated by the parameter clientIndex. Description . This API initiate the closing handshake with the status code provided and and terminate the Web Socket connection to the client indicated by the parameter clientIndex. Precondition . The connection state of the client indicated by the clientIndex (g_wssSrvcObj[clientIndex].wssState) shall be SYS_WSS_STATE_CONNECTED. Parameters . code - Status code to be send to the client in the closing handshake(SYS_WSS_STATUS_CODE) . *data - A pointer to buffer with the data (if any) related to the connection closure . dataLen - Length of the data . clientIndex - The clientID, for identifying the client which caused the event to occur. Returns . None. Example . SYS_WSS_RESULT res; res =SYS_WSS_CloseConnection(SYS_WSS_STATUS_CODE_UNSUPPORTED_DATA, NULL, 0, 1); . Remarks . None. SYS_WSS_PingClient . Function . SYS_WSS_RESULT SYS_WSS_PingClient( uint8_t *data, size_t dataLen, int32_t clientIndex); . Summary . Sends a ping message to the client indicated by the parameter clientIndex. Description . This API sends a ping message to the client indicated by the parameter clientIndex. Precondition . The connection state of the client indicated by the clientIndex (g_wssSrvcObj[clientIndex].wssState) shall be SYS_WSS_STATE_CONNECTED. Parameters . *data - A pointer to buffer with the data (if any). dataLen - Length of the data . clientIndex - The clientID, for identifying the client which caused the event to occur. Returns . SYS_WSS_RESULT. Example . SYS_WSS_RESULT res; res =SYS_WSS_PingClient(&amp;data, dataLen, 1); . Remarks . None. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wss/docs/interface.html#data-exchange-functions",
    "relUrl": "/system/wss/docs/interface.html#data-exchange-functions"
  },"89": {
    "doc": "Net System Service Interface",
    "title": "Net System Service Interface",
    "content": ". | Data Types and Constants Summary | Initialization functions Summary | Status functions Summary | Setup functions Summary | Data Exchange functions Summary | Data Types and Constants . | SYS_NET_INTF_WIFI | SYS_NET_INTF_ETHERNET | SYS_NET_MODE_CLIENT | SYS_NET_MODE_SERVER | SYS_NET_MAX_HOSTNAME_LEN | SYS_NET_IP_PROT_UDP | SYS_NET_IP_PROT_TCP | SYS_NET_MAX_NUM_OF_SOCKETS | SYS_NET_DEFAULT_TLS_ENABLE | SYS_NET_DEFAULT_AUTO_RECONNECT | SYS_NET_DEFAULT_NET_INTF | NET_CFG | NET_DATA | SYS_NET_Config | SYS_NET_STATUS | SYS_NET_EVENT | SYS_NET_CTRL_MSG | SYS_NET_RESULT | . | Initialization functions . | SYS_NET_Initialize | SYS_NET_Deinitialize | . | Status functions . | SYS_NET_GetStatus | . | Setup functions . | SYS_NET_Open | SYS_NET_Close | SYS_NET_Task | SYS_NET_CtrlMsg | SYS_NET_SetConfigParam | . | Data Exchange functions . | SYS_NET_SendMsg | SYS_NET_RecvMsg | SYS_NET_CALLBACK | . | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/net/docs/interface.html",
    "relUrl": "/system/net/docs/interface.html"
  },"90": {
    "doc": "Net System Service Interface",
    "title": "Data Types and Constants Summary",
    "content": "| Name | Description | . | SYS_NET_INTF_WIFI | Net Socket Intf - Wifi | . | SYS_NET_INTF_ETHERNET | Net Socket Intf - Ethernet | . | SYS_NET_MODE_CLIENT | Net Socket Mode - Client | . | SYS_NET_MODE_SERVER | Net Socket Mode - Server | . | SYS_NET_MAX_HOSTNAME_LEN | Max Host Name Length | . | SYS_NET_IP_PROT_UDP | Ip Protocol Mode - UDP | . | SYS_NET_IP_PROT_TCP | Ip Protocol Mode - TCP | . | SYS_NET_MAX_NUM_OF_SOCKETS | Number of Instances Supported by the NET System Service | . | SYS_NET_DEFAULT_TLS_ENABLE | Default Values for TLS - False | . | SYS_NET_DEFAULT_AUTO_RECONNECT | Default Values for Auto Reconnect - True | . | SYS_NET_DEFAULT_NET_INTF | Default Values for Interface - 0 (Wifi) | . | NET_CFG | AppDebug Flow for the Logs - Configuration | . | NET_DATA | AppDebug Flow for the Logs - Data | . | SYS_NET_Config | Used for passing on the configuration related to the Net Socket that needs | . | SYS_NET_STATUS | Identifies the current status of the Sys Net Instance. | . | SYS_NET_EVENT | Identifies the event type for which the User Callback is called. | . | SYS_NET_CTRL_MSG | Identifies the control message for which the User has called the SYS_NET_CtrlMsg(). | . | SYS_NET_RESULT | Identifies the return values for the Sys Net APIs. | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/net/docs/interface.html#data-types-and-constants-summary",
    "relUrl": "/system/net/docs/interface.html#data-types-and-constants-summary"
  },"91": {
    "doc": "Net System Service Interface",
    "title": "Initialization functions Summary",
    "content": "| Name | Description | . | SYS_NET_Initialize | Returns success/ failure for initialization of data structures of the NET service | . | SYS_NET_Deinitialize | Deinitialization of data structures of the NET service | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/net/docs/interface.html#initialization-functions-summary",
    "relUrl": "/system/net/docs/interface.html#initialization-functions-summary"
  },"92": {
    "doc": "Net System Service Interface",
    "title": "Status functions Summary",
    "content": "| Name | Description | . | SYS_NET_GetStatus | Returns System NET instance status. | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/net/docs/interface.html#status-functions-summary",
    "relUrl": "/system/net/docs/interface.html#status-functions-summary"
  },"93": {
    "doc": "Net System Service Interface",
    "title": "Setup functions Summary",
    "content": "| Name | Description | . | SYS_NET_Open | Opens a new NET System Service instance. | . | SYS_NET_Close | Deinitializes the specific instance of the NET System service | . | SYS_NET_Task | Executes the SYS NET service state machine for the instance | . | SYS_NET_CtrlMsg | Returns success/ failure for the disconnect/ reconnect operation asked by the user. | . | SYS_NET_SetConfigParam | Returns success on setting a configuration parameter for Net System Service. | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/net/docs/interface.html#setup-functions-summary",
    "relUrl": "/system/net/docs/interface.html#setup-functions-summary"
  },"94": {
    "doc": "Net System Service Interface",
    "title": "Data Exchange functions Summary",
    "content": "| Name | Description | . | SYS_NET_SendMsg | Returns No of Bytes sent to peer using the System NET instance. | . | SYS_NET_RecvMsg | Returns No of Bytes received from peer using the System NET instance. | . | SYS_NET_CALLBACK | Pointer to a Net system service callback function. | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/net/docs/interface.html#data-exchange-functions-summary",
    "relUrl": "/system/net/docs/interface.html#data-exchange-functions-summary"
  },"95": {
    "doc": "Net System Service Interface",
    "title": "Data Types and Constants",
    "content": "SYS_NET_INTF_WIFI . Summary . Net Socket Intf - Wifi . Remarks . None. #define SYS_NET_INTF_WIFI 0 // Wifi Intf Value . SYS_NET_INTF_ETHERNET . Summary . Net Socket Intf - Ethernet . Remarks . None. #define SYS_NET_INTF_ETHERNET 1 // Ethernet Intf Value . SYS_NET_MODE_CLIENT . Summary . Net Socket Mode - Client . Remarks . None. #define SYS_NET_MODE_CLIENT 0 // Client Mode Value . SYS_NET_MODE_SERVER . Summary . Net Socket Mode - Server . Remarks . None. #define SYS_NET_MODE_SERVER 1 // Server Mode Value . SYS_NET_MAX_HOSTNAME_LEN . Summary . Max Host Name Length . Remarks . None. #define SYS_NET_MAX_HOSTNAME_LEN 256 // Max Host Name Length . SYS_NET_IP_PROT_UDP . Summary . Ip Protocol Mode - UDP . Remarks . None. #define SYS_NET_IP_PROT_UDP 0 // UDP - Ip Protocol Value . SYS_NET_IP_PROT_TCP . Summary . Ip Protocol Mode - TCP . Remarks . None. #define SYS_NET_IP_PROT_TCP 1 // TCP - Ip Protocol Value . SYS_NET_MAX_NUM_OF_SOCKETS . Summary . Number of Instances Supported by the NET System Service . Remarks . None. #define SYS_NET_MAX_NUM_OF_SOCKETS 2 // umber of Instances Supported by the NET System Service . SYS_NET_DEFAULT_TLS_ENABLE . Summary . Default Values for TLS - False . Remarks . None. #define SYS_NET_DEFAULT_TLS_ENABLE 0 // TLS Disabled by default . SYS_NET_DEFAULT_AUTO_RECONNECT . Summary . Default Values for Auto Reconnect - True . Remarks . None. #define SYS_NET_DEFAULT_AUTO_RECONNECT 1 // Auto Reconnect Enabled by default . SYS_NET_DEFAULT_NET_INTF . Summary . Default Values for Interface - 0 (Wifi) . Remarks . None. #define SYS_NET_DEFAULT_NET_INTF SYS_NET_INTF_WIFI // Interface 0 by default . NET_CFG . Summary . AppDebug Flow for the Logs - Configuration . Remarks . None. #define NET_CFG 0x1 // App Debug Print Flows - CFG . NET_DATA . Summary . AppDebug Flow for the Logs - Data . Remarks . None. #define NET_DATA 0x2 // App Debug Print Flows - DATA . SYS_NET_Config . Summary . Used for passing on the configuration related to the Net Socket that needs to be opened via the Sys Net Service . Remarks . None. typedef struct { // Net Socket Mode to Open - SYS_NET_MODE_CLIENT(0)/ SYS_NET_MODE_SERVER(1) uint8_t mode; // WiFi or Eth Interface to be used for Opening the socket uint8_t intf; // Net Server Port uint16_t port; // Reconnect in case of disconnection happening - 1(Reconnect Enabled)/ 0(Reconnect Disabled) bool enable_reconnect; // Net Socket with 1(TLS Enabled)/ 0(TLS Disabled) bool enable_tls; // Socket IP Protocol - SYS_NET_IP_PROT_UDP(0) or SYS_NET_IP_PROT_TCP(1) uint8_t ip_prot; // Host Name - could have the server name or IP char host_name[SYS_NET_MAX_HOSTNAME_LEN]; } SYS_NET_Config; . SYS_NET_STATUS . Summary . Identifies the current status of the Sys Net Instance. Remarks . None. typedef enum { // Net Instance is Idle/ Not in Use SYS_NET_STATUS_IDLE = 0, // Lower Layer is Down SYS_NET_STATUS_LOWER_LAYER_DOWN, // Resolving DNS of NET Server for the Client to connect SYS_NET_STATUS_RESOLVING_DNS, // Net Server IP Available for the Client to connect SYS_NET_STATUS_DNS_RESOLVED, // Net Server Awaiting Connection SYS_NET_STATUS_SERVER_AWAITING_CONNECTION, // Net Client connecting to Server SYS_NET_STATUS_CLIENT_CONNECTING, // Net Client Waiting for SNTP Time Stamp SYS_NET_STATUS_WAIT_FOR_SNTP, // Net Client Starting TLS Negotiations SYS_NET_STATUS_TLS_NEGOTIATING, // Net Instance TLS Negotiation Failed SYS_NET_STATUS_TLS_NEGOTIATION_FAILED, // Net Instance connected to the peer SYS_NET_STATUS_CONNECTED, // Net Instance Failed to open socket SYS_NET_STATUS_SOCK_OPEN_FAILED, // Net Instance Failed to Resolve DNS SYS_NET_STATUS_DNS_RESOLVE_FAILED, // Net Instance in disconnected state SYS_NET_STATUS_DISCONNECTED, // Net Instance received FIN from peer SYS_NET_STATUS_PEER_SENT_FIN, // Net Instance connected to the peer but the lower layer is down SYS_NET_STATUS_CONNECTED_LL_DOWN, } SYS_NET_STATUS; . SYS_NET_EVENT . Summary . Identifies the event type for which the User Callback is called. Remarks . None. typedef enum { // NET Socket connected to Peer SYS_NET_EVNT_CONNECTED = 0, // NET Socket disconnected SYS_NET_EVNT_DISCONNECTED, // Received Data on NET Socket connected to Peer SYS_NET_EVNT_RCVD_DATA, // SSL Negotiation Failed SYS_NET_EVNT_SSL_FAILED, // DNS Resolve Failed SYS_NET_EVNT_DNS_RESOLVE_FAILED, // Socket Open Failed SYS_NET_EVNT_SOCK_OPEN_FAILED, // Received only in Connected State - Lower Layer Down SYS_NET_EVNT_LL_INTF_DOWN, // Received only in Connected State - Lower Layer Up SYS_NET_EVNT_LL_INTF_UP, // TCP Server is awaiting connection SYS_NET_EVNT_SERVER_AWAITING_CONNECTION, } SYS_NET_EVENT; . SYS_NET_CTRL_MSG . Summary . Identifies the control message for which the User has called the SYS_NET_CtrlMsg(). Remarks . None. typedef enum { // NET Socket should reconnect to Peer, the User is expected to pass pointer to SYS_NET_Config for the configuration of the new Connection. SYS_NET_CTRL_MSG_RECONNECT = 0, // NET Socket disconnect request from the user SYS_NET_CTRL_MSG_DISCONNECT, } SYS_NET_CTRL_MSG; . SYS_NET_RESULT . Summary . Identifies the return values for the Sys Net APIs. Remarks . None. typedef enum { // Success SYS_NET_SUCCESS = 0, // Failure SYS_NET_FAILURE = -1, // Sys NET Service Down SYS_NET_SERVICE_DOWN = -2, // Enough space not available in the transmit buffer to send the message. Application should try again later SYS_NET_PUT_NOT_READY = -3, // Sys NET No Data Available for receiving SYS_NET_GET_NOT_READY = -4, // Sys NET Semaphore Operation of Take/ Release Failed SYS_NET_SEM_OPERATION_FAILURE = -5, // Sys NET Invalid Handle SYS_NET_INVALID_HANDLE = -6, } SYS_NET_RESULT; . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/net/docs/interface.html#data-types-and-constants",
    "relUrl": "/system/net/docs/interface.html#data-types-and-constants"
  },"96": {
    "doc": "Net System Service Interface",
    "title": "Initialization functions",
    "content": "SYS_NET_Initialize . Function . int32_t SYS_NET_Initialize() . Summary . Returns success/ failure for initialization of data structures of the NET service . Description . This function is used for initializing the data structures of the NET service and is called from within the System Task. Returns . SYS_NET_SUCCESS - Indicates the data structures were initialized successfully . SYS_NET_FAILURE - Indicates that it failed to initialize the data structures. Example . if( SYS_NET_Initialize() == SYS_NET_SUCCESS) { } . Remarks . If the Net system service is enabled using MHC, then auto generated code will take care of Net System Service initialization. SYS_NET_Deinitialize . Function . void SYS_NET_Deinitialize() . Summary . Deinitialization of data structures of the NET service . Description . This function is used for freeing the allocated data structures for the NET service. Example . SYS_NET_Deinitialize() . Remarks . None . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/net/docs/interface.html#initialization-functions",
    "relUrl": "/system/net/docs/interface.html#initialization-functions"
  },"97": {
    "doc": "Net System Service Interface",
    "title": "Status functions",
    "content": "SYS_NET_GetStatus . Function . SYS_NET_STATUS SYS_NET_GetStatus ( SYS_MODULE_OBJ object ) . Summary . Returns System NET instance status. Description . This function returns the current status of the System NET instance. Precondition . SYS_NET_Open should have been called before calling this function . Parameters . object - SYS NET object handle, returned from SYS_NET_Open . Returns . SYS_NET_STATUS . Example . // Handle \"objSysNet\" value must have been returned from SYS_NET_Open. if (SYS_NET_GetStatus (objSysNet) == SYS_NET_STATUS_SERVER_AWAITING_CONNECTION) { // NET system service is initialized and the NET server is ready to accept new connection. } . Remarks . None. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/net/docs/interface.html#status-functions",
    "relUrl": "/system/net/docs/interface.html#status-functions"
  },"98": {
    "doc": "Net System Service Interface",
    "title": "Setup functions",
    "content": "SYS_NET_Open . Function . SYS_MODULE_OBJ SYS_NET_Open (SYS_NET_Config *cfg, SYS_NET_CALLBACK Net_cb, void *cookie) . Summary . Opens a new NET System Service instance. Description . This function opens the instance of the NET System Service. Parameters . cfg - Configuration for which the NET Socket needs to be opened Net_cb - Function pointer to the Callback to be called in case of an event cookie - Cookie passed as one of the params in the Callback which was registered by the user in SYS_NET_Open Returns . Returns: If successful, returns a valid handle to an object. Otherwise, it returns SYS_MODULE_OBJ_INVALID. Example . SYS_NET_Config g_NetServCfg; SYS_MODULE_OBJ g_NetServHandle; memset(&amp;g_NetServCfg, 0, sizeof(g_NetServCfg)); g_NetServCfg.mode = SYS_NET_MODE_CLIENT; strcpy(g_NetServCfg.host_name, APP_HOST_NAME); g_NetServCfg.port = APP_HOST_PORT; g_NetServCfg.enable_tls = 0; g_NetServCfg.ip_prot = SYS_NET_IP_PROT_UDP; g_NetServHandle = SYS_NET_Open(&amp;g_NetServCfg, NetServCallback, 0); if (g_NetServHandle == SYS_MODULE_OBJ_INVALID) { // Handle error } . Remarks . This routine should be called everytime a user wants to open a new NET socket. Also, in case the user is opening a Client Socket, and the under lying network interface is Wifi in AP Mode, it is recommended that the call be made only after the STA running the server connects to the AP on the Wifi interface. SYS_NET_Close . Function . void SYS_NET_Close ( SYS_MODULE_OBJ object ) . Summary . Deinitializes the specific instance of the NET System service . Description . This function deinitializes the specific module instance disabling its operation. Resets all of the internal data structures and fields for the specified instance to the default settings. Precondition . The SYS_NET_Open function should have been called before calling this function. Parameters . object - SYS NET object handle, returned from SYS_NET_Open . Returns . None. Example . // Handle \"objSysNet\" value must have been returned from SYS_NET_Open. SYS_NET_Close (objSysNet); . Remarks . Once the Open operation has been called, the Close operation must be called before the Open operation can be called again. SYS_NET_Task . Function . void SYS_NET_Task(SYS_MODULE_OBJ obj) . Summary . Executes the SYS NET service state machine for the instance . Description . This function ensures that the Net system service is able to execute its state machine to process any messages and invoke the user callback for any events. Precondition . SYS_NET_Open should have been called before calling this function . Parameters . obj - SYS NET object handle, returned from SYS_NET_Open . Returns . None . Example . // Handle \"objSysNet\" value must have been returned from SYS_NET_Open. while(1) { ... SYS_NET_Task(objSysNet); ... } . SYS_NET_CtrlMsg . Function . int32_t SYS_NET_CtrlMsg(SYS_MODULE_OBJ obj, SYS_NET_CTRL_MSG msg_type, void *data, uint16_t len) . Summary . Returns success/ failure for the disconnect/ reconnect operation asked by the user. Description . This function is used for disconnecting or reconnecting to the peer. Precondition . SYS_NET_Open should have been called. Parameters . obj - SYS NET object handle, returned from SYS_NET_Open msg_type - valid Msg Type SYS_NET_CTRL_MSG . data - valid data buffer pointer based on the Msg Type - NULL for DISCONNECT, Pointer to SYS_NET_Config for RECONNECT len - length of the data buffer the pointer is pointing to . Returns . SYS_NET_SUCCESS - Indicates that the Request was catered to successfully . SYS_NET_FAILURE - Indicates that the Request failed . Example . // Handle \"objSysNet\" value must have been returned from SYS_NET_Open. if( SYS_NET_CtrlMsg(objSysNet, SYS_NET_CTRL_MSG_DISCONNECT, NULL, 0) == SYS_NET_SUCCESS) { } . Remarks . None. SYS_NET_SetConfigParam . Function . int32_t SYS_NET_SetConfigParam(SYS_MODULE_OBJ obj, uint32_t paramType, void *data) . Summary . Returns success on setting a configuration parameter for Net System Service. Description . This function is currently used for enabling/ disabling the Auto Reconnect feature for the Net Socket. Precondition . SYS_NET_Open should have been called. Parameters . obj - SYS NET object handle, returned from SYS_NET_Open paramType - Reserved for future use data - 0/ 1 currently used only for enabling/ disabling the auto reconnect feature . Returns . SYS_NET_SUCCESS - Indicates that the Request was catered to successfully . Example . bool auto_reconnect = true; // Handle \"objSysNet\" value must have been returned from SYS_NET_Open. if( SYS_NET_SetConfigParam(objSysNet, 0, &amp;auto_reconnect) == SYS_NET_SUCCESS) { } . Remarks . None. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/net/docs/interface.html#setup-functions",
    "relUrl": "/system/net/docs/interface.html#setup-functions"
  },"99": {
    "doc": "Net System Service Interface",
    "title": "Data Exchange functions",
    "content": "SYS_NET_SendMsg . Function . int32_t SYS_NET_SendMsg(SYS_MODULE_OBJ obj, uint8_t *buffer, uint16_t len) . Summary . Returns No of Bytes sent to peer using the System NET instance. Description . This function returns the number of bytes transmitted to the peer. Precondition . SYS_NET_Open should have been called. Parameters . object - SYS NET object handle, returned from SYS_NET_Open data - valid data buffer pointer len - length of the data to be transmitted . Returns . SYS_NET_SERVICE_DOWN - Indicates that the System NET instance is not connected to the peer . SYS_NET_PUT_NOT_READY - Indicates that the System NET instance Put is NOT ready . SYS_NET_PUT_BUFFER_NOT_ENOUGH - Indicates that the System NET instance cannot transmit as the available buffer is less than the bytes to be transmitted . Positive Non-Zero - Indicates the number of bytes transmitted to the peer . Example . // Handle \"objSysNet\" value must have been returned from SYS_NET_Open. while(SYS_NET_SendMsg(objSysNet, \"hello\", 5) &lt;= 0); . Remarks . None. SYS_NET_RecvMsg . Function . int32_t SYS_NET_RecvMsg(SYS_MODULE_OBJ obj, void *data, uint16_t len) . Summary . Returns No of Bytes received from peer using the System NET instance. Description . This function returns the number of bytes received from the peer. Precondition . SYS_NET_Open should have been called. Parameters . obj - SYS NET object handle, returned from SYS_NET_Open data - valid data buffer pointer len - length of the data to be transmitted . Returns . SYS_NET_SERVICE_DOWN - Indicates that the System NET instance is not connected to the peer . SYS_NET_GET_NOT_READY - Indicates that the System NET instance No Data to GET . Positive Non-Zero - Indicates the number of bytes received from the peer, which may be less than the “len” of the buffer passed as the param. Example . // Handle \"objSysNet\" value must have been returned from SYS_NET_Open. int32_t len = 32; uint8_t buffer[32] = {0}; len = SYS_NET_RecvMsg(objSysNet, buffer, len); if(len &gt; 0) { } . Remarks . None. SYS_NET_CALLBACK . Function . void (*SYS_NET_CALLBACK) (uint32_t event, void *data, void* cookie) . Summary . Pointer to a Net system service callback function. Description . This data type defines a pointer to a Net service callback function, thus defining the function signature. Callback functions may be registered by clients of the net service when opening a Net socket via the Initialize call. Precondition . Is a part of the Net service initialization using the SYS_NET_Open function. Parameters . event - An event (SYS_NET_EVENT) for which the callback was called. data - Data (if any) related to the Event cookie - A context value, returned untouched to the client when the callback occurs. Returns . None. Example . void NetServCallback(uint32_t event, void *data, void* cookie, ) { switch(event) { case SYS_NET_EVNT_CONNECTED: { SYS_CONSOLE_PRINT(\"NetServCallback(): Status UP\"); while(SYS_NET_SendMsg(g_NetServHandle, \"hello\", 5) == 0); break; } case SYS_NET_EVNT_DISCONNECTED: { SYS_CONSOLE_PRINT(\"NetServCallback(): Status DOWN\"); break; } case SYS_NET_EVNT_RCVD_DATA: { int32_t len = 32; uint8_t buffer[32] = {0}; len = SYS_NET_RecvMsg(g_NetServHandle, buffer, len); SYS_CONSOLE_PRINT(\"NetServCallback(): Data Rcvd = %s\", buffer); break; } } } . Remarks . None. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/net/docs/interface.html#data-exchange-functions",
    "relUrl": "/system/net/docs/interface.html#data-exchange-functions"
  },"100": {
    "doc": "Wi-Fi System Service Interface",
    "title": "Wi-Fi System Service Interface",
    "content": ". | Data Types and Constants Summary | Initialization functions Summary | Status functions Summary | Setup functions Summary | Data Types and Constants . | SYS_WIFI_AUTH | SYS_WIFI_CTRLMSG | SYS_WIFI_MODE | SYS_WIFI_SCAN_MODES | SYS_WIFI_STA_CONFIG | SYS_WIFI_STA_APP_INFO | SYS_WIFI_AP_CONFIG | SYS_WIFI_CONFIG | SYS_WIFI_SCAN_CONFIG | SYS_WIFI_STATUS | SYS_WIFI_RESULT | SYS_WIFI_CALLBACK | . | Initialization functions . | SYS_WIFI_Initialize | SYS_WIFI_Deinitialize | . | Status functions . | SYS_WIFI_GetStatus | . | Setup functions . | SYS_WIFI_Tasks | SYS_WIFI_CtrlMsg | . | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifi/docs/interface.html",
    "relUrl": "/system/wifi/docs/interface.html"
  },"101": {
    "doc": "Wi-Fi System Service Interface",
    "title": "Data Types and Constants Summary",
    "content": "| Name | Description | . | SYS_WIFI_AUTH | Identifies the type of Authentication requested. | . | SYS_WIFI_CTRLMSG | Identifies the control message for which the client has called | . | SYS_WIFI_MODE | Identifies the Wi-Fi operating mode. | . | SYS_WIFI_SCAN_MODES | Identifies the Wi-Fi scanning mode. | . | SYS_WIFI_STA_CONFIG | Configuration of station parameters. | . | SYS_WIFI_STA_APP_INFO | Information related to connected station shared with Application. | . | SYS_WIFI_AP_CONFIG | Configuration of access point mode parameters. | . | SYS_WIFI_CONFIG | Configuration of device configuration parameters. | . | SYS_WIFI_SCAN_CONFIG | Configuration of ssid scan parameters. | . | SYS_WIFI_STATUS | Result of a Wi-Fi service client interface get status | . | SYS_WIFI_RESULT | Result of a Wi-Fi system service client interface operation. | . | SYS_WIFI_CALLBACK | Pointer to a Wi-Fi system service callback function. | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifi/docs/interface.html#data-types-and-constants-summary",
    "relUrl": "/system/wifi/docs/interface.html#data-types-and-constants-summary"
  },"102": {
    "doc": "Wi-Fi System Service Interface",
    "title": "Initialization functions Summary",
    "content": "| Name | Description | . | SYS_WIFI_Initialize | Initializes the System Wi-Fi module. | . | SYS_WIFI_Deinitialize | Deinitializes the module instance of the system Wi-Fi service | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifi/docs/interface.html#initialization-functions-summary",
    "relUrl": "/system/wifi/docs/interface.html#initialization-functions-summary"
  },"103": {
    "doc": "Wi-Fi System Service Interface",
    "title": "Status functions Summary",
    "content": "| Name | Description | . | SYS_WIFI_GetStatus | Returns Wi-Fi system service status. | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifi/docs/interface.html#status-functions-summary",
    "relUrl": "/system/wifi/docs/interface.html#status-functions-summary"
  },"104": {
    "doc": "Wi-Fi System Service Interface",
    "title": "Setup functions Summary",
    "content": "| Name | Description | . | SYS_WIFI_Tasks | Maintains the Wi-Fi System tasks and functionalities. | . | SYS_WIFI_CtrlMsg | Returns success/ failure for the connect/disconnect/scan operation asked by client. | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifi/docs/interface.html#setup-functions-summary",
    "relUrl": "/system/wifi/docs/interface.html#setup-functions-summary"
  },"105": {
    "doc": "Wi-Fi System Service Interface",
    "title": "Data Types and Constants",
    "content": "SYS_WIFI_AUTH . Summary . Identifies the type of Authentication requested. Description . Identifies the type of Authentication requested. Remarks . None. typedef enum { /* Requesting a Open Authentication types */ SYS_WIFI_OPEN = 1, /* Requesting a WEP Authentication types */ SYS_WIFI_WEP, /* Requesting a WPA/WPA2(Mixed) Authentication types */ SYS_WIFI_WPAWPA2MIXED, /* Requesting a WPA2 Authentication types */ SYS_WIFI_WPA2, /* Requesting a WPA2/WPA3(Mixed) Authentication types */ SYS_WIFI_WPA2WPA3MIXED, /* Requesting a WPA3 Authentication types */ SYS_WIFI_WPA3 } SYS_WIFI_AUTH ; . SYS_WIFI_CTRLMSG . Summary . Identifies the control message for which the client has called the SYS_WIFI_CtrlMsg(). Description . Identifies the control message for which the client has called the SYS_WIFI_CtrlMsg(). Remarks . The different control messages which can be invoked by the client. typedef enum { /* Control message type for requesting a Wi-Fi Configuration set(for connect) */ SYS_WIFI_CONNECT = 0, /*Control message type for requesting a Wi-Fi device disconnect */ SYS_WIFI_DISCONNECT, /* Control message type for requesting a Wi-Fi configuration information */ SYS_WIFI_GETWIFICONFIG, /* Control message type for updating a Provisioning Wi-Fi configuration information */ SYS_WIFI_PROVCONFIG, /* Control message type for registering a Wi-Fi system service client callback */ SYS_WIFI_REGCALLBACK, /* Control message type for requesting a Wi-Fi Scan configuration information */ SYS_WIFI_GETSCANCONFIG, /* Control message type for requesting a Wi-Fi scan. In Scan request, client can include Scan configuration strucure if desired*/ SYS_WIFI_SCANREQ, /*Control message type for requesting a Wi-Fi driver handle */ SYS_WIFI_GETDRVHANDLE, } SYS_WIFI_CTRLMSG ; . SYS_WIFI_MODE . Summary . Identifies the Wi-Fi operating mode. Description . Identifies the Wi-Fi operating mode. Remarks . Client need to manually reboot device after switching mode. For example, changing operating mode to STA to AP or AP to STA. typedef enum { /* Requesting a operating mode a station */ SYS_WIFI_STA = 0, /* Requesting a operating mode a AP access point. */ SYS_WIFI_AP } SYS_WIFI_MODE ; . SYS_WIFI_SCAN_MODES . Summary . Identifies the Wi-Fi scanning mode. Description . Identifies the Wi-Fi scanning mode. Remarks . None . typedef enum { /* Requesting Passive Scan Mode */ SYS_WIFI_SCAN_MODE_PASSIVE = 0, /* Requesting Active Scan Mode */ SYS_WIFI_SCAN_MODE_ACTIVE } SYS_WIFI_SCAN_MODES ; . SYS_WIFI_STA_CONFIG . Summary . Configuration of station parameters. Description . Configuration of station parameters. Remarks . None. typedef struct { /* Wi-Fi station mode SSID */ uint8_t ssid[32]; /* Wi-Fi station mode passphrase */ uint8_t psk[64]; /* Wi-Fi station mode authentication type */ SYS_WIFI_AUTH authType; /* Wi-Fi station mode channel number. values of channel: 0 - scan and connect to all the channels 1 to 13 - - scan and connect to specified channel */ uint8_t channel; /* Wi-Fi station mode auto connect flag. value 0- Don't connect to AP, wait for client request. value 1- Connect to AP immediately */ bool autoConnect; } SYS_WIFI_STA_CONFIG; . SYS_WIFI_STA_APP_INFO . Summary . Information related to connected station shared with Application. Description . Information (MAC Address, IP Address) related to connected station. Remarks . None. typedef struct { /* IP Address of the station */ IPV4_ADDR ipAddr; /* MAC Address of the station */ uint8_t macAddr[6]; } SYS_WIFI_STA_APP_INFO; . SYS_WIFI_AP_CONFIG . Summary . Configuration of access point mode parameters. Description . Configuration of access point mode parameters. Remarks . None. typedef struct { /* Wi-Fi access point mode SSID */ uint8_t ssid[32]; /* Wi-Fi access point mode passphrase */ uint8_t psk[64]; /* Wi-Fi access point mode authentication type */ SYS_WIFI_AUTH authType; /* Wi-Fi access point mode channel number. values of channel: 1 to 13 - - operating channel of access point */ uint8_t channel; /* Wi-Fi access point mode SSID visibility value of ssidVisibility: 0 - Hidden SSID 1 - broadcast the SSID */ bool ssidVisibility; } SYS_WIFI_AP_CONFIG; . SYS_WIFI_CONFIG . Summary . Configuration of device configuration parameters. Description . Configuration of device configuration parameters. Remarks . None. typedef struct { /* Operating mode of the device */ SYS_WIFI_MODE mode; /* Flag to identify if configuration needs to be saved in NVM. 0 - Do not save configuration in NVM. 1 - Save configuration in NVM. */ uint8_t saveConfig; /* Country Code configuration */ uint8_t countryCode[6]; /* Wi-Fi station mode configuration structure */ SYS_WIFI_STA_CONFIG staConfig; /* Wi-Fi access point mode configuration structure */ SYS_WIFI_AP_CONFIG apConfig; }SYS_WIFI_CONFIG; . SYS_WIFI_SCAN_CONFIG . Summary . Configuration of ssid scan parameters. Description . Configuration of ssid scan parameters. Remarks . None. typedef struct { /* Wi-Fi Channel no for Scan request. values of channel: 0 - scan all the channels 1 to 13 - - scan on specified channel */ uint8_t channel; /* Scanning mode of the device */ SYS_WIFI_SCAN_MODES mode; /* List of SSIDs for scanning */ char * pSsidList; /* Delimiter used for separating names in the \"pSsidList\" */ char delimChar; /* bitwise scanning masks*/ uint16_t chan24Mask; /* Number of slots (minimum is 2). */ uint8_t numSlots; /* Time spent on each active channel probing for BSS's. */ uint16_t activeSlotTime; /* Time spent on each passive channel listening for beacons. */ uint16_t passiveSlotTime; /* Number of probes per slot. */ uint8_t numProbes; /* The scan matching mode can be to stop on first match or match all. */ uint8_t matchMode; /* Scan callback handler that gets triggered from PIC32MZW1 driver */ void * pNotifyCallback; } SYS_WIFI_SCAN_CONFIG; . SYS_WIFI_STATUS . Summary . Result of a Wi-Fi service client interface get status operation(SYS_WIFI_GetStatus()). Description . Result of a Wi-Fi service client interface get status operation(SYS_WIFI_GetStatus()). Remarks . None. typedef enum { /* Wi-Fi system service is in init status */ SYS_WIFI_STATUS_INIT = 1, /* Wi-Fi system service is in driver open status */ SYS_WIFI_STATUS_WDRV_OPEN_REQ, /* Wi-Fi system service is in auto connect wait status */ SYS_WIFI_STATUS_AUTOCONNECT_WAIT, /* Wi-Fi system service is in wait for TCPIP stack init status */ SYS_WIFI_STATUS_TCPIP_WAIT_FOR_TCPIP_INIT, /* Wi-Fi system service is in Wi-Fi connect request status */ SYS_WIFI_STATUS_CONNECT_REQ, /* In AP mode,Wi-Fi system service is in wait for AP IP address */ SYS_WIFI_STATUS_WAIT_FOR_AP_IP, /* In AP mode,Wi-Fi system service is in wait for connecting STA IP address */ SYS_WIFI_STATUS_WAIT_FOR_STA_IP, /* Wi-Fi system service is in TCPIP ready status, waiting for client request.*/ SYS_WIFI_STATUS_TCPIP_READY, /* Wi-Fi system service is in TCPIP error status */ SYS_WIFI_STATUS_TCPIP_ERROR, /* Wi-Fi system service is in config error status */ SYS_WIFI_STATUS_CONFIG_ERROR, /* Wi-Fi system service is in connection error status */ SYS_WIFI_STATUS_CONNECT_ERROR, /* Wi-Fi system service is in not in valid status */ SYS_WIFI_STATUS_NONE =255 } SYS_WIFI_STATUS; . SYS_WIFI_RESULT . Summary . Result of a Wi-Fi system service client interface operation. Description . Identifies the result of Wi-Fi service operations . Remarks . None. typedef enum{ /* Operation completed with success */ SYS_WIFI_SUCCESS = 0, /* Operation Failed.*/ SYS_WIFI_FAILURE, /* Wi-Fi service un-initialize */ SYS_WIFI_SERVICE_UNINITIALIZE, /*Wi-Fi configuration request failed */ SYS_WIFI_CONFIG_FAILURE, //Wi-Fi Connect request failed SYS_WIFI_CONNECT_FAILURE, //Wi-Fi Save request failed SYS_WIFI_SAVE_FAILURE, //Operation request object is invalid SYS_WIFI_OBJ_INVALID=255 }SYS_WIFI_RESULT; . SYS_WIFI_CALLBACK . Function . typedef void (*SYS_WIFI_CALLBACK )(uint32_t event, void * data,void *cookie ) . Summary . Pointer to a Wi-Fi system service callback function. Description . This data type defines a pointer to a Wi-Fi service callback function. Callback functions can be registered by client at initialization or using control message type. Precondition . The Wi-Fi service must have been initialized using the SYS_WIFI_Initialize function if client registering callback using control message. Parameters . event - A event value, event can be any of SYS_WIFI_CTRLMSG types. data - Wi-Fi service Data. cookie - Client register cookie. Returns . None. Example . //User can refer the application \"wireless_apps_pic32mzw1_wfi32e01\\apps\\wifi_easy_config\" for more information on how to implement callback. APP_DATA appData; void WiFiServCallback (uint32_t event, void * data,void *cookie ) { IPV4_ADDR *IPAddr; switch(event) { case SYS_WIFI_CONNECT: { //In STA mode, Wi-Fi service share IP address provided by AP in the callback IPAddr = (IPV4_ADDR *)data; SYS_CONSOLE_PRINT(\"IP address obtained = %d.%d.%d.%d \\\\r\\\\n\",IPAddr-&gt;v[0], IPAddr-&gt;v[1], IPAddr-&gt;v[2], IPAddr-&gt;v[3]); //In AP mode, Wi-Fi service share MAC address and IP address of the connected STA in the callback SYS_WIFI_STA_APP_INFO *StaConnInfo = (SYS_WIFI_STA_APP_INFO *)data; SYS_CONSOLE_PRINT(\"STA Connected to AP. Got IP address = %d.%d.%d.%d \\r\\n\", StaConnInfo-&gt;ipAddr.v[0], StaConnInfo-&gt;ipAddr.v[1], StaConnInfo-&gt;ipAddr.v[2], StaConnInfo-&gt;ipAddr.v[3]); SYS_CONSOLE_PRINT(\"STA Connected to AP. Got MAC address = %x:%x:%x:%x:%x:%x \\r\\n\", StaConnInfo-&gt;macAddr[0], StaConnInfo-&gt;macAddr[1], StaConnInfo-&gt;macAddr[2], StaConnInfo-&gt;macAddr[3], StaConnInfo-&gt;macAddr[4], StaConnInfo-&gt;macAddr[5]); break; } case SYS_WIFI_DISCONNECT: { SYS_CONSOLE_PRINT(\"Device DISCONNECTED \\\\r\\\\n\"); break; } case SYS_WIFI_PROVCONFIG: { SYS_CONSOLE_PRINT(\"Received the Provisioning data \\\\r\\\\n\"); break; } } } void APP_Initialize(void) { appData.state = APP_STATE_INIT; } void APP_Tasks(void) { switch (appData.state) { case APP_STATE_INIT: { SYS_WIFI_CtrlMsg(sysObj.syswifi,SYS_WIFI_REGCALLBACK,WiFiServCallback,sizeof(uint8_t *)); appData.state=APP_STATE_SERVICE_TASKS; break; } case APP_STATE_SERVICE_TASKS: { break; } default: { break; } } } . Remarks . None. typedef void (*SYS_WIFI_CALLBACK )(uint32_t event, void * data,void *cookie ); . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifi/docs/interface.html#data-types-and-constants",
    "relUrl": "/system/wifi/docs/interface.html#data-types-and-constants"
  },"106": {
    "doc": "Wi-Fi System Service Interface",
    "title": "Initialization functions",
    "content": "SYS_WIFI_Initialize . Function . SYS_MODULE_OBJ SYS_WIFI_Initialize ( SYS_WIFI_CONFIG *config, SYS_WIFI_CALLBACK callback, void *cookie ) . Summary . Initializes the System Wi-Fi module. Description . Wi-Fi service supports only one single instance of Wi-Fi. Parameters . config - Wi-Fi device configuration structure. callback - The client callback function pointer. cookie - The pointer which will be passed to the customer application when the customer callback function is invoked. Returns . If successful, returns a valid handle to an object. Otherwise, it returns SYS_MODULE_OBJ_INVALID. Example . #define WIFI_DEV_SSID \"DEMO_AP\" #define WIFI_DEV_PSK \"password\" SYS_WIFI_CONFIG wifiSrvcConfig; // Set mode as STA wifiSrvcConfig.mode = SYS_WIFI_STA; // Disable saving wifi configuration wifiSrvcConfig.saveConfig = false; // Set the auth type to SYS_WIFI_WPA2 wifiSrvcConfig.staConfig.authType = SYS_WIFI_WPA2; // Enable all the channels(0) wifiSrvcConfig.staConfig.channel = 0; // Device doesn't wait for user request wifiSrvcConfig.staConfig.autoConnect = 1; // Set SSID memcpy(wifiSrvcConfig.staConfig.ssid,WIFI_DEV_SSID,sizeof(WIFI_DEV_SSID)); // Set PSK memcpy(wifiSrvcConfig.staConfig.psk,WIFI_DEV_PSK,sizeof(WIFI_DEV_PSK)); sysObj.syswifi = SYS_WIFI_Initialize(&amp;wifiSrvcConfig, WiFiServCallback, 0); if (sysObj.syswifi == SYS_MODULE_OBJ_INVALID) { // Handle error } . Remarks . This routine can only be called once during system initialization. If the Wi-Fi system service is enabled using MHC, then auto generated code will take care of system wi-fi initialization. SYS_WIFI_Deinitialize . Function . SYS_WIFI_RESULT SYS_WIFI_Deinitialize (SYS_MODULE_OBJ object) . Summary . Deinitializes the module instance of the system Wi-Fi service . Description . This function deinitializes the module instance disabling its operation. Resets all of the internal data structures and fields to the default settings. Precondition . The SYS_WIFI_Initialize function should have been called before calling this function. Parameters . object - SYS WIFI object handle, returned from SYS_WIFI_Initialize . Returns . return SYS_WIFI_RESULT . Example . if (SYS_WIFI_SUCCESS == SYS_WIFI_Deinitialize (sysObj.syswifi)) { // when the SYS WIFI is De-initialized. } . Remarks . Deinitialize should be called if the WiFi service is no longer going to be used. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifi/docs/interface.html#initialization-functions",
    "relUrl": "/system/wifi/docs/interface.html#initialization-functions"
  },"107": {
    "doc": "Wi-Fi System Service Interface",
    "title": "Status functions",
    "content": "SYS_WIFI_GetStatus . Function . uint8_t SYS_WIFI_GetStatus ( SYS_MODULE_OBJ object) . Summary . Returns Wi-Fi system service status. Description . This function returns the current status of the System Wi-Fi service. This function help user to perform synchronize functionality with Wi-Fi service. Precondition . The SYS_WIFI_Initialize function should have been called before calling this function. Parameters . object - SYS WIFI object handle, returned from SYS_WIFI_Initialize . Returns . return SYS_WIFI_STATUS if client provided object is valid, else return SYS_WIFI_OBJ_INVALID. Example . // For example,User want to perform the Scan request when auto connect is disabled. // So user has to make sure service is in right state, // where Wi-Fi service has started and waiting in the Auto connect // state(SYS_WIFI_STATUS_AUTOCONNECT_WAIT) before making scan request. if (SYS_WIFI_STATUS_AUTOCONNECT_WAIT == SYS_WIFI_GetStatus (sysObj.syswifi)) { // Enable Wi-Fi Scanning in MHC // Get Wi-Fi Scan Configuration using control message request. // The information of configuration is updated in the wifiSrvcScanConfig. SYS_WIFI_SCAN_CONFIG wifiSrvcScanConfig; if(SYS_WIFI_SUCCESS == SYS_WIFI_CtrlMsg(sysObj.syswifi, SYS_WIFI_GETSCANCONFIG, &amp;wifiSrvcScanConfig, sizeof(SYS_WIFI_SCAN_CONFIG))) { //Received the wifiSrvcScanConfig data } // update desired parameters char myAPlist[] = \"openAP,SecuredAP,DEMO_AP,my_cell_hotspot\"; char delimiter = ','; wifiSrvcScanConfig.channel = 6; wifiSrvcScanConfig.mode = SYS_WIFI_SCAN_MODE_ACTIVE; wifiSrvcScanConfig.pSsidList = myAPlist; wifiSrvcScanConfig.delimChar = delimiter; // pass structure in scan request SYS_WIFI_CtrlMsg(sysObj.syswifi, SYS_WIFI_SCANREQ, &amp;wifiSrvcScanConfig, sizeof(SYS_WIFI_SCAN_CONFIG)); } //Wi-Fi system service is in TCPIP ready status, waiting for client request. if (SYS_WIFI_STATUS_TCPIP_READY == SYS_WIFI_GetStatus (sysObj.syswifi)) { // when the SYS WIFI module in TCPIP ready STATUS } . Remarks . None . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifi/docs/interface.html#status-functions",
    "relUrl": "/system/wifi/docs/interface.html#status-functions"
  },"108": {
    "doc": "Wi-Fi System Service Interface",
    "title": "Setup functions",
    "content": "SYS_WIFI_Tasks . Function . uint8_t SYS_WIFI_Tasks ( SYS_MODULE_OBJ object) . Summary . Maintains the Wi-Fi System tasks and functionalities. Description . This function is used to run the various tasks and functionalities of Wi-Fi system service. Precondition . The SYS_WIFI_Initialize function should have been called before calling this function. Parameters . object - SYS WIFI object handle, returned from SYS_WIFI_Initialize . Returns . return SYS_WIFI_STATUS if client provided object is valid, else return SYS_WIFI_OBJ_INVALID. Example . if (SYS_WIFI_OBJ_INVALID != SYS_WIFI_Tasks (sysObj.syswifi)) { } . Remarks . If the Wi-Fi system service is enabled using MHC, then auto generated code will take care of system task execution. SYS_WIFI_CtrlMsg . Function . SYS_WIFI_RESULT SYS_WIFI_CtrlMsg ( SYS_MODULE_OBJ object, uint32_t event, void *buffer, uint32_t length ) . Summary . Returns success/ failure for the connect/disconnect/scan operation asked by client. Description . This function is used to make control message request (connect,disconnect,scan,register callback) to Wi-Fi system service. Precondition . The SYS_WIFI_Initialize function should have been called before calling this function. Parameters . object - SYS WIFI object handle, returned from SYS_WIFI_Initialize . event - A event value, event can be any of SYS_WIFI_CTRLMSG types . buffer - Control message data input. length - size of buffer data . Returns . return SYS_WIFI_RESULT. Example . Details of SYS_WIFI_CONNECT: SYS_WIFI_CONFIG wifiSrvcConfig; SYS_MODULE_OBJ WiFiServHandle; // Set mode as STA wifiSrvcConfig.mode = SYS_WIFI_STA; // Disable saving wifi configuration wifiSrvcConfig.saveConfig = false; // Set the auth type to SYS_WIFI_WPA2 wifiSrvcConfig.staConfig.authType = SYS_WIFI_WPA2; // Enable all the channels(0) wifiSrvcConfig.staConfig.channel = 0; // Device doesn't wait for user request wifiSrvcConfig.staConfig.autoConnect = 1; // Set SSID memcpy(wifiSrvcConfig.staConfig.ssid, WIFI_DEV_SSID, sizeof(WIFI_DEV_SSID)); // Set PSK memcpy(wifiSrvcConfig.staConfig.psk, WIFI_DEV_PSK, sizeof(WIFI_DEV_PSK)); // sysObj.syswifi return from SYS_WIFI_Initialize() if (SYS_WIFI_OBJ_INVALID != SYS_WIFI_CtrlMsg (sysObj.syswifi, SYS_WIFI_CONNECT, &amp;wifiSrvcConfig, sizeof(SYS_WIFI_CONFIG))) { } Details of SYS_WIFI_GETSCANCONFIG: // Get Wi-Fi Scan Configuration using control message request. // The information of configuration is updated in the wifiSrvcScanConfig. SYS_WIFI_SCAN_CONFIG wifiSrvcScanConfig; if(SYS_WIFI_SUCCESS == SYS_WIFI_CtrlMsg(sysObj.syswifi, SYS_WIFI_GETSCANCONFIG, &amp;wifiSrvcScanConfig, sizeof(SYS_WIFI_SCAN_CONFIG))) { //Received the wifiSrvcScanConfig data } Details of SYS_WIFI_SCANREQ: // In Scan request, // user can request Wi-Fi scan with default values: SYS_WIFI_CtrlMsg(sysObj.syswifi, SYS_WIFI_SCANREQ, NULL, 0); // OR // user can request Wi-Fi scan with custom values: // step 1: get current structure \"wifiSrvcScanConfig\" from the service using SYS_WIFI_GETSCANCONFIG // step 2: update desired parameters char myAPlist[] = \"openAP,SecuredAP,DEMO_AP,my_cell_hotspot\"; char delimiter = ','; wifiSrvcScanConfig.channel = 6; wifiSrvcScanConfig.mode = SYS_WIFI_SCAN_MODE_ACTIVE; wifiSrvcScanConfig.pSsidList = myAPlist; wifiSrvcScanConfig.delimChar = delimiter; wifiSrvcScanConfig.pNotifyCallback = (void *)APP_ScanHandler; // step 3: pass structure in scan request SYS_WIFI_CtrlMsg(sysObj.syswifi, SYS_WIFI_SCANREQ, &amp;wifiSrvcScanConfig, sizeof(SYS_WIFI_SCAN_CONFIG)); //Step 4: Define Application Scan callback to received the scan results // Wi-Fi driver triggers a callback to update each Scan result one-by-one bool APP_ScanHandler (DRV_HANDLE handle, uint8_t index, uint8_t ofTotal, WDRV_PIC32MZW_BSS_INFO *pBSSInfo) { if (0 == ofTotal) { SYS_CONSOLE_MESSAGE(\"No AP Found... Rescan\\r\\n\"); } else { if (index == 1) { SYS_CONSOLE_PRINT(\"Scan Results: #%02d\\r\\n\", ofTotal); } SYS_CONSOLE_PRINT(\"[%02d] %s\\r\\n\", index, pBSSInfo-&gt;ctx.ssid.name); } // return true to receive further results; otherwise return false if desired return true; } Details of SYS_WIFI_GETDRVHANDLE: // Get Wi-Fi Driver handle using control message request. DRV_HANDLE myWifiDrvHandle; if(SYS_WIFI_SUCCESS == SYS_WIFI_CtrlMsg(sysObj.syswifi, SYS_WIFI_GETDRVHANDLE, &amp;myWifiDrvHandle, sizeof(DRV_HANDLE))) { //Received the handle } Details of SYS_WIFI_REGCALLBACK: // Client can register multiple callback.Number of supported // callback registration is a MHC configuration. SYS_WIFI_CtrlMsg(sysObj.syswifi, SYS_WIFI_REGCALLBACK, WiFiServCallback, sizeof(uint8_t *)); Details of SYS_WIFI_GETWIFICONFIG: // Get Wi-Fi Configuration using control message request. // The information of configuration is updated in the wifiSrvcConfig. SYS_WIFI_CONFIG wifiSrvcConfig; if(SYS_WIFI_SUCCESS == SYS_WIFI_CtrlMsg(sysObj.syswifi, SYS_WIFI_GETWIFICONFIG, &amp;wifiSrvcConfig, sizeof(SYS_WIFI_CONFIG))) { //Received the wifiSrvcConfig data } Details of SYS_WIFI_DISCONNECT: //In STA mode, device disconnect request using control message. SYS_WIFI_CtrlMsg(sysObj.syswifi, SYS_WIFI_DISCONNECT, NULL, 0); // In AP mode, How to disconnect connected STA // When STA connect to AP mode,application received the callback(SYS_WIFI_CONNECT) with connect STA IP and MAC address. // User same MAC address for disconnect request. SYS_WIFI_CtrlMsg(sysObj.syswifi, SYS_WIFI_DISCONNECT, macAddr, 6); . Remarks . None . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifi/docs/interface.html#setup-functions",
    "relUrl": "/system/wifi/docs/interface.html#setup-functions"
  },"109": {
    "doc": "OTA System Service Interface",
    "title": "OTA System Service Interface",
    "content": ". | Data Types and Constants Summary | Initialization functions Summary | Setup functions Summary | Registering call back function summary | Data Types and Constants . | SYS_OTA_CTRLMSG | SYS_OTA_STATUS | SYS_OTA_RESULT | SYS_OTA_Config | SYS_OTA_DATA | . | Initialization functions . | SYS_OTA_Initialize | . | Setup functions . | SYS_OTA_Tasks | SYS_OTA_CtrlMsg | . | Registering call back function . | ota_app_reg_cb | . | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/interface.html",
    "relUrl": "/system/ota/docs/interface.html"
  },"110": {
    "doc": "OTA System Service Interface",
    "title": "Data Types and Constants Summary",
    "content": "| Name | Description | . | SYS_OTA_CTRLMSG | Identifies the control message for which the client has called the SYS_OTA_CtrlMsg() | . | SYS_OTA_STATUS | Provide status of OTA system | . | SYS_OTA_RESULT | Result of a OTA system service client interface operation | . | SYS_OTA_Config | Used for passing on the configuration related to the OTA service | . | SYS_OTA_DATA | This structure holds the system service’s data | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/interface.html#data-types-and-constants-summary",
    "relUrl": "/system/ota/docs/interface.html#data-types-and-constants-summary"
  },"111": {
    "doc": "OTA System Service Interface",
    "title": "Initialization functions Summary",
    "content": "| Name | Description | . | SYS_OTA_Initialize | Initialization of data structures of the OTA service | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/interface.html#initialization-functions-summary",
    "relUrl": "/system/ota/docs/interface.html#initialization-functions-summary"
  },"112": {
    "doc": "OTA System Service Interface",
    "title": "Setup functions Summary",
    "content": "| Name | Description | . | SYS_OTA_Task | Executes the SYS OTA service state machine | . | SYS_OTA_CtrlMsg | Returns success/ failure for the control operation asked by the user. | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/interface.html#setup-functions-summary",
    "relUrl": "/system/ota/docs/interface.html#setup-functions-summary"
  },"113": {
    "doc": "OTA System Service Interface",
    "title": "Registering call back function summary",
    "content": "| Name | Description |-|-| ota_app_reg_cb | Registering OTA service callback function | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/interface.html#registering-call-back-function-summary",
    "relUrl": "/system/ota/docs/interface.html#registering-call-back-function-summary"
  },"114": {
    "doc": "OTA System Service Interface",
    "title": "Data Types and Constants",
    "content": "SYS_OTA_CTRLMSG . Summary . Identifies the control message for which the client has called the SYS_OTA_CtrlMsg(). Remarks . None. typedef enum { /* Control message type for registering a ota system service client callback */ SYS_OTA_REGCALLBACK = 0, /* Control message type for checking OTA update availability */ SYS_OTA_UPDATECHCK, /* Control message type for triggering OTA update */ SYS_OTA_INITIATE_OTA, /* Control message type for triggering system reset */ SYS_OTA_TRIGGER_SYSTEM_RESET, /* Control message type for triggering factory reset */ SYS_OTA_TRIGGER_FACTORY_RESET, /* Control message type for triggering Roll back */ SYS_OTA_TRIGGER_ROLLBACK } SYS_OTA_CTRLMSG; . SYS_OTA_STATUS . Summary . provides status of the OTA system. Remarks . None. typedef enum { /* To provide status of OTA system */ /*update available in server*/ SYS_OTA_UPDATE_AVAILABLE = 0, /*update not available*/ SYS_OTA_UPDATE_NOTAVAILABLE, /*OTA trigger failed*/ SYS_OTA_TRIGGER_OTA_FAILED, /*Factory reset success*/ SYS_OTA_FACTORY_RESET_SUCCESS, /*factory reset failed*/ SYS_OTA_FACTORY_RESET_FAILED, /*rollback success*/ SYS_OTA_ROLLBACK_SUCCESS, /*rollback failed*/ SYS_OTA_ROLLBACK_FAILED, /*download started*/ SYS_OTA_DOWNLOAD_START, /*download success*/ SYS_OTA_DOWNLOAD_SUCCESS, /*download failed*/ SYS_OTA_DOWNLOAD_FAILED, /*image digest verify started*/ SYS_OTA_IMAGE_DIGEST_VERIFY_START, /*image digest verify success*/ SYS_OTA_IMAGE_DIGEST_VERIFY_SUCCESS, /*image digest verify failed*/ SYS_OTA_IMAGE_DIGEST_VERIFY_FAILED, /*Database entry successful*/ SYS_OTA_DB_ENTRY_SUCCESS, /*erasing image failed*/ SYS_OTA_IMAGE_ERASE_FAILED, /*erasing image success*/ SYS_OTA_IMAGE_ERASED, /*image database full*/ SYS_OTA_IMAGE_DATABASE_FULL, /*not a defined(as mentioned above) status*/ SYS_OTA_NONE } SYS_OTA_STATUS; . SYS_OTA_RESULT . Summary . Result of a OTA system service client interface operation. Remarks . None. typedef enum { /* Operation completed with success */ SYS_OTA_SUCCESS = 0, /* Operation Failed.*/ SYS_OTA_FAILURE, } SYS_OTA_RESULT; . SYS_OTA_Config . Summary . Used for passing on the configuration related to the OTA service. Remarks . None. typedef struct { /*Auto reset is enabled or not*/ uint8_t autoreset; /*OTA periodic check is enabled or not*/ bool ota_periodic_check; /*OTA auto update is enabled or not*/ bool ota_auto_update; /*periodic check time interval*/ uint32_t periodic_check_interval; /*Application version*/ uint8_t app_version; /*ota server url*/ char *json_url; } SYS_OTA_Config; . SYS_OTA_DATA . Summary . This structure holds the system service’s data. Remarks . None. typedef struct { /* service current state */ SYS_OTA_STATES state; /*to mage states required for parsing JSON content */ SYS_OTA_STATES update_check_state; /*to keep track of user configure auto update check interval*/ uint32_t time_interval; /*keep track if device connected to network*/ bool dev_cnctd_to_nw; /*to keep track if OTA process is in progress*/ bool otaFwInProgress; /*to keep track if OTA update check with server is in progress*/ bool otaUpdateCheckInProgress; /*to keep track if erase image is triggered by user and in progress*/ bool otaEraseInProgress; /*to keep track if image download success*/ bool download_success; /*to check if user requested for erase functionality*/ bool erase_request; /*check if json contents are proper and required fields are present */ bool json_content_parse_result; /*to track timer callback*/ volatile bool ota_timer_trigger; /*buffer used for JSON content parsing*/ char json_buf[SYS_OTA_JSON_FILE_MAXSIZE]; /*control interface result*/ SYS_OTA_STATUS ota_srvc_status; } SYS_OTA_DATA; . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/interface.html#data-types-and-constants",
    "relUrl": "/system/ota/docs/interface.html#data-types-and-constants"
  },"115": {
    "doc": "OTA System Service Interface",
    "title": "Initialization functions",
    "content": "SYS_OTA_Initialize . Function . void SYS_OTA_Initialize(void) . Summary . Initializes the System OTA module. Description . This function is used for initializing the data structures of the OTA service. OTA service supports only one instance of client. Returns . NONE . Example . none . Remarks . This routine can only be called once during system initialization. If the OTA system service is enabled using MHC, then auto generated code will take care of system OTA initialization. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/interface.html#initialization-functions",
    "relUrl": "/system/ota/docs/interface.html#initialization-functions"
  },"116": {
    "doc": "OTA System Service Interface",
    "title": "Setup functions",
    "content": "SYS_OTA_Tasks . Function . void SYS_OTA_Tasks(void) . Summary . Maintains the OTA System tasks and functionalities. Description . This function is used to run the various tasks and functionalities of OTA system service. Precondition . The SYS_OTA_Initialize() function should have been called before calling this function. Parameters . None . Returns . None . Example . while(1) { ... SYS_OTA_Task(); ... } . SYS_OTA_CtrlMsg . Function . SYS_OTA_RESULT SYS_OTA_CtrlMsg(uint32_t event, void *buffer, uint32_t length) . Summary . Returns success/ failure for the update check/OTA trigger/system reset operations asked by client. Description . This function is used to make control message request (update check,initiate OTA,system reset,factory reset,register callback) to OTA system service. Precondition . The SYS_OTA_Initialize() function should have been called before calling this function.. Parameters . event - A event value, event can be any of SYS_OTA_CTRLMSG types . buffer - Control message data input. length - size of buffer data . Returns . SYS_OTA_SUCCESS - Indicates that the Request was catered to successfully . SYS_OTA_FAILURE - Indicates that the Request failed . Example . bool ota_app_reg_cb(void) { if (SYS_OTA_SUCCESS == SYS_OTA_CtrlMsg(SYS_OTA_REGCALLBACK, sys_ota_cb, sizeof (uint8_t *))) { return true; } else { return false; } } . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/interface.html#setup-functions",
    "relUrl": "/system/ota/docs/interface.html#setup-functions"
  },"117": {
    "doc": "OTA System Service Interface",
    "title": "Registering call back function",
    "content": "ota_app_reg_cb . Function . bool ota_app_reg_cb(void) . Summary . Registering OTA service callback function. Description . This function can be used for easy registering of user callback function. It can be called from application layer. The definition of the callback function is already present in app_ota.c file. Returns . true - if callback registered successfully false - if callback registration failed . Example . none . Remarks . This function definition is present in “app_ota.c” file. Initialization must be done before calling this function. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/interface.html#registering-call-back-function",
    "relUrl": "/system/ota/docs/interface.html#registering-call-back-function"
  },"118": {
    "doc": "License",
    "title": "License",
    "content": "IMPORTANT: READ CAREFULLY . MICROCHIP IS WILLING TO LICENSE THIS INTEGRATED SOFTWARE FRAMEWORK SOFTWARE AND ACCOMPANYING DOCUMENTATION OFFERED TO YOU ONLY ON THE CONDITION THAT YOU ACCEPT ALL OF THE FOLLOWING TERMS. TO ACCEPT THE TERMS OF THIS LICENSE, CLICK “I ACCEPT” AND PROCEED WITH THE DOWNLOAD OR INSTALL. IF YOU DO NOT ACCEPT THESE LICENSE TERMS, CLICK “I DO NOT ACCEPT,” AND DO NOT DOWNLOAD OR INSTALL THIS SOFTWARE. NON-EXCLUSIVE SOFTWARE LICENSE AGREEMENT FOR MICROCHIP MPLAB HARMONY INTEGRATED SOFTWARE FRAMEWORK . This Nonexclusive Software License Agreement (“Agreement”) is between you, your heirs, agents, successors and assigns (“Licensee”) and Microchip Technology Incorporated, a Delaware corporation, with a principal place of business at 2355 W. Chandler Blvd., Chandler, AZ 85224-6199, and its subsidiary, Microchip Technology (Barbados) II Incorporated (collectively, “Microchip”) for Microchip’s MPLAB Harmony Integrated Software Framework (“Software”) and accompanying documentation (“Documentation”). The Software and Documentation are licensed under this Agreement and not sold. U.S. copyright laws and international copyright treaties, and other intellectual property laws and treaties protect the Software and Documentation. Microchip reserves all rights not expressly granted to Licensee in this Agreement. | License and Sublicense Grant. (a) Definitions. As used this Agreement, the following terms shall have the meanings defined below: . (i) \"Licensee Products\" means Licensee products that use or incorporate Microchip Products. (ii) \"Microchip Product\" means Microchip 16-bit and 32-bit microcontrollers, digital signal controllers or other Microchip semiconductor products with PIC16 and PIC18 prefix and specifically excepting the CX870 and CY920, which are not covered under this Agreement, that use or implement the Software. (iii) \"Object Code\" means the Software computer programming code provided by Microchip that is in binary form (including related documentation, if any) and error corrections, improvements and updates to such code provided by Microchip in its sole discretion, if any. (iv) \"Source Code\" means the Software computer programming code provided by Microchip that may be printed out or displayed in human readable form (including related programmer comments and documentation, if any), and error corrections, improvements, updates, modifications and derivatives of such code developed by Microchip, Licensee or Third Party. (v) \"Third Party\" means Licensee's agents, representatives, consultants, clients, customers, or contract manufacturers. (vi) \"Third Party Products\" means Third Party products that use or incorporate Microchip Products. (b) Software License Grant. Subject to the terms of this Agreement, Microchip grants strictly to Licensee a personal, worldwide, non-exclusive, non-transferable limited license to use, modify (except as limited by Section 1(f) below), copy and distribute the Software only when the Software is embedded on a Microchip Product that is integrated into Licensee Product or Third Party Product pursuant to Section 2(d) below. Any portion of the Software (including derivatives or modifications thereof) may not be: . (i) embedded on a non-Microchip microcontroller or digital signal controller; (ii) distributed (in Source Code or Object Code), except as described in Section 2(d) below. (c) Documentation License Grant. Subject to all of the terms and conditions of this Agreement, Microchip grants strictly to Licensee a perpetual, worldwide, non-exclusive license to use the Documentation in support of Licensee’s use of the Software. (d) Sublicense Grants. Subject to terms of this Agreement, Licensee may grant a limited sublicense to a Third Party to use the Software as described below only if such Third Party expressly agrees to be bound by terms of confidentiality and limited use that are no broader in scope and duration than the confidentiality and limited use terms of this Agreement: . (i) Third Party may modify Source Code for Licensee, except as limited by Section 1(f) below. (ii) Third Party may program Software into Microchip Products for Licensee. (iii) Third Party may use Software to develop and/or manufacture Licensee Product. (iv) Third Party may use Software to develop and/or manufacture Third Party Products where either: (x) the sublicensed Software contains Source Code modified or otherwise optimized by Licensee for Third Party use; or (y) the sublicensed Software is programmed into Microchip Products by Licensee on behalf of such Third Party. (v) Third Party may use the Documentation in support of Third Party's authorized use of the Software in conformance with this Section 2(d). (e) Audit. Authorized representatives of Microchip shall have the right to reasonably inspect Licensee’s premises and to audit Licensee’s records and inventory of Licensee Products, whether located on Licensee’s premises or elsewhere at any time, announced or unannounced, and in its sole and absolute discretion, in order to ensure Licensee’s adherence to the terms of this Agreement. (f) License and Sublicense Limitation. This Section 1 does not grant Licensee or any Third Party the right to modify any dotstack™ Bluetooth® stack, profile, or iAP protocol included in the Software. | Third Party Requirements. Licensee acknowledges that it is Licensee’s responsibility to comply with any third party license terms or requirements applicable to the use of such third party software, specifications, systems, or tools, including but not limited to SEGGER Microcontroller GmbH &amp; Co. KG’s rights in the emWin software and certain libraries included herein. Microchip is not responsible and will not be held responsible in any manner for Licensee’s failure to comply with such applicable terms or requirements. | Open Source Components. Notwithstanding the license grants contained herein, Licensee acknowledges that certain components of the Software may be covered by so-called “open source” software licenses (“Open Source Components”). Open Source Components means any software licenses approved as open source licenses by the Open Source Initiative or any substantially similar licenses, including any license that, as a condition of distribution, requires Microchip to provide Licensee with certain notices and/or information related to such Open Source Components, or requires that the distributor make the software available in source code format. Microchip will use commercially reasonable efforts to identify such Open Source Components in a text file or “About Box” or in a file or files referenced thereby (and will include any associated license agreement, notices, and other related information therein), or the Open Source Components will contain or be accompanied by its own license agreement. To the extent required by the licenses covering Open Source Components, the terms of such licenses will apply in lieu of the terms of this Agreement, and Microchip hereby represents and warrants that the licenses granted to such Open Source Components will be no less broad than the license granted in Section 1(b). To the extent the terms of the licenses applicable to Open Source Components prohibit any of the restrictions in this Agreement with respect to such Open Source Components, such restrictions will not apply to such Open Source Components. | Licensee’s Obligations. (a) Licensee will ensure Third Party compliance with the terms of this Agreement. (b) Licensee will not: (i) engage in unauthorized use, modification, disclosure or distribution of Software or Documentation, or its derivatives; (ii) use all or any portion of the Software, Documentation, or its derivatives except in conjunction with Microchip Products; or (iii) reverse engineer (by disassembly, decompilation or otherwise) Software or any portion thereof; or (iv) copy or reproduce all or any portion of Software, except as specifically allowed by this Agreement or expressly permitted by applicable law notwithstanding the foregoing limitations. (c) Licensee must include Microchip’s copyright, trademark and other proprietary notices in all copies of the Software, Documentation, and its derivatives. Licensee may not remove or alter any Microchip copyright or other proprietary rights notice posted in any portion of the Software or Documentation. (d) Licensee will defend, indemnify and hold Microchip and its subsidiaries harmless from and against any and all claims, costs, damages, expenses (including reasonable attorney’s fees), liabilities, and losses, including without limitation product liability claims, directly or indirectly arising from or related to: (i) the use, modification, disclosure or distribution of the Software, Documentation or any intellectual property rights related thereto; (ii) the use, sale, and distribution of Licensee Products or Third Party Products, and (iii) breach of this Agreement. THE FOREGOING STATES THE SOLE AND EXCLUSIVE LIABILITY OF THE PARTIES FOR INTELLECTUAL PROPERTY RIGHTS INFRINGEMENT. | Confidentiality. (a) Licensee agrees that the Software (including but not limited to the Source Code, Object Code and library files) and its derivatives, Documentation and underlying inventions, algorithms, know-how and ideas relating to the Software and the Documentation are proprietary information belonging to Microchip and its licensors (“Proprietary Information”). Except as expressly and unambiguously allowed herein, Licensee will hold in confidence and not use or disclose any Proprietary Information and shall similarly bind its employees and Third Party(ies) in writing. Proprietary Information shall not include information that: (i) is in or enters the public domain without breach of this Agreement and through no fault of the receiving party; (ii) the receiving party was legally in possession of prior to receiving it; (iii) the receiving party can demonstrate was developed by it independently and without use of or reference to the disclosing party’s Proprietary Information; or (iv) the receiving party receives from a third party without restriction on disclosure. If Licensee is required to disclose Proprietary Information by law, court order, or government agency, such disclosure shall not be deemed a breach of this Agreement provided that Licensee gives Microchip prompt notice of such requirement in order to allow Microchip to object or limit such disclosure, Licensee cooperates with Microchip to protect Proprietary Information, and Licensee complies with any protective order in place and discloses only the information required by process of law. (b) Licensee agrees that the provisions of this Agreement regarding unauthorized use and nondisclosure of the Software, Documentation and related Proprietary Rights are necessary to protect the legitimate business interests of Microchip and its licensors and that monetary damages alone cannot adequately compensate Microchip or its licensors if such provisions are violated. Licensee, therefore, agrees that if Microchip alleges that Licensee or Third Party has breached or violated such provision then Microchip will have the right to petition for injunctive relief, without the requirement for the posting of a bond, in addition to all other remedies at law or in equity. | Ownership of Proprietary Rights. (a) Microchip and its licensors retain all right, title and interest in and to the Software and Documentation (“Proprietary Rights”) including, but not limited to: (i) patent, copyright, trade secret and other intellectual property rights in the Software, Documentation, and underlying technology; (ii) the Software as implemented in any device or system, all hardware and software implementations of the Software technology (expressly excluding Licensee and Third Party code developed and used in conformance with this Agreement solely to interface with the Software and Licensee Products and/or Third Party Products); and (iii) all modifications and derivative works thereof (by whomever produced). Further, modifications and derivative works shall be considered works made for hire with ownership vesting in Microchip on creation. To the extent such modifications and derivatives do not qualify as a “work for hire,” Licensee hereby irrevocably transfers, assigns and conveys the exclusive copyright thereof to Microchip, free and clear of any and all liens, claims or other encumbrances, to the fullest extent permitted by law. Licensee and Third Party use of such modifications and derivatives is limited to the license rights described in Section 1 above. (b) Licensee shall have no right to sell, assign or otherwise transfer all or any portion of the Software, Documentation or any related intellectual property rights except as expressly set forth in this Agreement. | Termination of Agreement. Without prejudice to any other rights, this Agreement terminates immediately, without notice by Microchip, upon a failure by License or Third Party to comply with any provision of this Agreement. Further, Microchip may also terminate this Agreement upon reasonable belief that Licensee or Third Party have failed to comply with this Agreement. Upon termination, Licensee and Third Party will immediately stop using the Software, Documentation, and derivatives thereof, and immediately destroy all such copies, remove Software from any of Licensee’s tangible media and from systems on which the Software exists, and stop using, disclosing, copying, or reproducing Software (even as may be permitted by this Agreement). Termination of this Agreement will not affect the right of any end user or consumer to use Licensee Products or Third Party Products provided that such products were purchased prior to the termination of this Agreement. | Dangerous Applications. The Software is not fault-tolerant and is not designed, manufactured, or intended for use in hazardous environments requiring failsafe performance (“Dangerous Applications”). Dangerous Applications include the operation of nuclear facilities, aircraft navigation, aircraft communication systems, air traffic control, direct life support machines, weapons systems, or any environment or system in which the failure of the Software could lead directly or indirectly to death, personal injury, or severe physical or environmental damage. Microchip specifically disclaims (a) any express or implied warranty of fitness for use of the Software in Dangerous Applications; and (b) any and all liability for loss, damages and claims resulting from the use of the Software in Dangerous Applications. | Warranties and Disclaimers. THE SOFTWARE AND DOCUMENTATION ARE PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. MICROCHIP AND ITS LICENSORS ASSUME NO RESPONSIBILITY FOR THE ACCURACY, RELIABILITY OR APPLICATION OF THE SOFTWARE OR DOCUMENTATION. MICROCHIP AND ITS LICENSORS DO NOT WARRANT THAT THE SOFTWARE WILL MEET REQUIREMENTS OF LICENSEE OR THIRD PARTY, BE UNINTERRUPTED OR ERROR-FREE. MICROCHIP AND ITS LICENSORS HAVE NO OBLIGATION TO CORRECT ANY DEFECTS IN THE SOFTWARE. LICENSEE AND THIRD PARTY ASSUME THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE SOFTWARE AND DOCUMENTATION PROVIDED UNDER THIS AGREEMENT. | Limited Liability. IN NO EVENT SHALL MICROCHIP OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT, NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER LEGAL OR EQUITABLE THEORY FOR ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES INCLUDING BUT NOT LIMITED TO INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS. The aggregate and cumulative liability of Microchip and its licensors for damages hereunder will in no event exceed $1000 or the amount Licensee paid Microchip for the Software and Documentation, whichever is greater. Licensee acknowledges that the foregoing limitations are reasonable and an essential part of this Agreement. | General. (a) Governing Law, Venue and Waiver of Trial by Jury. THIS AGREEMENT SHALL BE GOVERNED BY AND CONSTRUED UNDER THE LAWS OF THE STATE OF ARIZONA AND THE UNITED STATES WITHOUT REGARD TO CONFLICTS OF LAWS PROVISIONS. Licensee agrees that any disputes arising out of or related to this Agreement, Software or Documentation shall be brought in the courts of State of Arizona. The parties agree to waive their rights to a jury trial in actions relating to this Agreement. (b) Attorneys’ Fees. If either Microchip or Licensee employs attorneys to enforce any rights arising out of or relating to this Agreement, the prevailing party shall be entitled to recover its reasonable attorneys’ fees, costs and other expenses. (c) Entire Agreement. This Agreement shall constitute the entire agreement between the parties with respect to the subject matter hereof. It shall not be modified except by a written agreement signed by an authorized representative of Microchip. (d) Severability. If any provision of this Agreement shall be held by a court of competent jurisdiction to be illegal, invalid or unenforceable, that provision shall be limited or eliminated to the minimum extent necessary so that this Agreement shall otherwise remain in full force and effect and enforceable. (e) Waiver. No waiver of any breach of any provision of this Agreement shall constitute a waiver of any prior, concurrent or subsequent breach of the same or any other provisions hereof, and no waiver shall be effective unless made in writing and signed by an authorized representative of the waiving party. (f) Export Regulation. Licensee agrees to comply with all export laws and restrictions and regulations of the Department of Commerce or other United States or foreign agency or authority. (g) Survival. The indemnities, obligations of confidentiality, and limitations on liability described herein, and any right of action for breach of this Agreement prior to termination shall survive any termination of this Agreement. (h) Assignment. Neither this Agreement nor any rights, licenses or obligations hereunder, may be assigned by Licensee without the prior written approval of Microchip except pursuant to a merger, sale of all assets of Licensee or other corporate reorganization, provided that assignee agrees in writing to be bound by the Agreement. (i) Restricted Rights. Use, duplication or disclosure by the United States Government is subject to restrictions set forth in subparagraphs (a) through (d) of the Commercial Computer-Restricted Rights clause of FAR 52.227-19 when applicable, or in subparagraph (c)(1)(ii) of the Rights in Technical Data and Computer Software clause at DFARS 252.227-7013, and in similar clauses in the NASA FAR Supplement. Contractor/manufacturer is Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85225-6199. | . If Licensee has any questions about this Agreement, please write to Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85224-6199 USA, ATTN: Marketing. Microchip MPLAB Harmony Integrated Software Framework. Copyright © 2015 Microchip Technology Inc. All rights reserved. License Rev. 11/2015 . Copyright © 2015 Qualcomm Atheros, Inc. All Rights Reserved. Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED “AS IS” AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/mplab_harmony_license.html",
    "relUrl": "/mplab_harmony_license.html"
  },"119": {
    "doc": "OTA Service",
    "title": "Over The Air (OTA) firmware update System Service",
    "content": "OTA System Service Library provides an application programming interface (API) to manage OTA functionalities. The OTA System Service uses the Wi-Fi service, Net service, NetPres APIs for achieving these functionalities. The user would need to configure the Home AP credentials (like SSID and Passphrase). The Wi-Fi service will use the credentials to connect to the Home AP and acquire an IP address. Once the IP address is obtained service will perform OTA update process based on OTA service configurations. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/readme.html#over-the-air-ota-firmware-update-system-service",
    "relUrl": "/system/ota/docs/readme.html#over-the-air-ota-firmware-update-system-service"
  },"120": {
    "doc": "OTA Service",
    "title": "Key Features:",
    "content": ". | External Flash based OTA . OTA images will be stored in a filesystem hosted on an External flash. An OTA database d MHC file system) is maintained in the external flash to manage images. | OTA download during application execution . When an updated image is available, it will be downloaded in the background while customer application is running, without disturbing any processes executing in the system. The application can optionally chose when the download should start. | Opt when to switch to new image . Customer application can decide when it should switch to the new image. This lets the current application gracefully shutdown services and apply the update at a later point. | Trigger firmware update via a single API . OTA service can be configured to work in daemon mode where the system service performs periodic update checks and auto-restart once a valid image is downloaded. It can also be configured to asynchronously trigger a firmware update via a single API call. | Firmware update trigger from device or external sources . OTA update checks can be triggered via external source if not configured for periodic checks. | . The OTA System Service provides simple APIs to enable OTA functionality. More information is provided in the following sections. | Using the library . | Configuring the library . | Library interface . | Developer guide . | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/readme.html#key-features",
    "relUrl": "/system/ota/docs/readme.html#key-features"
  },"121": {
    "doc": "OTA Service",
    "title": "OTA Service",
    "content": " ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/readme.html",
    "relUrl": "/system/ota/docs/readme.html"
  },"122": {
    "doc": "Wi-Fi provisioning Service",
    "title": "Wi-Fi provisioning System Service",
    "content": "Wi-Fi Provisioning System Service Library is used to enable Wi-Fi provisioning method. Wi-Fi Provisioning is the process of configuring desired Wi-Fi SSID and related security credentials of the Home AP into the device. This system service provides different methods that can be used to provide this information to the core stack. Key Features: . | Wi-Fi Provisioning using command line. | Wi-Fi Provisioning using TCP Socket . | JSON | Mobile Application | . | Wi-Fi Provisioning using webpage(HTTP page). | Configuring the library . | Using the library . | Library interface . | Developer guide | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/readme.html#wi-fi-provisioning-system-service",
    "relUrl": "/system/wifiprov/docs/readme.html#wi-fi-provisioning-system-service"
  },"123": {
    "doc": "Wi-Fi provisioning Service",
    "title": "Wi-Fi provisioning Service",
    "content": " ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/readme.html",
    "relUrl": "/system/wifiprov/docs/readme.html"
  },"124": {
    "doc": "Net Service",
    "title": "Net System Service",
    "content": "Net System Service Library provides an application programming interface (API) to manage TCPIP Networking functionalities. The Net System Service uses the NetPres APIs for achieving these functionalities. Key Features: . | Supports Client/ Server Mode for IP Network Connectivity | Supports TCP and UDP Protocols of IP | Supports TLS for TCP Connection | Supports Self Healing, that is if the connection for some reason breaks, the service shall take care of reconnecting the same internally. | . The Net System Service provides simple API’s to enable network stack functionalities. Multiple clients can request the Net system service functionalities like tcp/udp connection request, tcp/udp disconnect request, sending and receiving data, etc. | Using the library . | Configuring the library . | Library interface . | Developer’s Guide . | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/net/docs/readme.html#net-system-service",
    "relUrl": "/system/net/docs/readme.html#net-system-service"
  },"125": {
    "doc": "Net Service",
    "title": "Net Service",
    "content": " ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/net/docs/readme.html",
    "relUrl": "/system/net/docs/readme.html"
  },"126": {
    "doc": "MQTT Service",
    "title": "MQTT System Service",
    "content": "MQTT System Service Library provides an application programming interface (API) to manage MQTT functionalities. The MQTT System Service internally uses the third party Paho MQTT software for MQTT support. Key Features: . | Supports MQTT Client | Supports TLS for MQTT Connection | Supports Self Healing, that is if the connection for some reason breaks, the service shall take care of reconnecting the same internally. | . The MQTT System Service provides simple API’s to enable MQTT functionalities like publishing, and subscribing to a topic. | Using the library . | Configuring the library . | Library interface . | Developer’s Guide . | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/readme.html#mqtt-system-service",
    "relUrl": "/system/mqtt/docs/readme.html#mqtt-system-service"
  },"127": {
    "doc": "MQTT Service",
    "title": "MQTT Service",
    "content": " ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/readme.html",
    "relUrl": "/system/mqtt/docs/readme.html"
  },"128": {
    "doc": "App Debug Service",
    "title": "App Debug System Service",
    "content": "App Debug System Service Library provides an application programming interface (API) to manage debug logs at runtime. Key Features: . | Supports Enabling/ Disabling of logs at runtime | Supports Enabling/ Disabling of logs based on severity level | Supports Enabling/ Disabling of logs based on logical flow | . The App Debug System Service provides simple API’s to enable/diable system console logs functionalities. Multiple users can request the App Debug system service functionalities simultaneously. | Using the library . | Configuring the library . | Library interface . | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/appdebug/docs/readme.html#app-debug-system-service",
    "relUrl": "/system/appdebug/docs/readme.html#app-debug-system-service"
  },"129": {
    "doc": "App Debug Service",
    "title": "App Debug Service",
    "content": " ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/appdebug/docs/readme.html",
    "relUrl": "/system/appdebug/docs/readme.html"
  },"130": {
    "doc": "Web Socket Server System Service",
    "title": "Web Socket Server (WSS) System Service",
    "content": "Web Socket Server System Service Library provides an application programming interface (API) for implementing a Web Socket Server functionalities as defined in rfc6455. The WSS System Service uses the underlying net system service APIs for TCP/IP and network functionalities. Key Features: . | Implements the WSS protocol as a service | Supports multiple client connections simultaneously | . The WSS System Service provides simple API’s, MHC configurations and application templates for handling various WSS events. | Using the library . | Configuring the library . | Library interface . | Developer’s Guide . | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wss/docs/readme.html#web-socket-server-wss-system-service",
    "relUrl": "/system/wss/docs/readme.html#web-socket-server-wss-system-service"
  },"131": {
    "doc": "Web Socket Server System Service",
    "title": "Web Socket Server System Service",
    "content": " ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wss/docs/readme.html",
    "relUrl": "/system/wss/docs/readme.html"
  },"132": {
    "doc": "Wi-Fi Service",
    "title": "Wi-Fi System Service",
    "content": "Wi-Fi System Service Library provides an application programming interface (API) through which user can request Wi-Fi connectivity functionalities.The Wi-Fi System Service use Wi-Fi driver APIs. Key Features: . | Configuration of Station mode(STA) . | Security Support: . | Open - No security | WPA2 | WPAWPA2(Mixed) mode | WPA2WPA3(Mixed) | WPA3 | . | Self Healing . | if the connection for some reason breaks, the service shall take care of reconnecting the same internally. | . | . | Configuration of Soft Access point mode(AP) . | Security Support: . | Open - No security | WPA2 | WPAWPA2(Mixed) | WPA2WPA3(Mixed) | WPA3 | Hidden Access Point(AP) | . | . | . The Wi-Fi System Service provides simple API’s to enable Station(STA) or Access Point(AP) functionalities. Multiple clients can request the Wi-Fi system service functionalities like connection request,disconnect request,scan request,etc. User is not required to have Wi-Fi domain knowledge to developed station(STA) or access point(AP) application using Wi-Fi System Service. | Using the library . | Configuring the library . | Library interface . | Developer guide . | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifi/docs/readme.html#wi-fi-system-service",
    "relUrl": "/system/wifi/docs/readme.html#wi-fi-system-service"
  },"133": {
    "doc": "Wi-Fi Service",
    "title": "Wi-Fi Service",
    "content": " ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifi/docs/readme.html",
    "relUrl": "/system/wifi/docs/readme.html"
  },"134": {
    "doc": "Release notes",
    "title": "Microchip MPLAB® Harmony 3 Release Notes",
    "content": " ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/release_notes.html#microchip-mplab-harmony-3-release-notes",
    "relUrl": "/release_notes.html#microchip-mplab-harmony-3-release-notes"
  },"135": {
    "doc": "Release notes",
    "title": "Harmony 3 Wireless system services for the PIc32MZW1/WFI32 family  v3.6.1",
    "content": "New Features . | [WIFI] Wi-Fi Connection time improvement. | [WIFIPROV] Support for Scan and Connect in HTTP Provisioning. | . Bug fixes and Improvements . Known Issues and Limitations . | Due to an issue in the underlying net repo, you need to turn off -Werror for the icmp.c file in your projects. | While switching from AP to STA mode without a reset, the system might report multiple failure prints in the console before connecting. | Web socket server will support only upto 500 bytes in a single message. | Web socket server will not honour optional header fields like Sec-WebSocket-Protocol and Sec-WebSocket-Extensions | . Development Tools . | MPLAB® X IDE v6.00 | MPLAB® X IDE plug-ins: . | MPLAB® Harmony Configurator (MHC) v3.8.2 | . | MPLAB® XC32 C/C++ Compiler v3.01 | DFP 1.5.203 | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/release_notes.html#harmony-3-wireless-system-services-for-the-pic32mzw1wfi32-family--v361",
    "relUrl": "/release_notes.html#harmony-3-wireless-system-services-for-the-pic32mzw1wfi32-family--v361"
  },"136": {
    "doc": "Release notes",
    "title": "Harmony 3 Wireless system services for the PIc32MZW1/WFI32 family  v3.6.0",
    "content": "New Features . | [WSS] New web socket server system service. | [OTA] Patch OTA feature added to OTA service. | [MQTT] Support for ALPN in MQTT service. | [MQTT] Support for SNI in MQTT service. | [MQTT] Design guide detailing more architecture and implementation details. | [NET] Configurable multi-client support in NET service | [NET] User notification for SERVER_AWAITING_CONNECTION. | [NET] Support for “Ethernet only” mode in NET service. | [WIFI] Added capability to fetch association handle via control messages. | Catchup to latest dependencies. | Bug fixes and stabilty improvements. | . Bug fixes and Improvements . | [MQTT] Improved handling of MQTT Clean session. | [MQTT] Fixed multi-topic subscription via API. | [WiFi] Improved config save flow in Wi-Fi service. | . Known Issues and Limitations . | Due to an issue in the underlying net repo, you need to turn off -Werror for the icmp.c file in your projects. | While switching from AP to STA mode without a reset, the system might report multiple failure prints in the console before connecting. | Web socket server will support only upto 500 bytes in a single message. | Web socket server will not honour optional header fields like Sec-WebSocket-Protocol and Sec-WebSocket-Extensions | . Development Tools . | MPLAB® X IDE v5.50 | MPLAB® X IDE plug-ins: . | MPLAB® Harmony Configurator (MHC) v3.8.0 | . | MPLAB® XC32 C/C++ Compiler v3.01 | DFP 1.5.203 | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/release_notes.html#harmony-3-wireless-system-services-for-the-pic32mzw1wfi32-family--v360",
    "relUrl": "/release_notes.html#harmony-3-wireless-system-services-for-the-pic32mzw1wfi32-family--v360"
  },"137": {
    "doc": "Release notes",
    "title": "Harmony 3 Wireless system services for the PIc32MZW1/WFI32 family  v3.5.1",
    "content": "Note : This is an incremental release. All notes under the v3.5.0 release are applicable to this release as well. New Features . | [NET] One click configuration to use TNGTLS client certificates. Bug fixes and Improvements . | [MQTT] Improved handling of MQTT Clean session. | . Known Issues . | When 2 network interfaces are present in the project, compiler optimization should be turned off. (Issue arising from DHCP module in underlying net repo) | While switching from AP to STA mode without a reset, the system might report multiple failure prints in the console before connecting. | . Development Tools . | MPLAB® X IDE v5.50 | MPLAB® X IDE plug-ins: . | MPLAB® Harmony Configurator (MHC) v3.8.0 | . | MPLAB® XC32 C/C++ Compiler v3.01 | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/release_notes.html#harmony-3-wireless-system-services-for-the-pic32mzw1wfi32-family--v351",
    "relUrl": "/release_notes.html#harmony-3-wireless-system-services-for-the-pic32mzw1wfi32-family--v351"
  },"138": {
    "doc": "Release notes",
    "title": "Harmony 3 Wireless system services for the PIc32MZW1/WFI32 family  v3.5.0",
    "content": "New Features . | Updated dependencies. Please refer to package.xml to see the versions used in this release. | New OTA update service and bootloader. | System Component group has been renamed to System Confugiration. | [WIFI] Wi-Fi service control message SYS_WIFI_GETCONFIG renamed to SYS_WIFI_GETWIFICONFIG | [WIFI] No reboot required for AP-STA mode switch. | [WIFI] Advanced scanning options in Wi-Fi service menu. | [WIFI] Functionality to disconnect a STA in AP mode. | [WIFI] Scan support in AP mode (feature enabled in from underlying wireless library.) | [WIFIPROV] User storage option for Wi-Fi provisioning credentials. | [WIFIPROV] Provisioning data will be stored in last 4 KB of NVM. This region will be reserved by the compiler. | [NET] One click configuration to use TNGTLS client certificates. | [MQTT] Includes MQTT callback template and intialization in generated code. | . Note: All system components are now available under the wireless component tree in MHC. Bug fixes and Improvements . | Migration to XC32 v3.01 | Services updated to use latest netpres component. | Improvements in DHCP component instantiation by services. | UDP Rx queue limit auto-configuration by Net Service. | Documentation updates and addition of developer guides. | Improved MQTT reconnection logic to handle network disconnections. | Stability improvements. | . Known Issues . | When 2 network interfaces are present in the project, compiler optimization should be turned off. (Issue arising from DHCP module in underlying net repo) | While switching from AP to STA mode without a reset, the system might report multiple failure prints in the console before connecting. | Enabling ECC608 support results in a compilation error due to an underlying issue in WolfSSL | . Development Tools . | MPLAB® X IDE v5.50 | MPLAB® X IDE plug-ins: . | MPLAB® Harmony Configurator (MHC) v3.8.0 | . | MPLAB® XC32 C/C++ Compiler v3.01 | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/release_notes.html#harmony-3-wireless-system-services-for-the-pic32mzw1wfi32-family--v350",
    "relUrl": "/release_notes.html#harmony-3-wireless-system-services-for-the-pic32mzw1wfi32-family--v350"
  },"139": {
    "doc": "Release notes",
    "title": "Harmony 3 Wireless system services for the PIc32MZW1/WFI32 family  v3.4.1",
    "content": "New Features . | Split wireless system services into a seperate repo | . Bug fixes . | None | . Known Issues . | None | . Development Tools . | MPLAB® X IDE v5.40 | MPLAB® X IDE plug-ins: . | MPLAB® Harmony Configurator (MHC) v3.6.2 | . | MPLAB® XC32 C/C++ Compiler v2.50 | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/release_notes.html#harmony-3-wireless-system-services-for-the-pic32mzw1wfi32-family--v341",
    "relUrl": "/release_notes.html#harmony-3-wireless-system-services-for-the-pic32mzw1wfi32-family--v341"
  },"140": {
    "doc": "Release notes",
    "title": "Release notes",
    "content": ". ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/release_notes.html",
    "relUrl": "/release_notes.html"
  },"141": {
    "doc": "OTA System Service Usage",
    "title": "OTA System Service Usage",
    "content": " ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/usage.html",
    "relUrl": "/system/ota/docs/usage.html"
  },"142": {
    "doc": "OTA System Service Usage",
    "title": "Description",
    "content": "The OTA System Service provides simple APIs to enable Over the Air system firmware image upgrade. While using the service, the application does not have to handle low level states of a TCP/IP Connection, periodic update check triggers, file integrity checks etc. since the service internally takes care of that. The user also does not required extensive Security domain knowledge to establish a secured connection via the application using OTA System Service library. The user would need to configure the Home AP credentials (like SSID and security items). The Wi-Fi service will use the credentials to connect to the Home AP and acquire an IP address. Once the IP address is obtained OTA service will perform OTA update process based on user configuration in MHC. The service state-machine will try to connect with a pre-defined OTA manifest server address and download the new image when a version higher than the version being currently executed is identified. The downloaded image will be stored in the external SPI flash initially. Upon reset, the image will be transferred to the internal flash (NVM) by the OTA bootloader. Once the image is successfully programmed, the updated image from the server will be executed. The OTA service has two major components: . | The OTA service task state-machine that will be integrated into the customer application. This task is responsible for polling for an update image, downloading and verifying an image when an update is detected, and resetting the system to apply the newly downloaded image. | The OTA bootloader that is responsible for identifying the presence of an updated image in the external flash filesystem and transferring it to the program flash memory (NVM). | . A factory image is a unified application image that contains the bootloader and the application in a single file that can be programmed into the device using an external programmer. To create a factory image, it is required to load the ota_bootloader project located in the apps folder of wireless_apps_pic32mzw1_wfi32e01 repo into the application project. A unified hex file will be created at the end of the compilation process. Internally, this step uses the Hexmate tool after compiling the application project and the bootloader project independently. More details about this can be found in Configuring the library section of this manual. OTA service uses the file system component from MHC (MPLAB® Harmony Configurator) and is configured to use an external SPI flash by default. However, this can be modified to use a different medium without major changes since the OTA service uses the file system abstraction to talk to the external storage medium. An OTA image database is maintained by the service in the filesystem. It contains details about the downloaded images (image name, image status,image version, digest key), which will be used by bootloader and OTA service . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/usage.html#description",
    "relUrl": "/system/ota/docs/usage.html#description"
  },"143": {
    "doc": "OTA System Service Usage",
    "title": "OTA Service Framework Architecture Overview",
    "content": "Over the Air (OTA) firmware upgrade feature is designed with a two step process, Image Downloading and Image Programming process. | Image Downloading is processed by the OTA service. | Image Programming is processed by the OTA bootloader. | . OTA service is a Harmony component which includes the system level logic implementation and uses OTA core APIs. This harmony component will provide some user configurable parameters, based on which service level code will be generated with the corresponding logic. Please follow Figure-1 and Figure-2 for better understanding of this flow. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/usage.html#ota-service-framework-architecture-overview",
    "relUrl": "/system/ota/docs/usage.html#ota-service-framework-architecture-overview"
  },"144": {
    "doc": "OTA System Service Usage",
    "title": "Abstraction model:",
    "content": ". User Application: This is where the customer application logic is built. OTA Service: This layer includes the service level logic implementation. This is a Harmony component which provides certain user configurable parameters(ex- Version, Periodic update check etc.) . Based on user configuration, generated code will be activated with required functionalities. OTA software platform / OTA Core : This is the platform layer that consist of the main OTA logic implementation. When OTA process is triggered , this layer will communicate with the transport layer to connect to OTA server. If new image is available , it will initiate download using transport layer. If successfully downloaded, it will store the new image into the File System . File System : The architecture is designed to provide flexibility for the customer to choose the storage medium (ex- SST26 SPI flash, SD card, USB MSD in host mode etc.). Any medium supported by the Harmony3 file system can be used with the OTA service. Bootloader : This layer consists of the logic to safely program images from the file system (external) into the program memory (NVM) of the device. At device boot, the bootloader will check if a new image is available in the external image store and transfer it to the NVM. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/usage.html#abstraction-model",
    "relUrl": "/system/ota/docs/usage.html#abstraction-model"
  },"145": {
    "doc": "OTA System Service Usage",
    "title": "OTA server JSON manifest",
    "content": "The OTA service expects the HTTP based OTA server to provide metadata of images available in the server in json format. During periodic update checks, the OTA service task will download and parse this manifest file. Each entry in the manifest file should include the following fields : . | Version indicates the application version number. It is a integer value. | URL contains the image path from which the application image can be downloaded. It is a string variable. | Digest contain the SHA256 digest of image to be downloaded. It is a 64 byte string variable and should not include whitespaces . | EraseVer This optional field provides a capability to trigger an erase of an version which was downloaded earlier. Customer may want to remove an image from the image store due to various reasons, application with bug, may be one of them. It is a bool variable. | If user configures this field as “true”, OTA service will delete image version mentioned in “Version” field. | If user configures this field as “false”, OTA service will follow image downwload logic. | . | Patch This optional field provides a facility to support patch functionality. If patch functionality-option is enabled in the project, application will try to fetch below fields . | BaseVersion This is base image version against which patch will be applied. Application will check the presence of this base image version, in OTA DB, present in external flash. | BaseVerDigest Base image digest must be provided by user, which will be used by application to verify correct Base image. This digest will be compared against the digest (stored inside OTA DB) of base version. | PatchURL URL-path of patch image. | PatchDigest Digest of Patch image . This is used by the application in the device to verify downloaded patch image. | TargetDigest Digest of the Target image obtained after applying Patch . This is used by the application in the device to verify target image obtained after applying patch functionality. | . | . Sample JSON . { \"ota\": [ { \"Version\": 5, \"URL\": \"http://192.168.0.101:8000/wifi_ota_app_upgrade_ver2.bin\", \"Digest\": \"aff0d6d02fabf6a8cc96f762eb71f54f3687ce7d8605dd814055c17eface0b1d\", \"EraseVer\": false, \"Patch\" : [ { \"BaseVersion\": 1, \"BaseVerDigest\": \"aff0d6d02fabf6a8cc96f762eb71f54f3687ce7d8605dd814055c17eface0b1d\", \"PatchURL\": \"http://192.168.0.101:8000/wifi_ota_app_upgrade_patch.patch\", \"PatchDigest\": \"266008c4a6150d7033e370a48621ecd44985b3d0418cdf13bbb6efa6fae43823\", \"TargetDigest\": \"beac75ef53f0159cae0645c32f58a9705d237823607c6e65267ca61793dfcb08\" } ] } ] } . OTA service will download json file from server first when OTA process is triggered, try to fetch information and proceed further as per below logic: . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/usage.html#ota-server-json-manifest",
    "relUrl": "/system/ota/docs/usage.html#ota-server-json-manifest"
  },"146": {
    "doc": "OTA System Service Usage",
    "title": "Factory Image Structure :",
    "content": "The program memory of an application that include the OTA service will be organized as shown in the image below. Application Header Structure (boot control area): . A boot control area of size 4 KB is maintained in internal flash area of device as a shared memory between the application and the bootloader. This area will contain fields as shown in figure below. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/usage.html#factory-image-structure-",
    "relUrl": "/system/ota/docs/usage.html#factory-image-structure-"
  },"147": {
    "doc": "OTA System Service Usage",
    "title": "Image download process",
    "content": ". | The OTA service task identifies that the server manifest includes an image with a version number numerically higher than the current version being executed in the system. Image version number is a C macro that can be defined in MHC. | The transport layer starts downloading the image using the link in the URL. If the URL starts with an https:// TLS is automatically used. | Once the download is completed successfully, the OTA framework verifies the image by checking the SHA-256 hash, once transport layer finished receiving all data. If download fails, system will go to IDLE. If Auto Update is enabled, user need to reset the device to initiate OTA again. | If image digest verification is failed, user will be notified using user registered callback. If image digest verification is passed, OTA framework will create an entry in OTA database present in external filesystem. OTA database is maintained in csv format. Each entry in the OTA database will contain following information: . a. image name: name of downloaded image. b. image status: This will be set as 0xFE, for newly downloaded image. c. version number: Version number of image obtained from JSON manifest. d. image digest: Image digest obtained from JSON manifest. | Once entry is made successfully, OTA framework updates Boot-Control-header, status field of the current application to “Disabled” 0xF0. | . User will be notified about successful OTA process via user registered callback and wait for system reset or trigger auto system reset based on MHC configuration to load new image into the program flash memory. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/usage.html#image-download-process",
    "relUrl": "/system/ota/docs/usage.html#image-download-process"
  },"148": {
    "doc": "OTA System Service Usage",
    "title": "Block/Flow Diagram:",
    "content": "a. OTA Service: . | OTA Start: OTA process can be triggered using various methods : . Periodically : System will communicate with OTA server periodically (configured by user) to check if any new image is available and initiate OTA process accordingly. Manually : OTA can be triggerred by the application by calling an API. Other sources : User may configure/implement any other means of source like MQTT server to trigger OTA. This is a subset of the manual triggers. | Download JSON manifest file and check for version : JSON file will be downloaded from server first , once OTA process is initiated. JSON file will have version number along with other details. Now system will try to compare the extracted version number from JSON file with currently running application version number and decide accordingly the next step : . | If version number is same abort the OTA process because new image is not available. | If version number is different and higher than the current application version number, then system will continue with OTA process. | . | Patch Functionality : If patch functionality is enabled in the application , it will try fetch relative information from JSON manifest and proceed accordingly. | Initiating image Download process : Based on user configuration system will go for image downloading or will wait for download trigger by user. | Digest verify : SHA-256 verification will be done for downloaded image. | Update OTA database file system : If digest verification is successful , OTA database will be updated in file system for new image. | Storing image in the external flash and wait : If downloaded successfully, the image will be stored in the external flash using standard FS present in Harmony. Afterwards system will perform following steps depending upon user configuration : . | reset automatically if Auto reset option is enabled . | wait till user application triggers reset. | . | . b. Image Programming: . | During each system boot-up, bootloader checks if it needs to program any new, valid image from the external flash. Bootloader goes to program mode, if- . | any newly downloaded image present in the external flash. | if the already present image in the program flash is not “validated” during previous boot. | . | . There are two conditions : . | whether the Application Image in Program-Flash area is valid (indicated by the STATUS field, value of 0xF8 in image boot control area of internal flash), and . | whether it has been confirmed that no errors were present during the previous boot (indicated by the STATUS field of image Database in the external flash, value of 0xF8 ). According to bootloader logic if these two conditions are satisfied it will not go to Program Mode and the bootloader immediately jumps to the application image present in the program-flash area of the device. | . | If two conditions mentioned in the step 1 are not satisfied, the bootloader switches to Image Program Mode. In Image Program Mode bootloader follows Image Programming sequence, which finds the highest ranked image in Image-Store(external flash), erases the Program-Flash area and copies the selected image to the Program-Flash area if the image is successfully verified. As the newly downloaded image with highest version is set as the highest ranked, during the first boot time after the Image-downloading, the bootloader attempts to load the newly downloaded image at the first try. The bootloader choses the highest ranked image to boot. The images are ranked in following order: . | The downloaded , valid Image with highest version. | The next valid, higher version image. | The next known valid, higher version image. . | Default (Golden/Factory) image. | . | If the image is not valid, the bootloader invalidates the image by setting “Invalidate” 0xF0 in STATUS field of image in OTA database present in the external flash and restarts the Image-Programming sequence. | If image is verified successfully, bootloader updates STATUS field of boot control area in internal flash as Unbooted (0xFC) . | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/usage.html#blockflow-diagram",
    "relUrl": "/system/ota/docs/usage.html#blockflow-diagram"
  },"149": {
    "doc": "OTA System Service Usage",
    "title": "Patch functionality",
    "content": "OTA service provides facility of patch OTA . User can configure PATCH functionality using MHC menu ,for more details on configuration please follow - Configuring the library section. Patching is a concept using which , user can generate a binary file, that contains only the difference between the current image and base image version. For generating diff file user can download utility and follow instructions from https://github.com/MicrochipTech/jojodiff . User can provide required parameters for patch in JSON file ( Please follow OTA server JSON manifest section , for more details ) . OTA Service will follow below steps during while processing patch functionality : . | Check if base version is present in OTA DB . | If not present, sysetm will try to download full image from server . | If present, system will proceed with logic for patch functionality. | . | During patching system will at first verify downloaded patch image using SHA-256 . | If patch file is verified successfully , system will generate target binary image. | After successful generation of target image , SHA-256 verification will be done against target image . | If target image is verified successfully , same will be stored in OTA DB present in the external flash. | Finally new image will be applied by bootloader as per application logic. | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/usage.html#patch-functionality",
    "relUrl": "/system/ota/docs/usage.html#patch-functionality"
  },"150": {
    "doc": "OTA System Service Usage",
    "title": "Configuration fuses",
    "content": "Due to the way configuration fuses are stored in the device, they cannot be modified by the bootloader at runtime. Consequently, when the bootloader loads the application, the config fuses set in the bootloader (using #pragma in the bootloader code) will be retained. Unlike most of the other PIC32MZ devices, some of the configuration values of PCI32MZW1 / WFI32 can be overridden at runtime. These are marked as loadable configurations in the datasheet. Please refer to the Configuration Bits section of the SPECIAL FEATURES chapter of the PIC32MZW1 datasheet to see a list of loadable configurations and how to apply them. These loadable configs can be applied at runtime from the application. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/usage.html#configuration-fuses",
    "relUrl": "/system/ota/docs/usage.html#configuration-fuses"
  },"151": {
    "doc": "OTA System Service Usage",
    "title": "Generating the OTA image",
    "content": "Images that are downloaded from the server as part of the OTA process should be stored in .bin format as opposed to the Intel Hex format that is generated by MPLABX. To convert the hex file to bin format, you can use the hex2bin tool in the tools folder of your project. This folder will be created when you generate MHC code with the OTA service included in your project. | In case of a windows machine, you can execute the command hex2bin.exe -i &lt;path to hex file in the dist folder&gt;. In case your development environment is based on a non-Windows OS, you can execute the python script with the same arguments. Make sure that you have python3 installed in your machine. | User may execute hex2bin tool directly from tools folder without any argument. In that case, tool will search for hex file in default path \"..\\project.X\\dist\\project\\production\" and generate bin file . | . | User may also execute post build command ../../tools/hex2bin/hex2bin.exe from MPLABx project itself : . | . | Right click on the project and click on properties. | . | Select “building”, insert below command and click “OK”: ../../tools/hex2bin/hex2bin.exe . Note: python should be present in the system variable path. | . | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/usage.html#generating-the-ota-image",
    "relUrl": "/system/ota/docs/usage.html#generating-the-ota-image"
  },"152": {
    "doc": "OTA System Service Usage",
    "title": "OTA server:",
    "content": "Any standard http/https server can be used as OTA server as long as it hosts a manifest file with the mandatory fields. | For testing the service, you may also use a simple python command to create a local HTTP server using below steps: . | Open command prompt and change directory to the folder where json file/ota image is present. | Use below python command in command prompt: . python -m SimpleHTTPServer 8000 . | . | . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/usage.html#ota-server",
    "relUrl": "/system/ota/docs/usage.html#ota-server"
  },"153": {
    "doc": "OTA System Service Usage",
    "title": "Integrating bootloader",
    "content": "It is required to integrate the bootloader and OTA application image to create a single unified HEX file. To integrate 2 images we can use hexmate tool, which is readily available with MPLABX package as part of the standard installation. To combine the hex files - please follow steps mentioned in configuration page : Configuring the library . ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/usage.html#integrating-bootloader",
    "relUrl": "/system/ota/docs/usage.html#integrating-bootloader"
  },"154": {
    "doc": "OTA System Service Usage",
    "title": "Resolving Data Conflict  Compilation error",
    "content": "During compilation if user is facing Data conflict at address.. compilation error , please check if there is any mismatch of configuration ( #pragma ) between bootloader and application. User may simply compare initialization.c files of both the projects to check mismatch. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/usage.html#resolving-data-conflict--compilation-error",
    "relUrl": "/system/ota/docs/usage.html#resolving-data-conflict--compilation-error"
  },"155": {
    "doc": "Web Socket Server System Service Usage",
    "title": "Web Socket Server System Service Usage",
    "content": " ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wss/docs/usage.html",
    "relUrl": "/system/wss/docs/usage.html"
  },"156": {
    "doc": "Web Socket Server System Service Usage",
    "title": "Description",
    "content": "Web Socket Server System Service Library provides an application programming interface (API) for implementing a Web Socket Server functionalities. The user need not take care about the frame connection handshakes,the data frame formatting etc. The WSS System Service uses the underlying Net system Service APIs for achieving TCPIP network functionalities. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wss/docs/usage.html#description",
    "relUrl": "/system/wss/docs/usage.html#description"
  },"157": {
    "doc": "Web Socket Server System Service Usage",
    "title": "Abstraction Model",
    "content": "The Web Socket Server System Service provides an abstraction to the complete Web Socket Server implementation with the following functinalities. | Connectivity to multiple clients | Simple APIs for data exchanges | Reduced time for application development | . The following diagram depicts the Web Socket Server System Service abstraction model. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wss/docs/usage.html#abstraction-model",
    "relUrl": "/system/wss/docs/usage.html#abstraction-model"
  },"158": {
    "doc": "Web Socket Server System Service Usage",
    "title": "How the service works",
    "content": "Once the user configures the Web Socket Server System Service in the MHC, the MHC will generate the required code for service implementation. User need to implement his application according to the requirement. The WSS system service initialization will be taken care with the code generation.To get the indication on Web Socket Server events, use need to register the callback function using the API SYS_WSS_register_callback(). ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wss/docs/usage.html#how-the-service-works",
    "relUrl": "/system/wss/docs/usage.html#how-the-service-works"
  },"159": {
    "doc": "Web Socket Server System Service Usage",
    "title": "Web Socket Server System Service Initialization",
    "content": ". ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wss/docs/usage.html#web-socket-server-system-service-initialization",
    "relUrl": "/system/wss/docs/usage.html#web-socket-server-system-service-initialization"
  },"160": {
    "doc": "Web Socket Server System Service Usage",
    "title": "Web Socket Server System Service API usage",
    "content": "The below diagram shows the API usage of the Web Socket Server System service. ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wss/docs/usage.html#web-socket-server-system-service-api-usage",
    "relUrl": "/system/wss/docs/usage.html#web-socket-server-system-service-api-usage"
  },"161": {
    "doc": "App Debug System Service Usage",
    "title": "App Debug System Service Usage",
    "content": "# App Debug System Service Usage ## Description The App Debug System Service provides simple APIs to enable/ disable logs at runtime based on the log levels and flow. More on how any component using this library can enabling/ disable logs at runtime can go through the system services like the MQTT, NET, and Wifi System Service. ## Abstraction Model The App Debug System Service library provides an abstraction to the System Console Lohs to provide following functionalities. - Enabling/ disabling of logs at runtime. - Enabling/ disabling of logs based on severity level - Enabling/ disabling of logs based on logical flows, e.g., Data Flow, Control Flow, etc ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/appdebug/docs/usage.html",
    "relUrl": "/system/appdebug/docs/usage.html"
  },"162": {
    "doc": "MQTT System Service Usage",
    "title": "MQTT System Service Usage",
    "content": "# MQTT System Service Usage ## Description The MQTT System Service provides simple APIs to enable MQTT Client Connectivity to a configured MQTT Broker. The User need not take care of intermediate states of a MQTT Connection, as the Service internally takes care of that. User is not required to have Security domain knowledge to establish a secured connection via the application using MQTT System Service library. ### Command Line: User can follow below commands for MQTT System Service: 1. sysmqtthelp MQTT System Service help command which displays the supported CLI commands ![](/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/images/sysmqtthelp_cli.png) 2. sysmqtt open Command for Reconfiguring an already open instance of MQTT System Service ![](/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/images/sysmqttopen_cli.png) Note: Once the User has configured all the params, the last command for opening the new connection should 'sysmqtt open apply' 3. sysmqtt close Command to close the instance of MQTT System Service ![](/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/images/sysmqttclose_cli.png) 4. sysmqtt send Command to send message on a topic for the instance of MQTT System Service ![](/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/images/sysmqttsend_cli.png) 5. sysmqtt sunbscribe Command to subscribe to a topic to receive message coming on that topic ![](/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/images/sysmqttsubscribe_cli.png) 6. sysmqtt unsunbscribe Command to unsubscribe from a topic ![](/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/images/sysmqttunsubscribe_cli.png) 7. sysmqtt get info Command for knowing the Current Information for all the Instances of Net System Service ![](/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/images/sysmqttgetinfo_cli.png) ## Abstraction Model The MQTT System Service library provides an abstraction to the MQTT APIs to provide following functionalities. - Connectivity for MQTT Client - Secured Connectivity using TLS - Self Healing - Reduce code user has to write - Reduce time to develop and maintain The following diagram depicts the MQTT System Service abstraction model. ![](/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/images/MqttService_abstract.png) ## How The Library Works By default MHC generated code provides all the functionalities to enable MQTT Client applicatation, with secured or unsecured connectivity. User needs to configure the required MQTT Brokerconfiguration using MHC. User needs to call the SYS_MQTT_Connect() API with a valid callback to open an instance of the MQTT Client configured in the MHC.  ![](/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/images/MqttConnect.png) The User Application is expected to call SYS_MQTT_Task() API periodically as this API ensures that the MQTT System service is able to execute its state machine to process any messages and invoke the user callback for any events.  The User Application can call SYS_MQTT_Publish()/ SYS_MQTT_Subscribe() API in case it wants to publish message to a topic or receive messages on a topic. ![](/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/images/MqttPublish.png) ![](/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/images/MqttSubscribe.png) The User Application when enables Auto-Reconnect, it enables the self healing feature of the MQTT Service. When this feature is enabled, the service will automatically try to establish connection with the MQTT Broker whenever a connection breaks. ![](/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/images/MqttSelfHealing.png) ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/usage.html",
    "relUrl": "/system/mqtt/docs/usage.html"
  },"163": {
    "doc": "Net System Service Usage",
    "title": "Net System Service Usage",
    "content": "# Net System Service Usage ## Description The NET System Service provides simple APIs to enable Server or Client Connectivity for either TCP or UDP. The User need not take care of intermediate states of a TCPIP Connection, as the Service internally takes care of that. User is not required to have Security domain knowledge to establish a secured connection via the application using NET System Service library. ### Command Line: User can follow below commands for NET System Service: 1. sysnethelp NET System Service help command which displays the supported CLI commands ![](/wireless_system_pic32mzw1_wfi32e01/system/net/docs/images/sysnethelp_cli.png) 2. sysnet open Command for Reconfiguring an already open instance of Net System Service ![](/wireless_system_pic32mzw1_wfi32e01/system/net/docs/images/sysnetopen_cli.png) 3. sysnet close Command to close the instance of Net System Service ![](/wireless_system_pic32mzw1_wfi32e01/system/net/docs/images/sysnetclose_cli.png) 4. sysnet send Command to send message on the network connection established by the instance of Net System Service ![](/wireless_system_pic32mzw1_wfi32e01/system/net/docs/images/sysnetsend_cli.png) 5. sysnet get info Command for knowing the Current Information for all the Instances of Net System Service ![](/wireless_system_pic32mzw1_wfi32e01/system/net/docs/images/sysnetgetinfo_cli.png) ## Abstraction Model The NET System Service library provides an abstraction to the NetPres/ TCPIP APIs to provide following functionalities. - Connectivity for TCP Client - Connectivity for TCP Server - Connectivity for UDP Client - Connectivity for UDP Server - Self Healing - Reduce code user has to write - Reduce time to develop and maintain The following diagram depicts the Net System Service abstraction model. ![](/wireless_system_pic32mzw1_wfi32e01/system/net/docs/images/NetService_abstract.png) ## How The Library Works By default MHC generated code provides all the functionalities to enable Client or Server mode applicatation, with TCP or UDP as the IP Protocol. User needs to configure the required Client or Server mode configuration using MHC. User needs to call the SYS_NET_Open() API with a valid callback to open an instance of the Client/ Server configured in the MHC.  ![](/wireless_system_pic32mzw1_wfi32e01/system/net/docs/images/NetOpen.png) The User Application is expected to call SYS_NET_Task() API periodically as this API ensures that the Net System service is able to execute its state machine to process any messages and invoke the user callback for any events.  ![](/wireless_system_pic32mzw1_wfi32e01/system/net/docs/images/NetTask.png) The User Application can call SYS_NET_CtrlMsg() API in case it wants to disconnect the opened connection or to reconnect using different configuration. ![](/wireless_system_pic32mzw1_wfi32e01/system/net/docs/images/NetCtrlMsg.png) ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/net/docs/usage.html",
    "relUrl": "/system/net/docs/usage.html"
  },"164": {
    "doc": "Wi-Fi System Service Usage",
    "title": "Wi-Fi System Service Usage",
    "content": "# Wi-Fi System Service Usage ## Abstraction Model The Wi-Fi System Service library provides an abstraction to the Wi-Fi driver API's to provide following functionalities. - Simple APIs to enable/disable STA mode - Simple APIs to enable/disable AP mode - Self Healing - Reduce code user has to write - Reduce time to develop and maintain The following diagram depicts the Wi-Fi System Service abstraction model. ![](/wireless_system_pic32mzw1_wfi32e01/system/wifi/docs/images/Wifiservice_abstract.png) ## How The Library Works By default, MHC generated code provides all the functionalities to enable STA or AP mode application. User needs to configure the required STA or AP mode configuration using MHC.  ![](/wireless_system_pic32mzw1_wfi32e01/system/wifi/docs/images/Seqdig_WiFi_Initialization.png) Multiple clients can register for callbacks to the Wi-Fi System Service Library for getting Wi-Fi connectivity update information. Additionally clients can make request to the Wi-Fi System Service Library using SYS\\_WIFI\\_CtrlMsg() API. More information can be found in the SYS\\_WIFI\\_CtrlMsg examples.  ![](/wireless_system_pic32mzw1_wfi32e01/system/wifi/docs/images/seqdig_WiFi_Multiclient.png) ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifi/docs/usage.html",
    "relUrl": "/system/wifi/docs/usage.html"
  },"165": {
    "doc": "Wi-Fi provisioning System Service Usage",
    "title": "Wi-Fi provisioning System Service Usage",
    "content": "# Wi-Fi provisioning System Service Usage {: .no_toc } ### {: .no_toc .text-delta } 1. TOC {:toc} --- The Wi-Fi Provisioning System Service povides below methods to configuring desired Wi-Fi SSID and related security credentials of the Home AP into the device. # Wi-Fi Provisioning Methods ## Command line MHC configuration menu for Command line(CLI): ![](/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/images/SYS_Wi-Fi_Provision_MHC_diagram_1.png) - Enable Check box \"Command Line(CLI)\" to include CLI Wi-Fi provisioning method. - After making configuration changes, generate the code. - Compile the project and load the image into device. Wi-Fi Provisioning commands Details | Command | Details | Example | ----------------| ---------------|------------------------------- | wifiprovhelp | Wi-Fi Provision System Service help command | wifiprovhelp | wifiprov set \\ \\ \\ \\ \\ \\ \\ \\ | Set Wi-Fi Configuration for Station(STA) mode | wifiprov set 0 1 \"GEN\" 0 1 3 \"DEMO_AP\" \"password\" | wifiprowifiprov set \\ \\ \\ \\ \\ \\ \\ \\ | Set Wi-Fi Configuration for Access point(AP) mode | wifiprov set 1 1 \"GEN\" 1 1 3 \"DEMO_SOFTAP\" \"password\" | wifiprov get | Get Wi-Fi Configuration | wifiprov get ||| Wi-Fi Provisioning commands command parameters information, | Parameter | Sub Parameter | ----------------| ----------------------------------------------------- | bootmode | 0 - Station(STA) mode.1- Access point(AP) mode. | save config | 0 - Do not save configuration in NVM(Program Flash Memory). 1- Save configuration in NVM . | country code | country code configuration: GEN - General USA - North America EMEA - Europe CUST1,CUST2 - Customer custom regulatory configuration | Channel | In Station mode value range from 0-13, 0 - select all the channels.1-13 - select specified channel. In Access point mode value range from 1-13. |auto connect(only applicable in STA mode)| 0 - Don't connect to AP, wait for client request.1 - Connect to AP. |ssid visibility (only applicable in AP mode)| 0 - Hidden SSID.1 - Broadcast SSID . |authtype(Security type) | 1 - OPEN Mode. 3 - WPAWPA2 (Mixed) mode. 4 - WPA2 mode. 5 - WPA2WPA3 (Mixed) mode. 6 - WPA3 mode. |ssid(ssid name) | SSID name |psk name(password)| Password/passphrase ||| Note: - Wi-Fi Provisioning using command line method is not recommended in production release due to security concerns. - All commands the parameters are mandatory, and none are optional except for password in case of \"open\" authentication. ## TCP Socket mode MHC configuration menu for TCP Socket: ![](/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/images/SYS_Wi-Fi_Provision_MHC_diagram_1.png) - Enable Check box \"TCP Socket\" to include TCP Socket Wi-Fi provisioning method. - Modifiy the \"Socket Server Port\".Defult port number is 6666. - After making configuration changes, generate the code. - Compile the project and load the image into device. Wi-Fi provisioning service can be configured to use TCP socket, a socket server is activated when the device boots.Use a laptop or mobile phone as a TCP client to connect to the device's socket server. Wi-Fi provisioning service defult TCP server port is 6666. ### Wi-Fi provisioning with JSON format User can send the below JSON format data from TCP Client to provisioning the device. Example: ```json { \"mode\": 0, \"save_config\": 1,\"countrycode\":\"GEN\", \"STA\": { \"ch\": 0, \"auto\": 1, \"auth\": 3, \"SSID\": \"DEMO_AP\", \"PWD\":\"password\"}, \"AP\": {\"ch\": 2, \"ssidv\": 1, \"auth\": 4, \"SSID\": \"DEMO_AP_SOFTAP\", \"PWD\": \"password\" } } ``` Details of JSON Parameters, | Parameter | Sub Parameter | Value Details | ----------------| ---------------|------------------------------- | mode | 0 - Station(STA) mode. 1- Access point(AP) mode.| save_config | 0 - Do not save configuration in NVM. 1- Save configuration in NVM . | STA | ch (Channel) | In Station mode value range from 0-13,0 - select all the channels.1-13 - select specified channel. | |auto(auto connect)| 0 - Don't connect to AP, wait for client request. 1 - Connect to AP. | |Auth(Security type) | 1 - OPEN Mode.3 - WPAWPA2 (Mixed) mode. 4 - WPA2 mode. 5 - WPA3 mode. | |SSID(ssid name) | SSID name | |PWD(password) | Password/passphrase | AP |ch (Channel) | In Access point mode value range from 1-13 | |ssidv(ssid visibility) | 0 - Hidden SSID. 1 - Broadcast SSID . | |Auth(Security type) | 1 - OPEN Mode. 3 - WPAWPA2 (Mixed) mode. 4 - WPA2 mode. 5 - WPA2WPA3 (Mixed) mode. 6 - WPA3 mode. | |SSID(ssid name) | SSID name | |PWD(password) | Password/passphrase ||| ### Wi-Fi provisioning with Mobile Application Follow below steps to provisioning the device using mobile application: - Download and install the mobile application \"Wi-Fi Provisioning\" from Android play store. - Start PIC32MZW1 device in AP mode (Configure Wi-Fi Service \"Device Mode\" as \"AP\"). - Using mobile Wi-Fi setting, make a Wi-Fi connection to PIC32MZW1 AP Mode. ![](/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/images/SYS_Wi-Fi_Provision_Mobile_connect.png) - Open the \"Wi-Fi Provisioning\" application. - Enter PIC32MZW1 IP address as Server IP in the mobile application. - Enter the Wi-Fi provisioning System Service configured port number. ![](/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/images/SYS_Wi-Fi_Provision_Mobile_app_home.png) - SCAN near by HOMEAP and select the desired HOMEAP. - Enter the password. ![](/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/images/SYS_Wi-Fi_Provision_Mobile_app_scan_connect.png) - User can manually add provisioning information using \"Add New Network\" option also. ![](/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/images/SYS_Wi-Fi_Provision_Mobile_app_add_new_network.png) - After provisioning the device reboot and connect to HOMEAP. Sending the TCP data without mobile application: Using laptop or mobile phone as TCP client,user can send the TCP data in below format to provisioning the device. TCP Data Format : apply,\\,\\,\\,NULL | Parameter | Details | ---------------- | ------------------------------------- |ssid(ssid name) | SSID name |Auth (security type) | 1- OPEN MODE 2 - WPA2 Mode |psk name(password) | Password/passphrase ||| ## HTTP ### Webpage using HTTP MHC configuration menu for HTTP (unsecure): ![](/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/images/SYS_Wi-Fi_Provision_MHC_diagram_2.png) - Enable Check box \"HTTP\" to include Wi-Fi provisioning using webpage. - press \"Yes\"for components inclusion pop-up. - When user enable \"HTTP\" checkbox only, defualt wi-f provising method enable with port number 80. - After making configuration changes, generate the code. - Compile the project and load the image into device. Follow below steps to provisioning the device using HTTP: - Start PIC32MZW1 device in AP mode (Configure Wi-Fi Service \"Device Mode\" as \"AP\"). - Connect Laptop or mobile phone to PIC32MZW1 AP device. - Open the browser and enter the PIC32MZW1 AP IP address(example: http://192.168.1.1/). ![](/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/images/SYS_Wi-Fi_Provision_HTTP_HOME.png) - Goto \"Network Configuratio\" page. - There are two ways of configuring a wifi network: \"Scan and Connect to Wifi Network\", and \"Static Wifi Configuration\". ![](/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/images/SYS_Wi-Fi_Provision_HTTP_Networkconfig_Scan.png) - In case of \"Scan and Connect\", one can scan (press the 'Start Scan' button) for the available APs in the vicinity and connect to the AP of one's choice. ![](/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/images/SYS_Wi-Fi_Provision_HTTP_Networkconfig_ScanResults.png) - Click on the AP from the list, you want to connect to. In case of secured AP, the user needs to give the password. ![](/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/images/SYS_Wi-Fi_Provision_HTTP_Networkconfig_Password.png) - In case of Hidden Networks, the SSID of the AP will not be visible. In this case, the user will need to give both SSID and the password. ![](/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/images/SYS_Wi-Fi_Provision_HTTP_Networkconfig_HiddenNw.png) - For \"Static Wifi Configuration\", update the Configuration details and click on \"Apply Wi-Fi Configuration\" ![](/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/images/SYS_Wi-Fi_Provision_HTTP_Networkconfig_http.png) - Device will reboot and apply configuration in the device. HTTP functionality is also supported in station(STA) mode. ### Webpage using HTTPNET (Un-Secure) MHC configuration menu for HTTPNET(Unsecure): ![](/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/images/SYS_Wi-Fi_Provision_MHC_diagram_3.png) Follow below steps to enable to HTTPNET unsecure, - Enable Check box \"Enable HTTPNET\". - Configure \"Server port\".User can configure any valid port number. - Enable Check box \"HTTP\" and press \"Yes\"for components inclusion pop-up. - After making configuration changes, generate the code. - Compile the project and load the image into device. Follow below steps to provisioning the device using HTTP: - Start PIC32MZW1 device in AP mode (Configure Wi-Fi Service \"Device Mode\" as \"AP\"). - Connect Laptop or mobile phone to PIC32MZW1 AP device. - Open the browser and enter the PIC32MZW1 AP IP address with port number(example: http://192.168.1.1:401/). ![](/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/images/SYS_Wi-Fi_Provision_HTTP_HOME.png) - Goto \"Network Configuratio\" page. - Update the Configuration details and click on \"Apply Wi-Fi Configuration\" ![](/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/images/SYS_Wi-Fi_Provision_HTTP_Networkconfig.png) - Device will reboot and apply configuration in the device. ### Webpage using HTTPNET (Secure) MHC configuration menu for HTTPNET(secure): ![](/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/images/SYS_Wi-Fi_Provision_MHC_diagram_4.png) Follow below steps to enable HTTPNET secure, - Enable Check box \"Enable HTTPNET\". - Enable check box \"Enable Secure Connection with HTTPNET\" - Configure \"Server port\".User can configure any valid port number. - Enable Check box \"HTTP\" and press \"Yes\"for components inclusion pop-up. - After making configuration changes, generate the code. - Compile the project and load the image into device. Follow below steps to provisioning the device using HTTP: - Start PIC32MZW1 device in AP mode (Configure Wi-Fi Service \"Device Mode\" as \"AP\"). - Connect Laptop or mobile phone to PIC32MZW1 AP device. - Open the browser and enter the PIC32MZW1 AP IP address with port number(example: https://192.168.1.1:443/). ![](/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/images/SYS_Wi-Fi_Provision_HTTP_HOME.png) - Goto \"Network Configuratio\" page. - Update the Configuration details and click on \"Apply Wi-Fi Configuration\" ![](/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/images/SYS_Wi-Fi_Provision_HTTP_Networkconfig.png) - Device will reboot and apply configuration in the device. # How The Library Works The Wi-Fi Provisioning System Service implemented Command line,HTTP and Socket mode Wi-Fi Provisioning method.Wi-Fi Provisioning System Service by default enabled along Wi-Fi System Service.User can make configuration changes as per their application requirement ## Execution Flow The following diagram shows how the Command line and Socket mode Wi-Fi Provisioning methods are enabled. ![](/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/images/SYS_Wi-Fi_Provision_Seq.png) ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/usage.html",
    "relUrl": "/system/wifiprov/docs/usage.html"
  },"166": {
    "doc": "Harmony 3 PIC32MZW1 wireless system services package",
    "title": "Harmony 3 PIC32MZW1 wireless system services package",
    "content": "![Microchip logo](https://raw.githubusercontent.com/wiki/Microchip-MPLAB-Harmony/Microchip-MPLAB-Harmony.github.io/images/microchip_logo.png) ![Harmony logo small](https://raw.githubusercontent.com/wiki/Microchip-MPLAB-Harmony/Microchip-MPLAB-Harmony.github.io/images/microchip_mplab_harmony_logo_small.png) # MPLAB® Harmony 3 PIC32MZW1/WFI32 wireless system services MPLAB® Harmony 3 is an extension of the MPLAB® ecosystem for creating embedded firmware solutions for Microchip 32-bit SAM and PIC® microcontroller and microprocessor devices. Refer to the following links for more information. - [Microchip 32-bit MCUs](https://www.microchip.com/design-centers/32-bit) - [Microchip 32-bit MPUs](https://www.microchip.com/design-centers/32-bit-mpus) - [Microchip MPLAB X IDE](https://www.microchip.com/mplab/mplab-x-ide) - [Microchip MPLAB® Harmony](https://www.microchip.com/mplab/mplab-harmony) - [Microchip MPLAB® Harmony Pages](https://microchip-mplab-harmony.github.io/) This repository contains the MPLAB® Harmony 3 Wireless wireless system services for the PIc32MZW1/WFI32 family of devices. Wireless system services absstracts out the complexities of a networked system design and simplifies development using PIC32MZW1 and WFI32. Refer to the following links for more information about each system service. * [Wi-Fi Service](/wireless_system_pic32mzw1_wfi32e01/system/wifi/docs/readme.html) * [Wi-Fi provisioning Service](/wireless_system_pic32mzw1_wfi32e01/system/wifiprov/docs/readme.html) * [Net Service](/wireless_system_pic32mzw1_wfi32e01/system/net/docs/readme.html) * [Mqtt Service](/wireless_system_pic32mzw1_wfi32e01/system/mqtt/docs/readme.html) * [App Debug Service](/wireless_system_pic32mzw1_wfi32e01/system/appdebug/docs/readme.html) * [OTA Service](/wireless_system_pic32mzw1_wfi32e01/system/ota/docs/readme.html) * [WebSocket Server Service](/wireless_system_pic32mzw1_wfi32e01/system/wss/docs/readme.html) Refer to the following links for release notes, training materials, and interface reference information. - [Release Notes](/wireless_system_pic32mzw1_wfi32e01/release_notes.html) - [MPLAB® Harmony License](/wireless_system_pic32mzw1_wfi32e01/mplab_harmony_license.html) - [MPLAB® Harmony 3 Wireless API Help](https://microchip-mplab-harmony.github.io/wireless) - [PIc32MZW1 / WFI32 Software Users Guide](https://ww1.microchip.com/downloads/en/DeviceDoc/PIC32MZ_W1_Software_User_Guide.pdf) ## Contents Summary | Folder | Description | --- | --- | system | Contains Wireless service code and configuration files. | docs | Contains documentation in html format for offline viewing (to be used only after cloning this repository onto a local machine). Use [github pages](https://microchip-mplab-harmony.github.io/wireless_system_pic32mzw1_wfi32e01/) of this repository for viewing it online. | ## Code Examples Wireless subsystem code examples for PIC32MZW1/WFI32 can be found in the [wireless_apps_pic32mzw1_wfi32e01](https://github.com/Microchip-MPLAB-Harmony/wireless_apps_pic32mzw1_wfi32e01) repo. ____ [![License](https://img.shields.io/badge/license-Harmony%20license-orange.svg)](https://github.com/Microchip-MPLAB-Harmony/wireless_system_pic32mzw1_wfi32e01/blob/master/mplab_harmony_license.md) [![Latest release](https://img.shields.io/github/release/Microchip-MPLAB-Harmony/wireless_system_pic32mzw1_wfi32e01.svg)](https://github.com/Microchip-MPLAB-Harmony/wireless_system_pic32mzw1_wfi32e01/releases/latest) [![Latest release date](https://img.shields.io/github/release-date/Microchip-MPLAB-Harmony/wireless_system_pic32mzw1_wfi32e01.svg)](https://github.com/Microchip-MPLAB-Harmony/wireless_system_pic32mzw1_wfi32e01/releases/latest) [![Commit activity](https://img.shields.io/github/commit-activity/y/Microchip-MPLAB-Harmony/wireless_system_pic32mzw1_wfi32e01.svg)](https://github.com/Microchip-MPLAB-Harmony/wireless_system_pic32mzw1_wfi32e01/graphs/commit-activity) [![Contributors](https://img.shields.io/github/contributors-anon/Microchip-MPLAB-Harmony/wireless_system_pic32mzw1_wfi32e01.svg)]() ____ [![Follow us on Youtube](https://img.shields.io/badge/Youtube-Follow%20us%20on%20Youtube-red.svg)](https://www.youtube.com/user/MicrochipTechnology) [![Follow us on LinkedIn](https://img.shields.io/badge/LinkedIn-Follow%20us%20on%20LinkedIn-blue.svg)](https://www.linkedin.com/company/microchip-technology) [![Follow us on Facebook](https://img.shields.io/badge/Facebook-Follow%20us%20on%20Facebook-blue.svg)](https://www.facebook.com/microchiptechnology/) [![Follow us on Twitter](https://img.shields.io/twitter/follow/MicrochipTech.svg?style=social)](https://twitter.com/MicrochipTech) [![](https://img.shields.io/github/stars/Microchip-MPLAB-Harmony/wireless_system_pic32mzw1_wfi32e01.svg?style=social)]() [![](https://img.shields.io/github/watchers/Microchip-MPLAB-Harmony/wireless_system_pic32mzw1_wfi32e01.svg?style=social)]() ",
    "url": "http://localhost:4000/wireless_system_pic32mzw1_wfi32e01/",
    "relUrl": "/"
  }
}
